name: 'Run xcodebuild test'
description: 'Action runs the test for the scheme specified'

inputs:
  scheme:
    required: true
    type: string
  project_path:
    required: false
    type: string
  xcode_path:
    required: false
    type: string
  destination:
    required: false
    type: string
    default: 'platform=iOS Simulator,name=iPhone 13,OS=latest'
  sdk:
    required: false
    type: string
    default: 'iphonesimulator'
  other_flags:
    required: false
    type: string
    default: ''
  generate_coverage:
    required: false
    type: boolean
    default: false
  retry_on_failure:
    required: false
    type: boolean
    default: false
  cloned_source_packages_path:
    required: false
    type: string
    default: ''

runs:
  using: "composite"
  steps:
    - name: Test ${{ inputs.scheme }}
      env:
        SCHEME: ${{ inputs.scheme }}
        PROJECT_PATH: ${{ inputs.project_path }}
        XCODE_PATH: ${{ inputs.xcode_path }}
        CLONED_SOURCE_PACKAGES_PATH: ${{ inputs.cloned_source_packages_path }}
      run: |
        if [ ! -z "$PROJECT_PATH" ]; then
          cd $PROJECT_PATH
        fi
        if [ ! -z "$XCODE_PATH" ]; then
          echo "Using Xcode $XCODE_PATH"
          sudo xcode-select -s $XCODE_PATH
        fi

        clonedSourcePackagesPath=""
        if [ ! -z "$CLONED_SOURCE_PACKAGES_PATH" ]; then
          echo "Using custom cloned source packages path"
          clonedSourcePackagesPath+="-clonedSourcePackagesDirPath $CLONED_SOURCE_PACKAGES_PATH"
        fi

        coverageFlags=""
        if [ "${{ inputs.generate_coverage }}" == "true" ]; then
          echo "Code Coverage is enabled!"
          coverageFlags+="-derivedDataPath Build/ -enableCodeCoverage YES"
          if [ -z "$clonedSourcePackagesPath" ]; then
            clonedSourcePackagesPath+="-clonedSourcePackagesDirPath ~/Library/Developer/Xcode/DerivedData/$SCHEME"
          fi
        fi

        retryFlags=""
        if [ "${{ inputs.retry_on_failure }}" == "true" ]; then
          echo "Retries are enabled"
          retryFlags+="-retry-tests-on-failure"
        fi

        xcode-select -p
        xcodebuild -version
        xcodebuild test -scheme $SCHEME -sdk '${{ inputs.sdk }}' -destination '${{ inputs.destination }}' ${{ inputs.other_flags }} $clonedSourcePackagesPath $coverageFlags $retryFlags | xcpretty --simple --color --report junit && exit ${PIPESTATUS[0]}
      shell: bash

    - name: Generate Coverage report
      if: ${{ inputs.generate_coverage == 'true' }}
      run: |
        echo "Generating Coverage report..."
        cd Build/Build/ProfileData
        cd $(ls -d */|head -n 1)
        pathCoverage=Build/Build/ProfileData/${PWD##*/}/Coverage.profdata
        cd ${{ github.workspace }}
        xcrun llvm-cov export -format="lcov" -instr-profile $pathCoverage Build/Build/Products/Debug-${{ inputs.sdk }}/$SCHEME.o > $SCHEME-Coverage.lcov
      shell: bash
