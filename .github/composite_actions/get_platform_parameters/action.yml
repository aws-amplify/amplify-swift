name: 'Get the build parameters for a given platform'
inputs:
  platform:
    description: 'The name of the platform. Valid values are iOS, tvOS, watchOS and macOS'
    required: true
    type: string
  xcode_version:
    description: "The version of Xcode. Available aliases are 'latest' and 'minimum'"
    default: 'latest'
    type: string
  destination:
    description: "The destination associated with the given platform and Xcode version"
    default: ''
    type: string

outputs:
  destination:
    description: "The destination associated with the given platform and Xcode version"
    value: ${{ steps.get-destination.outputs.destination }}
  sdk:
    description: "The SDK associated with the given platform"
    value: ${{ steps.get-sdk.outputs.sdk }}
  xcode-version:
    description: "The Xcode version to build with"
    value: ${{ steps.get-xcode-version.outputs.xcode-version }}

runs:
  using: "composite"
  steps:
    - name: Validate platform
      run: |
        INPUT_PLATFORM=${{ inputs.platform }}
        case $INPUT_PLATFORM in
          iOS|tvOS|watchOS|macOS) ;;
          *) echo "Unsupported platform: $INPUT_PLATFORM"; exit 1 ;;
        esac
      shell: bash

    - id: get-xcode-version
      run: |
        LATEST_XCODE_VERSION=14.3.1
        MINIMUM_XCODE_VERSION=14.0.1

        INPUT_XCODE_VERSION=${{ inputs.xcode_version }}

        case $INPUT_XCODE_VERSION in
          latest)
            XCODE_VERSION=$LATEST_XCODE_VERSION ;;
          minimum)
            XCODE_VERSION=$MINIMUM_XCODE_VERSION ;;
          *)
            XCODE_VERSION=$INPUT_XCODE_VERSION ;;
        esac
        echo "xcode-version=$XCODE_VERSION" >> $GITHUB_OUTPUT

      shell: bash

    - id: get-destination
      run: |
        INPUT_PLATFORM=${{ inputs.platform }}
        INPUT_DESTINATION='${{ inputs.destination }}'
        INPUT_XCODE_VERSION=${{ inputs.xcode_version }}

        DESTINATION_MAPPING='{
          "minimum": {
            "iOS": "platform=iOS Simulator,name=iPhone 14,OS=16.0",
            "tvOS": "platform=tvOS Simulator,name=Apple TV 4K (2nd generation),OS=16.0",
            "watchOS": "platform=watchOS Simulator,name=Apple Watch Series 8 (45mm),OS=9.0",
            "macOS": "platform=macOS,arch=x86_64"
          },
          "latest": {
            "iOS": "platform=iOS Simulator,name=iPhone 14,OS=16.4",
            "tvOS": "platform=tvOS Simulator,name=Apple TV 4K (3rd generation),OS=16.4",
            "watchOS": "platform=watchOS Simulator,name=Apple Watch Series 8 (45mm),OS=9.4",
            "macOS": "platform=macOS,arch=x86_64"
          }
        }'

        if [ -z "$INPUT_DESTINATION" ]; then
          DESTINATION=$(echo $DESTINATION_MAPPING | jq -r ".\"$INPUT_XCODE_VERSION\".$INPUT_PLATFORM")
        else
          DESTINATION=$INPUT_DESTINATION
        fi

        if [ -z "$DESTINATION" ]; then
          echo "No available destination to build for"
          exit 1
        fi
        echo "destination=$DESTINATION" >> $GITHUB_OUTPUT
      shell: bash

    - id: get-sdk
      run: |
        INPUT_PLATFORM=${{ inputs.platform }}
        SDK_MAPPING='{
          "iOS": "iphonesimulator",
          "tvOS": "appletvsimulator",
          "watchOS": "watchsimulator",
          "macOS": "macosx"
        }'
        echo "sdk=$(echo $SDK_MAPPING | jq -r .$INPUT_PLATFORM)" >> $GITHUB_OUTPUT
      shell: bash

