name: 'Get the build parameters for a given platform'
inputs:
  platform:
    description: 'The name of the platform. Valid values are iOS, tvOS, watchOS and macOS'
    required: true
    type: string
  xcode_version:
    description: "The version of Xcode. Available aliases are 'latest', 'minimum', and 'beta'"
    default: 'latest'
    type: string
  destination:
    description: "The destination associated with the given platform and Xcode version"
    default: ''
    type: string

outputs:
  destination:
    description: "The destination associated with the given platform and Xcode version"
    value: ${{ steps.get-destination.outputs.destination }}
  device:
      description: "The device name used in the destination"
      value: ${{ steps.get-destination.outputs.device }}
  sdk:
    description: "The SDK associated with the given platform"
    value: ${{ steps.get-sdk.outputs.sdk }}
  xcode-version:
    description: "The Xcode version to build with"
    value: ${{ steps.get-xcode-version.outputs.xcode-version }}

runs:
  using: "composite"
  steps:
    - name: Validate platform
      run: |
        INPUT_PLATFORM=${{ inputs.platform }}
        case $INPUT_PLATFORM in
          iOS|tvOS|watchOS|macOS|visionOS) ;;
          *) echo "Unsupported platform: $INPUT_PLATFORM"; exit 1 ;;
        esac
      shell: bash

    - id: get-xcode-version
      run: |
        LATEST_XCODE_VERSION=16.4.0
        MINIMUM_XCODE_VERSION=16.0.0
        DEFAULT_BETA_XCODE_VERSION=26.0_beta

        INPUT_XCODE_VERSION=${{ inputs.xcode_version }}

        case $INPUT_XCODE_VERSION in
          latest)
            XCODE_VERSION=$LATEST_XCODE_VERSION ;;
          minimum)
            XCODE_VERSION=$MINIMUM_XCODE_VERSION ;;
          beta)
            # Try to auto-detect installed Xcode 26 beta app name
            DETECTED=$(ls -1 /Applications 2>/dev/null | grep -E '^Xcode_26.*\.app$' | head -n1 || true)
            if [ -n "$DETECTED" ]; then
              # strip prefix and suffix to get the version token used in the path template
              # e.g., Xcode_26.0_beta.app -> 26.0_beta
              XCODE_VERSION=$(echo "$DETECTED" | sed -E 's/^Xcode_//; s/\.app$//')
            else
              XCODE_VERSION=$DEFAULT_BETA_XCODE_VERSION
            fi
            ;;
          *)
            XCODE_VERSION=$INPUT_XCODE_VERSION ;;
        esac
        echo "xcode-version=$XCODE_VERSION" >> $GITHUB_OUTPUT

      shell: bash

    - id: get-destination
      run: |
        INPUT_PLATFORM=${{ inputs.platform }}
        INPUT_DESTINATION='${{ inputs.destination }}'
        INPUT_XCODE_VERSION=${{ inputs.xcode_version }}

        case $INPUT_PLATFORM/$INPUT_XCODE_VERSION in
          iOS/latest) 
            DEVICE="iPhone 16 Pro Max"
            OS_VERSION="18.5"
            ;;
          iOS/beta)
            DEVICE="iPhone 16"
            OS_VERSION="26.0"
            ;;
          iOS/minimum)
            DEVICE="iPhone 16 Pro Max"
            OS_VERSION="18.0"
            ;;
          iOS/*)
            DEVICE="iPhone 16 Pro Max"
            OS_VERSION="18.5"
            ;;
          tvOS/latest)
            DEVICE="Apple TV 4K (3rd generation)"
            OS_VERSION="18.5"
            ;;
          tvOS/beta)
            DEVICE="Apple TV 4K (3rd generation)"
            OS_VERSION="26.0"
            ;;
          tvOS/minimum)
            DEVICE="Apple TV 4K (3rd generation)"
            OS_VERSION="18.0"
            ;;
          tvOS/*)
            DEVICE="Apple TV 4K (3rd generation)"
            OS_VERSION="18.5"
            ;;
          watchOS/latest)
            DEVICE="Apple Watch Series 10 (46mm)"
            OS_VERSION="11.5"
            ;;
          watchOS/beta)
            DEVICE="Apple Watch Series 10 (46mm)"
            OS_VERSION="26.0"
            ;;
          watchOS/minimum)
            DEVICE="Apple Watch SE (44mm) (2nd generation)"
            OS_VERSION="11.0"
            ;;
          watchOS/*)
            DEVICE="iPhone 16 Pro Max"
            OS_VERSION="18.5"
            ;;
          visionOS/latest)
            DEVICE="Apple Vision Pro"
            OS_VERSION="2.5"
            ;;
          visionOS/beta)
            DEVICE="Apple Vision Pro"
            OS_VERSION="26.0"
            ;;
          visionOS/minimum)
            DEVICE="Apple Vision Pro"
            OS_VERSION="2.0"
            ;;
          visionOS/*)
            DEVICE="Apple Vision Pro"
            OS_VERSION="2.5"
            ;;
        esac

        DESTINATION_MAPPING="{
          \"iOS\": \"platform=iOS Simulator,name=$DEVICE,OS=$OS_VERSION\",
          \"tvOS\": \"platform=tvOS Simulator,name=$DEVICE,OS=$OS_VERSION\",
          \"watchOS\": \"platform=watchOS Simulator,name=$DEVICE,OS=$OS_VERSION\",
          \"visionOS\": \"platform=visionOS Simulator,name=$DEVICE,OS=$OS_VERSION\",
          \"macOS\": \"platform=macOS,arch=arm64\"
        }"

        if [ -z "$INPUT_DESTINATION" ]; then
          DESTINATION=$(echo $DESTINATION_MAPPING | jq -r ".$INPUT_PLATFORM")
        else
          DESTINATION=$INPUT_DESTINATION
        fi

        if [ -z "$DESTINATION" ]; then
          echo "No available destination to build for"
          exit 1
        fi
        echo "destination=$DESTINATION" >> $GITHUB_OUTPUT
        echo "device=$DEVICE" >> $GITHUB_OUTPUT
      shell: bash

    - id: get-sdk
      run: |
        INPUT_PLATFORM=${{ inputs.platform }}
        SDK_MAPPING='{
          "iOS": "iphonesimulator",
          "tvOS": "appletvsimulator",
          "watchOS": "watchsimulator",
          "visionOS": "xrsimulator",
          "macOS": "macosx"
        }'
        echo "sdk=$(echo $SDK_MAPPING | jq -r .$INPUT_PLATFORM)" >> $GITHUB_OUTPUT
      shell: bash