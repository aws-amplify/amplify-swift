# .circleci/config.yml

version: 2.1

defaults: &defaults
  macos:
    xcode: '13.0.0'
  working_directory: ~/amplify-ios
  environment:
    BUNDLE_PATH: vendor/bundle

references:
  repo_cache_key: &repo_cache_key v2-repo-{{ .Branch }}-{{ .Revision }}

  restore_repo: &restore_repo
    restore_cache:
      keys:
        - *repo_cache_key
        - v2-repo-{{ .Branch }}
        - v2-repo

  pods_cache_key: &pods_cache_key v3-dependency-pods-{{ checksum "~/amplify-ios/Podfile" }}

  pods_backup_cache_key: &pods_backup_cache_key v3-dependency-pods

  restore_pods: &restore_pods
    restore_cache:
      keys:
        - *pods_cache_key
        - *pods_backup_cache_key

  plugin_pods_cache_key: &plugin_pods_cache_key

commands:
  pre_start_simulator:
    description: >-
      pre start simulator, build may fail if simulator is not started
    steps:
      - run:
          name: Pre-start simulator
          command: bash ~/amplify-ios/CircleciScripts/pre_start_simulator.sh

  restore_gems:
    steps:
      - restore_cache:
          keys:
            - v2-gems-{{ checksum "~/amplify-ios/Gemfile.lock" }}
            - v2-gems-

  check_bundle:
    steps:
      - run:
          name: Check bundle
          command: bundle check --path $BUNDLE_PATH || bundle install --path $BUNDLE_PATH

  make_artifacts_directory:
    steps:
      - run:
          name: Make artifacts directory
          command: mkdir -p "artifacts"

  save_plugin_pods:
    parameters:
      prefix:
        type: string
    steps:
      - save_cache:
          key: v1-<< parameters.prefix >>-dependency-pods-{{ checksum "Podfile" }}
          paths:
            - ./Pods

  restore_plugin_pods:
    parameters:
      prefix:
        type: string
    steps:
      - restore_cache:
          keys:
            - v1-<< parameters.prefix >>-dependency-pods-{{ checksum "Podfile" }}
            - v1-<< parameters.prefix >>-dependency-pods

  upload_artifacts:
    steps:
      - store_artifacts:
          path: artifacts

jobs:
  checkout_code:
    <<: *defaults
    steps:
      - *restore_repo
      - checkout
      - save_cache:
          key: *repo_cache_key
          paths:
            - ~/amplify-ios

  install_gems:
    <<: *defaults
    steps:
      - *restore_repo
      - restore_gems
      - run:
          name: Bundle install
          command: bundle check --path $BUNDLE_PATH || bundle install --path $BUNDLE_PATH
          environment:
            BUNDLE_JOBS: 4
            BUNDLE_RETRY: 3
      - save_cache:
          key: v2-gems-{{ checksum "~/amplify-ios/Gemfile.lock" }}
          paths:
            - vendor/bundle

  build_test_amplify:
    <<: *defaults
    steps:
      - *restore_repo
      - pre_start_simulator
      - run: pod install
      - restore_gems
      - check_bundle
      - make_artifacts_directory
      - run:
          name: Build amplify
          command: xcodebuild build-for-testing -workspace Amplify.xcworkspace -scheme Amplify -sdk iphonesimulator -destination "${destination}" | tee "artifacts/build-Amplify.log" | xcpretty
      - run:
          name: Test amplify
          command: xcodebuild test -workspace Amplify.xcworkspace -scheme Amplify -sdk iphonesimulator -destination "${destination}" | tee "artifacts/test-Amplify.log" | xcpretty --simple --color --report junit
      - run:
          name: Upload coverage report to Codecov
          command: bash ~/amplify-ios/build-support/codecov.sh -F 'Amplify' -J '^Amplify$'
      - store_test_results:
          path: build/reports
      - upload_artifacts

  build_amplify_spm:
    <<: *defaults
    working_directory: ~/amplify-ios/.swiftpm/xcode
    steps:
      - *restore_repo
      - pre_start_simulator
      - restore_gems
      - check_bundle
      - make_artifacts_directory
      - run:
          name: Build amplify for SPM
          command: xcodebuild build-for-testing -workspace package.xcworkspace -scheme Amplify-Package -sdk iphonesimulator -destination "${destination}" | tee "artifacts/build-Ampify-for-SPM.log" | xcpretty

  build_test_aws_plugins_core:
    <<: *defaults
    steps:
      - *restore_repo
      - pre_start_simulator
      - run: pod install
      - restore_gems
      - check_bundle
      - make_artifacts_directory
      - run:
          name: Build AWS plugins core
          command: xcodebuild build-for-testing -workspace Amplify.xcworkspace -scheme AWSPluginsCore -sdk iphonesimulator -destination "${destination}" | tee "artifacts/build-AWSPluginsCore.log" | xcpretty
      - run:
          name: Test AWS plugins core
          command: xcodebuild test -workspace Amplify.xcworkspace -scheme AWSPluginsCore -sdk iphonesimulator -destination "${destination}" | tee "artifacts/test-AWSPluginsCore.log" | xcpretty --simple --color --report junit
      - run:
          name: Upload coverage report to Codecov
          command: bash ~/amplify-ios/build-support/codecov.sh -F 'AWSPluginsCore' -J '^AWSPluginsCore$'
      - store_test_results:
          path: build/reports
      - upload_artifacts

  plugin_unit_test:
    <<: *defaults
    parameters:
      path:
        type: string
      workspace:
        type: string
      scheme:
        type: string
    working_directory: ~/amplify-ios/AmplifyPlugins/<< parameters.path >>
    description: << parameters.path >> unit test
    steps:
      - *restore_repo
      - restore_plugin_pods:
          prefix: << parameters.path >>
      - pre_start_simulator
      - run: pod install
      - save_plugin_pods:
          prefix: << parameters.path >>
      - restore_gems
      - check_bundle
      - make_artifacts_directory
      - run:
          name: Build << parameters.path >>
          command: xcodebuild build-for-testing -workspace << parameters.workspace >>.xcworkspace -scheme << parameters.scheme >> -sdk iphonesimulator -destination "${destination}" | tee "artifacts/build-<< parameters.scheme >>.log" | xcpretty
      - run:
          name: Test << parameters.path >>
          command: xcodebuild test -workspace << parameters.workspace >>.xcworkspace -scheme << parameters.scheme >> -sdk iphonesimulator -destination "${destination}" | tee "artifacts/test-<< parameters.scheme >>.log" | xcpretty --simple --color --report junit
      - run:
          name: Upload << parameters.path >> coverage report to Codecov
          command: bash ~/amplify-ios/build-support/codecov.sh -F << parameters.path >>_plugin_unit_test -J '^<< parameters.scheme >>$'
      - store_test_results:
          path: build/reports
      - upload_artifacts

  deploy:
    <<: *defaults
    parameters:
      lane:
        type: string
        default: 'unstable'
    description: deploy pods to trunk
    steps:
      - add_ssh_keys:
          fingerprints:
            - '80:9a:29:87:ac:5f:1a:9b:c5:a4:3d:37:c1:10:87:2f'
      - *restore_repo
      - restore_gems
      - check_bundle
      - run:
          name: Release pods
          command: bundle exec fastlane << parameters.lane >>
          no_output_timeout: 60m

deploy_requires: &deploy_requires
  requires:
    - build_test_amplify
    - build_amplify_spm
    - build_test_aws_plugins_core
    - unit_test_analytics
    - unit_test_api
    - unit_test_auth
    - unit_test_core_ml
    - unit_test_datastore
    - unit_test_geo
    - unit_test_predictions
    - unit_test_storage

workflows:
  build_test_deploy:
    jobs:
      - checkout_code
      - install_gems:
          requires:
            - checkout_code
      - build_test_amplify:
          requires:
            - install_gems
      - build_test_aws_plugins_core:
          requires:
            - install_gems
      - build_amplify_spm:
          requires:
            - install_gems
      - plugin_unit_test:
          name: unit_test_analytics
          path: Analytics
          workspace: AnalyticsCategoryPlugin
          scheme: AWSPinpointAnalyticsPlugin
          requires:
            - install_gems
      - plugin_unit_test:
          name: unit_test_api
          path: API
          workspace: APICategoryPlugin
          scheme: AWSAPICategoryPlugin
          requires:
            - install_gems
      - plugin_unit_test:
          name: unit_test_auth
          path: Auth
          workspace: AWSCognitoAuthPlugin
          scheme: AWSCognitoAuthPlugin
          requires:
            - install_gems
      - plugin_unit_test:
          name: unit_test_datastore
          path: DataStore
          workspace: DataStoreCategoryPlugin
          scheme: AWSDataStoreCategoryPlugin
          requires:
            - install_gems
      - plugin_unit_test:
          name: unit_test_geo
          path: Geo
          workspace: GeoCategoryPlugin
          scheme: AWSLocationGeoPlugin
          requires:
            - install_gems
      - plugin_unit_test:
          name: unit_test_core_ml
          path: Predictions
          workspace: PredictionsCategoryPlugin
          scheme: CoreMLPredictionsPlugin
          requires:
            - install_gems
      - plugin_unit_test:
          name: unit_test_predictions
          path: Predictions
          workspace: PredictionsCategoryPlugin
          scheme: AWSPredictionsPlugin
          requires:
            - install_gems
      - plugin_unit_test:
          name: unit_test_storage
          path: Storage
          workspace: StoragePlugin
          scheme: AWSS3StoragePlugin
          requires:
            - install_gems
      - deploy:
          name: deploy unstable
          <<: *deploy_requires
          filters:
            branches:
              only:
                - main
      - deploy:
          name: deploy stable
          lane: release
          <<: *deploy_requires
          filters:
            branches:
              only:
                - release
