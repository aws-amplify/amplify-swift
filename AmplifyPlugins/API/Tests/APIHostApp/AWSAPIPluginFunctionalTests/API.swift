//  This file was automatically generated and should not be edited.
#if canImport(AWSAPIPlugin)
import Foundation
public protocol GraphQLInputValue {
}
public struct GraphQLVariable {
  let name: String
  
  public init(_ name: String) {
    self.name = name
  }
}
extension GraphQLVariable: GraphQLInputValue {
}
extension JSONEncodable {
  public func evaluate(with variables: [String: JSONEncodable]?) throws -> Any {
    return jsonValue
  }
}
public typealias GraphQLMap = [String: JSONEncodable?]
extension Dictionary where Key == String, Value == JSONEncodable? {
  public var withNilValuesRemoved: Dictionary<String, JSONEncodable> {
    var filtered = Dictionary<String, JSONEncodable>(minimumCapacity: count)
    for (key, value) in self {
      if value != nil {
        filtered[key] = value
      }
    }
    return filtered
  }
}
public protocol GraphQLMapConvertible: JSONEncodable {
  var graphQLMap: GraphQLMap { get }
}
public extension GraphQLMapConvertible {
  var jsonValue: Any {
    return graphQLMap.withNilValuesRemoved.jsonValue
  }
}
public typealias GraphQLID = String
public protocol APISwiftGraphQLOperation: AnyObject {
  
  static var operationString: String { get }
  static var requestString: String { get }
  static var operationIdentifier: String? { get }
  
  var variables: GraphQLMap? { get }
  
  associatedtype Data: GraphQLSelectionSet
}
public extension APISwiftGraphQLOperation {
  static var requestString: String {
    return operationString
  }
  static var operationIdentifier: String? {
    return nil
  }
  var variables: GraphQLMap? {
    return nil
  }
}
public protocol GraphQLQuery: APISwiftGraphQLOperation {}
public protocol GraphQLMutation: APISwiftGraphQLOperation {}
public protocol GraphQLSubscription: APISwiftGraphQLOperation {}
public protocol GraphQLFragment: GraphQLSelectionSet {
  static var possibleTypes: [String] { get }
}
public typealias Snapshot = [String: Any?]
public protocol GraphQLSelectionSet: Decodable {
  static var selections: [GraphQLSelection] { get }
  
  var snapshot: Snapshot { get }
  init(snapshot: Snapshot)
}
extension GraphQLSelectionSet {
    public init(from decoder: Decoder) throws {
        if let jsonObject = try? APISwiftJSONValue(from: decoder) {
            let encoder = JSONEncoder()
            let jsonData = try encoder.encode(jsonObject)
            let decodedDictionary = try JSONSerialization.jsonObject(with: jsonData, options: []) as! [String: Any]
            let optionalDictionary = decodedDictionary.mapValues { $0 as Any? }
            self.init(snapshot: optionalDictionary)
        } else {
            self.init(snapshot: [:])
        }
    }
}
enum APISwiftJSONValue: Codable {
    case array([APISwiftJSONValue])
    case boolean(Bool)
    case number(Double)
    case object([String: APISwiftJSONValue])
    case string(String)
    case null
    
    init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        
        if let value = try? container.decode([String: APISwiftJSONValue].self) {
            self = .object(value)
        } else if let value = try? container.decode([APISwiftJSONValue].self) {
            self = .array(value)
        } else if let value = try? container.decode(Double.self) {
            self = .number(value)
        } else if let value = try? container.decode(Bool.self) {
            self = .boolean(value)
        } else if let value = try? container.decode(String.self) {
            self = .string(value)
        } else {
            self = .null
        }
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        
        switch self {
        case .array(let value):
            try container.encode(value)
        case .boolean(let value):
            try container.encode(value)
        case .number(let value):
            try container.encode(value)
        case .object(let value):
            try container.encode(value)
        case .string(let value):
            try container.encode(value)
        case .null:
            try container.encodeNil()
        }
    }
}
public protocol GraphQLSelection {
}
public struct GraphQLField: GraphQLSelection {
  let name: String
  let alias: String?
  let arguments: [String: GraphQLInputValue]?
  
  var responseKey: String {
    return alias ?? name
  }
  
  let type: GraphQLOutputType
  
  public init(_ name: String, alias: String? = nil, arguments: [String: GraphQLInputValue]? = nil, type: GraphQLOutputType) {
    self.name = name
    self.alias = alias
    
    self.arguments = arguments
    
    self.type = type
  }
}
public indirect enum GraphQLOutputType {
  case scalar(JSONDecodable.Type)
  case object([GraphQLSelection])
  case nonNull(GraphQLOutputType)
  case list(GraphQLOutputType)
  
  var namedType: GraphQLOutputType {
    switch self {
    case .nonNull(let innerType), .list(let innerType):
      return innerType.namedType
    case .scalar, .object:
      return self
    }
  }
}
public struct GraphQLBooleanCondition: GraphQLSelection {
  let variableName: String
  let inverted: Bool
  let selections: [GraphQLSelection]
  
  public init(variableName: String, inverted: Bool, selections: [GraphQLSelection]) {
    self.variableName = variableName
    self.inverted = inverted;
    self.selections = selections;
  }
}
public struct GraphQLTypeCondition: GraphQLSelection {
  let possibleTypes: [String]
  let selections: [GraphQLSelection]
  
  public init(possibleTypes: [String], selections: [GraphQLSelection]) {
    self.possibleTypes = possibleTypes
    self.selections = selections;
  }
}
public struct GraphQLFragmentSpread: GraphQLSelection {
  let fragment: GraphQLFragment.Type
  
  public init(_ fragment: GraphQLFragment.Type) {
    self.fragment = fragment
  }
}
public struct GraphQLTypeCase: GraphQLSelection {
  let variants: [String: [GraphQLSelection]]
  let `default`: [GraphQLSelection]
  
  public init(variants: [String: [GraphQLSelection]], default: [GraphQLSelection]) {
    self.variants = variants
    self.default = `default`;
  }
}
public typealias JSONObject = [String: Any]
public protocol JSONDecodable {
  init(jsonValue value: Any) throws
}
public protocol JSONEncodable: GraphQLInputValue {
  var jsonValue: Any { get }
}
public enum JSONDecodingError: Error, LocalizedError {
  case missingValue
  case nullValue
  case wrongType
  case couldNotConvert(value: Any, to: Any.Type)
  
  public var errorDescription: String? {
    switch self {
    case .missingValue:
      return "Missing value"
    case .nullValue:
      return "Unexpected null value"
    case .wrongType:
      return "Wrong type"
    case .couldNotConvert(let value, let expectedType):
      return "Could not convert \"\(value)\" to \(expectedType)"
    }
  }
}
extension String: JSONDecodable, JSONEncodable {
  public init(jsonValue value: Any) throws {
    guard let string = value as? String else {
      throw JSONDecodingError.couldNotConvert(value: value, to: String.self)
    }
    self = string
  }
  public var jsonValue: Any {
    return self
  }
}
extension Int: JSONDecodable, JSONEncodable {
  public init(jsonValue value: Any) throws {
    guard let number = value as? NSNumber else {
      throw JSONDecodingError.couldNotConvert(value: value, to: Int.self)
    }
    self = number.intValue
  }
  public var jsonValue: Any {
    return self
  }
}
extension Float: JSONDecodable, JSONEncodable {
  public init(jsonValue value: Any) throws {
    guard let number = value as? NSNumber else {
      throw JSONDecodingError.couldNotConvert(value: value, to: Float.self)
    }
    self = number.floatValue
  }
  public var jsonValue: Any {
    return self
  }
}
extension Double: JSONDecodable, JSONEncodable {
  public init(jsonValue value: Any) throws {
    guard let number = value as? NSNumber else {
      throw JSONDecodingError.couldNotConvert(value: value, to: Double.self)
    }
    self = number.doubleValue
  }
  public var jsonValue: Any {
    return self
  }
}
extension Bool: JSONDecodable, JSONEncodable {
  public init(jsonValue value: Any) throws {
    guard let bool = value as? Bool else {
        throw JSONDecodingError.couldNotConvert(value: value, to: Bool.self)
    }
    self = bool
  }
  public var jsonValue: Any {
    return self
  }
}
extension RawRepresentable where RawValue: JSONDecodable {
  public init(jsonValue value: Any) throws {
    let rawValue = try RawValue(jsonValue: value)
    if let tempSelf = Self(rawValue: rawValue) {
      self = tempSelf
    } else {
      throw JSONDecodingError.couldNotConvert(value: value, to: Self.self)
    }
  }
}
extension RawRepresentable where RawValue: JSONEncodable {
  public var jsonValue: Any {
    return rawValue.jsonValue
  }
}
extension Optional where Wrapped: JSONDecodable {
  public init(jsonValue value: Any) throws {
    if value is NSNull {
      self = .none
    } else {
      self = .some(try Wrapped(jsonValue: value))
    }
  }
}
extension Optional: JSONEncodable {
  public var jsonValue: Any {
    switch self {
    case .none:
      return NSNull()
    case .some(let wrapped as JSONEncodable):
      return wrapped.jsonValue
    default:
      fatalError("Optional is only JSONEncodable if Wrapped is")
    }
  }
}
extension Dictionary: JSONEncodable {
  public var jsonValue: Any {
    return jsonObject
  }
  
  public var jsonObject: JSONObject {
    var jsonObject = JSONObject(minimumCapacity: count)
    for (key, value) in self {
      if case let (key as String, value as JSONEncodable) = (key, value) {
        jsonObject[key] = value.jsonValue
      } else {
        fatalError("Dictionary is only JSONEncodable if Value is (and if Key is String)")
      }
    }
    return jsonObject
  }
}
extension Array: JSONEncodable {
  public var jsonValue: Any {
    return map() { element -> (Any) in
      if case let element as JSONEncodable = element {
        return element.jsonValue
      } else {
        fatalError("Array is only JSONEncodable if Element is")
      }
    }
  }
}
extension URL: JSONDecodable, JSONEncodable {
  public init(jsonValue value: Any) throws {
    guard let string = value as? String else {
      throw JSONDecodingError.couldNotConvert(value: value, to: URL.self)
    }
    self.init(string: string)!
  }
  public var jsonValue: Any {
    return self.absoluteString
  }
}
extension Dictionary {
  static func += (lhs: inout Dictionary, rhs: Dictionary) {
    lhs.merge(rhs) { (_, new) in new }
  }
}
#elseif canImport(AWSAppSync)
import AWSAppSync
#endif

public struct APISwift {
    
    
    public struct CreatePostInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, title: String, content: String, createdAt: String? = nil, updatedAt: String? = nil, draft: Bool? = nil, rating: Double? = nil, status: PostStatus? = nil) {
            graphQLMap = ["id": id, "title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var title: String {
            get {
                return graphQLMap["title"] as! String
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
        
        public var content: String {
            get {
                return graphQLMap["content"] as! String
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
        
        public var createdAt: String? {
            get {
                return graphQLMap["createdAt"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "createdAt")
            }
        }
        
        public var updatedAt: String? {
            get {
                return graphQLMap["updatedAt"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "updatedAt")
            }
        }
        
        public var draft: Bool? {
            get {
                return graphQLMap["draft"] as! Bool?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "draft")
            }
        }
        
        public var rating: Double? {
            get {
                return graphQLMap["rating"] as! Double?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "rating")
            }
        }
        
        public var status: PostStatus? {
            get {
                return graphQLMap["status"] as! PostStatus?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "status")
            }
        }
    }
    
    public enum PostStatus: RawRepresentable, Equatable, JSONDecodable, JSONEncodable {
        public typealias RawValue = String
        case `private`
        case draft
        case published
        /// Auto generated constant for unknown enum values
        case unknown(RawValue)
        
        public init?(rawValue: RawValue) {
            switch rawValue {
            case "PRIVATE": self = .private
            case "DRAFT": self = .draft
            case "PUBLISHED": self = .published
            default: self = .unknown(rawValue)
            }
        }
        
        public var rawValue: RawValue {
            switch self {
            case .private: return "PRIVATE"
            case .draft: return "DRAFT"
            case .published: return "PUBLISHED"
            case .unknown(let value): return value
            }
        }
        
        public static func == (lhs: PostStatus, rhs: PostStatus) -> Bool {
            switch (lhs, rhs) {
            case (.private, .private): return true
            case (.draft, .draft): return true
            case (.published, .published): return true
            case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue
            default: return false
            }
        }
    }
    
    public struct ModelPostConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(title: ModelStringInput? = nil, content: ModelStringInput? = nil, createdAt: ModelStringInput? = nil, updatedAt: ModelStringInput? = nil, draft: ModelBooleanInput? = nil, rating: ModelFloatInput? = nil, status: ModelPostStatusInput? = nil, and: [ModelPostConditionInput?]? = nil, or: [ModelPostConditionInput?]? = nil, not: ModelPostConditionInput? = nil) {
            graphQLMap = ["title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status, "and": and, "or": or, "not": not]
        }
        
        public var title: ModelStringInput? {
            get {
                return graphQLMap["title"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
        
        public var content: ModelStringInput? {
            get {
                return graphQLMap["content"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
        
        public var createdAt: ModelStringInput? {
            get {
                return graphQLMap["createdAt"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "createdAt")
            }
        }
        
        public var updatedAt: ModelStringInput? {
            get {
                return graphQLMap["updatedAt"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "updatedAt")
            }
        }
        
        public var draft: ModelBooleanInput? {
            get {
                return graphQLMap["draft"] as! ModelBooleanInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "draft")
            }
        }
        
        public var rating: ModelFloatInput? {
            get {
                return graphQLMap["rating"] as! ModelFloatInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "rating")
            }
        }
        
        public var status: ModelPostStatusInput? {
            get {
                return graphQLMap["status"] as! ModelPostStatusInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "status")
            }
        }
        
        public var and: [ModelPostConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelPostConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelPostConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelPostConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelPostConditionInput? {
            get {
                return graphQLMap["not"] as! ModelPostConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelStringInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(ne: String? = nil, eq: String? = nil, le: String? = nil, lt: String? = nil, ge: String? = nil, gt: String? = nil, contains: String? = nil, notContains: String? = nil, between: [String?]? = nil, beginsWith: String? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil, size: ModelSizeInput? = nil) {
            graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "contains": contains, "notContains": notContains, "between": between, "beginsWith": beginsWith, "attributeExists": attributeExists, "attributeType": attributeType, "size": size]
        }
        
        public var ne: String? {
            get {
                return graphQLMap["ne"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "ne")
            }
        }
        
        public var eq: String? {
            get {
                return graphQLMap["eq"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "eq")
            }
        }
        
        public var le: String? {
            get {
                return graphQLMap["le"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "le")
            }
        }
        
        public var lt: String? {
            get {
                return graphQLMap["lt"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "lt")
            }
        }
        
        public var ge: String? {
            get {
                return graphQLMap["ge"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "ge")
            }
        }
        
        public var gt: String? {
            get {
                return graphQLMap["gt"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "gt")
            }
        }
        
        public var contains: String? {
            get {
                return graphQLMap["contains"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "contains")
            }
        }
        
        public var notContains: String? {
            get {
                return graphQLMap["notContains"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "notContains")
            }
        }
        
        public var between: [String?]? {
            get {
                return graphQLMap["between"] as! [String?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "between")
            }
        }
        
        public var beginsWith: String? {
            get {
                return graphQLMap["beginsWith"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "beginsWith")
            }
        }
        
        public var attributeExists: Bool? {
            get {
                return graphQLMap["attributeExists"] as! Bool?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "attributeExists")
            }
        }
        
        public var attributeType: ModelAttributeTypes? {
            get {
                return graphQLMap["attributeType"] as! ModelAttributeTypes?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "attributeType")
            }
        }
        
        public var size: ModelSizeInput? {
            get {
                return graphQLMap["size"] as! ModelSizeInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "size")
            }
        }
    }
    
    public enum ModelAttributeTypes: RawRepresentable, Equatable, JSONDecodable, JSONEncodable {
        public typealias RawValue = String
        case binary
        case binarySet
        case bool
        case list
        case map
        case number
        case numberSet
        case string
        case stringSet
        case null
        /// Auto generated constant for unknown enum values
        case unknown(RawValue)
        
        public init?(rawValue: RawValue) {
            switch rawValue {
            case "binary": self = .binary
            case "binarySet": self = .binarySet
            case "bool": self = .bool
            case "list": self = .list
            case "map": self = .map
            case "number": self = .number
            case "numberSet": self = .numberSet
            case "string": self = .string
            case "stringSet": self = .stringSet
            case "_null": self = .null
            default: self = .unknown(rawValue)
            }
        }
        
        public var rawValue: RawValue {
            switch self {
            case .binary: return "binary"
            case .binarySet: return "binarySet"
            case .bool: return "bool"
            case .list: return "list"
            case .map: return "map"
            case .number: return "number"
            case .numberSet: return "numberSet"
            case .string: return "string"
            case .stringSet: return "stringSet"
            case .null: return "_null"
            case .unknown(let value): return value
            }
        }
        
        public static func == (lhs: ModelAttributeTypes, rhs: ModelAttributeTypes) -> Bool {
            switch (lhs, rhs) {
            case (.binary, .binary): return true
            case (.binarySet, .binarySet): return true
            case (.bool, .bool): return true
            case (.list, .list): return true
            case (.map, .map): return true
            case (.number, .number): return true
            case (.numberSet, .numberSet): return true
            case (.string, .string): return true
            case (.stringSet, .stringSet): return true
            case (.null, .null): return true
            case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue
            default: return false
            }
        }
    }
    
    public struct ModelSizeInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(ne: Int? = nil, eq: Int? = nil, le: Int? = nil, lt: Int? = nil, ge: Int? = nil, gt: Int? = nil, between: [Int?]? = nil) {
            graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "between": between]
        }
        
        public var ne: Int? {
            get {
                return graphQLMap["ne"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "ne")
            }
        }
        
        public var eq: Int? {
            get {
                return graphQLMap["eq"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "eq")
            }
        }
        
        public var le: Int? {
            get {
                return graphQLMap["le"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "le")
            }
        }
        
        public var lt: Int? {
            get {
                return graphQLMap["lt"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "lt")
            }
        }
        
        public var ge: Int? {
            get {
                return graphQLMap["ge"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "ge")
            }
        }
        
        public var gt: Int? {
            get {
                return graphQLMap["gt"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "gt")
            }
        }
        
        public var between: [Int?]? {
            get {
                return graphQLMap["between"] as! [Int?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "between")
            }
        }
    }
    
    public struct ModelBooleanInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(ne: Bool? = nil, eq: Bool? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil) {
            graphQLMap = ["ne": ne, "eq": eq, "attributeExists": attributeExists, "attributeType": attributeType]
        }
        
        public var ne: Bool? {
            get {
                return graphQLMap["ne"] as! Bool?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "ne")
            }
        }
        
        public var eq: Bool? {
            get {
                return graphQLMap["eq"] as! Bool?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "eq")
            }
        }
        
        public var attributeExists: Bool? {
            get {
                return graphQLMap["attributeExists"] as! Bool?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "attributeExists")
            }
        }
        
        public var attributeType: ModelAttributeTypes? {
            get {
                return graphQLMap["attributeType"] as! ModelAttributeTypes?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "attributeType")
            }
        }
    }
    
    public struct ModelFloatInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(ne: Double? = nil, eq: Double? = nil, le: Double? = nil, lt: Double? = nil, ge: Double? = nil, gt: Double? = nil, between: [Double?]? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil) {
            graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "between": between, "attributeExists": attributeExists, "attributeType": attributeType]
        }
        
        public var ne: Double? {
            get {
                return graphQLMap["ne"] as! Double?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "ne")
            }
        }
        
        public var eq: Double? {
            get {
                return graphQLMap["eq"] as! Double?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "eq")
            }
        }
        
        public var le: Double? {
            get {
                return graphQLMap["le"] as! Double?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "le")
            }
        }
        
        public var lt: Double? {
            get {
                return graphQLMap["lt"] as! Double?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "lt")
            }
        }
        
        public var ge: Double? {
            get {
                return graphQLMap["ge"] as! Double?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "ge")
            }
        }
        
        public var gt: Double? {
            get {
                return graphQLMap["gt"] as! Double?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "gt")
            }
        }
        
        public var between: [Double?]? {
            get {
                return graphQLMap["between"] as! [Double?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "between")
            }
        }
        
        public var attributeExists: Bool? {
            get {
                return graphQLMap["attributeExists"] as! Bool?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "attributeExists")
            }
        }
        
        public var attributeType: ModelAttributeTypes? {
            get {
                return graphQLMap["attributeType"] as! ModelAttributeTypes?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "attributeType")
            }
        }
    }
    
    public struct ModelPostStatusInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(eq: PostStatus? = nil, ne: PostStatus? = nil) {
            graphQLMap = ["eq": eq, "ne": ne]
        }
        
        public var eq: PostStatus? {
            get {
                return graphQLMap["eq"] as! PostStatus?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "eq")
            }
        }
        
        public var ne: PostStatus? {
            get {
                return graphQLMap["ne"] as! PostStatus?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "ne")
            }
        }
    }
    
    public struct UpdatePostInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, title: String? = nil, content: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, draft: Bool? = nil, rating: Double? = nil, status: PostStatus? = nil) {
            graphQLMap = ["id": id, "title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var title: String? {
            get {
                return graphQLMap["title"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
        
        public var content: String? {
            get {
                return graphQLMap["content"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
        
        public var createdAt: String? {
            get {
                return graphQLMap["createdAt"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "createdAt")
            }
        }
        
        public var updatedAt: String? {
            get {
                return graphQLMap["updatedAt"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "updatedAt")
            }
        }
        
        public var draft: Bool? {
            get {
                return graphQLMap["draft"] as! Bool?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "draft")
            }
        }
        
        public var rating: Double? {
            get {
                return graphQLMap["rating"] as! Double?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "rating")
            }
        }
        
        public var status: PostStatus? {
            get {
                return graphQLMap["status"] as! PostStatus?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "status")
            }
        }
    }
    
    public struct DeletePostInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreateCommentInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, content: String, createdAt: String? = nil, commentPostId: GraphQLID? = nil) {
            graphQLMap = ["id": id, "content": content, "createdAt": createdAt, "commentPostId": commentPostId]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var content: String {
            get {
                return graphQLMap["content"] as! String
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
        
        public var createdAt: String? {
            get {
                return graphQLMap["createdAt"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "createdAt")
            }
        }
        
        public var commentPostId: GraphQLID? {
            get {
                return graphQLMap["commentPostId"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "commentPostId")
            }
        }
    }
    
    public struct ModelCommentConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(content: ModelStringInput? = nil, createdAt: ModelStringInput? = nil, and: [ModelCommentConditionInput?]? = nil, or: [ModelCommentConditionInput?]? = nil, not: ModelCommentConditionInput? = nil) {
            graphQLMap = ["content": content, "createdAt": createdAt, "and": and, "or": or, "not": not]
        }
        
        public var content: ModelStringInput? {
            get {
                return graphQLMap["content"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
        
        public var createdAt: ModelStringInput? {
            get {
                return graphQLMap["createdAt"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "createdAt")
            }
        }
        
        public var and: [ModelCommentConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelCommentConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelCommentConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelCommentConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelCommentConditionInput? {
            get {
                return graphQLMap["not"] as! ModelCommentConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct UpdateCommentInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, content: String? = nil, createdAt: String? = nil, commentPostId: GraphQLID? = nil) {
            graphQLMap = ["id": id, "content": content, "createdAt": createdAt, "commentPostId": commentPostId]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var content: String? {
            get {
                return graphQLMap["content"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
        
        public var createdAt: String? {
            get {
                return graphQLMap["createdAt"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "createdAt")
            }
        }
        
        public var commentPostId: GraphQLID? {
            get {
                return graphQLMap["commentPostId"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "commentPostId")
            }
        }
    }
    
    public struct DeleteCommentInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreateProject1Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, name: String? = nil, project1TeamId: GraphQLID? = nil) {
            graphQLMap = ["id": id, "name": name, "project1TeamId": project1TeamId]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var name: String? {
            get {
                return graphQLMap["name"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
        
        public var project1TeamId: GraphQLID? {
            get {
                return graphQLMap["project1TeamId"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "project1TeamId")
            }
        }
    }
    
    public struct ModelProject1ConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(name: ModelStringInput? = nil, and: [ModelProject1ConditionInput?]? = nil, or: [ModelProject1ConditionInput?]? = nil, not: ModelProject1ConditionInput? = nil) {
            graphQLMap = ["name": name, "and": and, "or": or, "not": not]
        }
        
        public var name: ModelStringInput? {
            get {
                return graphQLMap["name"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
        
        public var and: [ModelProject1ConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelProject1ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelProject1ConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelProject1ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelProject1ConditionInput? {
            get {
                return graphQLMap["not"] as! ModelProject1ConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct UpdateProject1Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, name: String? = nil, project1TeamId: GraphQLID? = nil) {
            graphQLMap = ["id": id, "name": name, "project1TeamId": project1TeamId]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var name: String? {
            get {
                return graphQLMap["name"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
        
        public var project1TeamId: GraphQLID? {
            get {
                return graphQLMap["project1TeamId"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "project1TeamId")
            }
        }
    }
    
    public struct DeleteProject1Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreateTeam1Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, name: String) {
            graphQLMap = ["id": id, "name": name]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var name: String {
            get {
                return graphQLMap["name"] as! String
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
    }
    
    public struct ModelTeam1ConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(name: ModelStringInput? = nil, and: [ModelTeam1ConditionInput?]? = nil, or: [ModelTeam1ConditionInput?]? = nil, not: ModelTeam1ConditionInput? = nil) {
            graphQLMap = ["name": name, "and": and, "or": or, "not": not]
        }
        
        public var name: ModelStringInput? {
            get {
                return graphQLMap["name"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
        
        public var and: [ModelTeam1ConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelTeam1ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelTeam1ConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelTeam1ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelTeam1ConditionInput? {
            get {
                return graphQLMap["not"] as! ModelTeam1ConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct UpdateTeam1Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, name: String? = nil) {
            graphQLMap = ["id": id, "name": name]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var name: String? {
            get {
                return graphQLMap["name"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
    }
    
    public struct DeleteTeam1Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreateProject2Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, name: String? = nil, teamId: GraphQLID) {
            graphQLMap = ["id": id, "name": name, "teamID": teamId]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var name: String? {
            get {
                return graphQLMap["name"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
        
        public var teamId: GraphQLID {
            get {
                return graphQLMap["teamID"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "teamID")
            }
        }
    }
    
    public struct ModelProject2ConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(name: ModelStringInput? = nil, teamId: ModelIDInput? = nil, and: [ModelProject2ConditionInput?]? = nil, or: [ModelProject2ConditionInput?]? = nil, not: ModelProject2ConditionInput? = nil) {
            graphQLMap = ["name": name, "teamID": teamId, "and": and, "or": or, "not": not]
        }
        
        public var name: ModelStringInput? {
            get {
                return graphQLMap["name"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
        
        public var teamId: ModelIDInput? {
            get {
                return graphQLMap["teamID"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "teamID")
            }
        }
        
        public var and: [ModelProject2ConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelProject2ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelProject2ConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelProject2ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelProject2ConditionInput? {
            get {
                return graphQLMap["not"] as! ModelProject2ConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelIDInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(ne: GraphQLID? = nil, eq: GraphQLID? = nil, le: GraphQLID? = nil, lt: GraphQLID? = nil, ge: GraphQLID? = nil, gt: GraphQLID? = nil, contains: GraphQLID? = nil, notContains: GraphQLID? = nil, between: [GraphQLID?]? = nil, beginsWith: GraphQLID? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil, size: ModelSizeInput? = nil) {
            graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "contains": contains, "notContains": notContains, "between": between, "beginsWith": beginsWith, "attributeExists": attributeExists, "attributeType": attributeType, "size": size]
        }
        
        public var ne: GraphQLID? {
            get {
                return graphQLMap["ne"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "ne")
            }
        }
        
        public var eq: GraphQLID? {
            get {
                return graphQLMap["eq"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "eq")
            }
        }
        
        public var le: GraphQLID? {
            get {
                return graphQLMap["le"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "le")
            }
        }
        
        public var lt: GraphQLID? {
            get {
                return graphQLMap["lt"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "lt")
            }
        }
        
        public var ge: GraphQLID? {
            get {
                return graphQLMap["ge"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "ge")
            }
        }
        
        public var gt: GraphQLID? {
            get {
                return graphQLMap["gt"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "gt")
            }
        }
        
        public var contains: GraphQLID? {
            get {
                return graphQLMap["contains"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "contains")
            }
        }
        
        public var notContains: GraphQLID? {
            get {
                return graphQLMap["notContains"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "notContains")
            }
        }
        
        public var between: [GraphQLID?]? {
            get {
                return graphQLMap["between"] as! [GraphQLID?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "between")
            }
        }
        
        public var beginsWith: GraphQLID? {
            get {
                return graphQLMap["beginsWith"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "beginsWith")
            }
        }
        
        public var attributeExists: Bool? {
            get {
                return graphQLMap["attributeExists"] as! Bool?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "attributeExists")
            }
        }
        
        public var attributeType: ModelAttributeTypes? {
            get {
                return graphQLMap["attributeType"] as! ModelAttributeTypes?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "attributeType")
            }
        }
        
        public var size: ModelSizeInput? {
            get {
                return graphQLMap["size"] as! ModelSizeInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "size")
            }
        }
    }
    
    public struct UpdateProject2Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, name: String? = nil, teamId: GraphQLID? = nil) {
            graphQLMap = ["id": id, "name": name, "teamID": teamId]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var name: String? {
            get {
                return graphQLMap["name"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
        
        public var teamId: GraphQLID? {
            get {
                return graphQLMap["teamID"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "teamID")
            }
        }
    }
    
    public struct DeleteProject2Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreateTeam2Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, name: String) {
            graphQLMap = ["id": id, "name": name]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var name: String {
            get {
                return graphQLMap["name"] as! String
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
    }
    
    public struct ModelTeam2ConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(name: ModelStringInput? = nil, and: [ModelTeam2ConditionInput?]? = nil, or: [ModelTeam2ConditionInput?]? = nil, not: ModelTeam2ConditionInput? = nil) {
            graphQLMap = ["name": name, "and": and, "or": or, "not": not]
        }
        
        public var name: ModelStringInput? {
            get {
                return graphQLMap["name"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
        
        public var and: [ModelTeam2ConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelTeam2ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelTeam2ConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelTeam2ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelTeam2ConditionInput? {
            get {
                return graphQLMap["not"] as! ModelTeam2ConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct UpdateTeam2Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, name: String? = nil) {
            graphQLMap = ["id": id, "name": name]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var name: String? {
            get {
                return graphQLMap["name"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
    }
    
    public struct DeleteTeam2Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreatePost3Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, title: String) {
            graphQLMap = ["id": id, "title": title]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var title: String {
            get {
                return graphQLMap["title"] as! String
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
    }
    
    public struct ModelPost3ConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(title: ModelStringInput? = nil, and: [ModelPost3ConditionInput?]? = nil, or: [ModelPost3ConditionInput?]? = nil, not: ModelPost3ConditionInput? = nil) {
            graphQLMap = ["title": title, "and": and, "or": or, "not": not]
        }
        
        public var title: ModelStringInput? {
            get {
                return graphQLMap["title"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
        
        public var and: [ModelPost3ConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelPost3ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelPost3ConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelPost3ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelPost3ConditionInput? {
            get {
                return graphQLMap["not"] as! ModelPost3ConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct UpdatePost3Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, title: String? = nil) {
            graphQLMap = ["id": id, "title": title]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var title: String? {
            get {
                return graphQLMap["title"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
    }
    
    public struct DeletePost3Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreateComment3Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, postId: GraphQLID, content: String) {
            graphQLMap = ["id": id, "postID": postId, "content": content]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var postId: GraphQLID {
            get {
                return graphQLMap["postID"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "postID")
            }
        }
        
        public var content: String {
            get {
                return graphQLMap["content"] as! String
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
    }
    
    public struct ModelComment3ConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(postId: ModelIDInput? = nil, content: ModelStringInput? = nil, and: [ModelComment3ConditionInput?]? = nil, or: [ModelComment3ConditionInput?]? = nil, not: ModelComment3ConditionInput? = nil) {
            graphQLMap = ["postID": postId, "content": content, "and": and, "or": or, "not": not]
        }
        
        public var postId: ModelIDInput? {
            get {
                return graphQLMap["postID"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "postID")
            }
        }
        
        public var content: ModelStringInput? {
            get {
                return graphQLMap["content"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
        
        public var and: [ModelComment3ConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelComment3ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelComment3ConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelComment3ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelComment3ConditionInput? {
            get {
                return graphQLMap["not"] as! ModelComment3ConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct UpdateComment3Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, postId: GraphQLID? = nil, content: String? = nil) {
            graphQLMap = ["id": id, "postID": postId, "content": content]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var postId: GraphQLID? {
            get {
                return graphQLMap["postID"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "postID")
            }
        }
        
        public var content: String? {
            get {
                return graphQLMap["content"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
    }
    
    public struct DeleteComment3Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreatePost4Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, title: String) {
            graphQLMap = ["id": id, "title": title]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var title: String {
            get {
                return graphQLMap["title"] as! String
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
    }
    
    public struct ModelPost4ConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(title: ModelStringInput? = nil, and: [ModelPost4ConditionInput?]? = nil, or: [ModelPost4ConditionInput?]? = nil, not: ModelPost4ConditionInput? = nil) {
            graphQLMap = ["title": title, "and": and, "or": or, "not": not]
        }
        
        public var title: ModelStringInput? {
            get {
                return graphQLMap["title"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
        
        public var and: [ModelPost4ConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelPost4ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelPost4ConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelPost4ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelPost4ConditionInput? {
            get {
                return graphQLMap["not"] as! ModelPost4ConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct UpdatePost4Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, title: String? = nil) {
            graphQLMap = ["id": id, "title": title]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var title: String? {
            get {
                return graphQLMap["title"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
    }
    
    public struct DeletePost4Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreateComment4Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, postId: GraphQLID, content: String) {
            graphQLMap = ["id": id, "postID": postId, "content": content]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var postId: GraphQLID {
            get {
                return graphQLMap["postID"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "postID")
            }
        }
        
        public var content: String {
            get {
                return graphQLMap["content"] as! String
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
    }
    
    public struct ModelComment4ConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(postId: ModelIDInput? = nil, content: ModelStringInput? = nil, and: [ModelComment4ConditionInput?]? = nil, or: [ModelComment4ConditionInput?]? = nil, not: ModelComment4ConditionInput? = nil) {
            graphQLMap = ["postID": postId, "content": content, "and": and, "or": or, "not": not]
        }
        
        public var postId: ModelIDInput? {
            get {
                return graphQLMap["postID"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "postID")
            }
        }
        
        public var content: ModelStringInput? {
            get {
                return graphQLMap["content"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
        
        public var and: [ModelComment4ConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelComment4ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelComment4ConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelComment4ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelComment4ConditionInput? {
            get {
                return graphQLMap["not"] as! ModelComment4ConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct UpdateComment4Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, postId: GraphQLID? = nil, content: String? = nil) {
            graphQLMap = ["id": id, "postID": postId, "content": content]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var postId: GraphQLID? {
            get {
                return graphQLMap["postID"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "postID")
            }
        }
        
        public var content: String? {
            get {
                return graphQLMap["content"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
    }
    
    public struct DeleteComment4Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreatePost5Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, title: String) {
            graphQLMap = ["id": id, "title": title]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var title: String {
            get {
                return graphQLMap["title"] as! String
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
    }
    
    public struct ModelPost5ConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(title: ModelStringInput? = nil, and: [ModelPost5ConditionInput?]? = nil, or: [ModelPost5ConditionInput?]? = nil, not: ModelPost5ConditionInput? = nil) {
            graphQLMap = ["title": title, "and": and, "or": or, "not": not]
        }
        
        public var title: ModelStringInput? {
            get {
                return graphQLMap["title"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
        
        public var and: [ModelPost5ConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelPost5ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelPost5ConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelPost5ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelPost5ConditionInput? {
            get {
                return graphQLMap["not"] as! ModelPost5ConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct UpdatePost5Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, title: String? = nil) {
            graphQLMap = ["id": id, "title": title]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var title: String? {
            get {
                return graphQLMap["title"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
    }
    
    public struct DeletePost5Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreatePostEditor5Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, postId: GraphQLID, editorId: GraphQLID) {
            graphQLMap = ["id": id, "postID": postId, "editorID": editorId]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var postId: GraphQLID {
            get {
                return graphQLMap["postID"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "postID")
            }
        }
        
        public var editorId: GraphQLID {
            get {
                return graphQLMap["editorID"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "editorID")
            }
        }
    }
    
    public struct ModelPostEditor5ConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(postId: ModelIDInput? = nil, editorId: ModelIDInput? = nil, and: [ModelPostEditor5ConditionInput?]? = nil, or: [ModelPostEditor5ConditionInput?]? = nil, not: ModelPostEditor5ConditionInput? = nil) {
            graphQLMap = ["postID": postId, "editorID": editorId, "and": and, "or": or, "not": not]
        }
        
        public var postId: ModelIDInput? {
            get {
                return graphQLMap["postID"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "postID")
            }
        }
        
        public var editorId: ModelIDInput? {
            get {
                return graphQLMap["editorID"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "editorID")
            }
        }
        
        public var and: [ModelPostEditor5ConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelPostEditor5ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelPostEditor5ConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelPostEditor5ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelPostEditor5ConditionInput? {
            get {
                return graphQLMap["not"] as! ModelPostEditor5ConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct UpdatePostEditor5Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, postId: GraphQLID? = nil, editorId: GraphQLID? = nil) {
            graphQLMap = ["id": id, "postID": postId, "editorID": editorId]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var postId: GraphQLID? {
            get {
                return graphQLMap["postID"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "postID")
            }
        }
        
        public var editorId: GraphQLID? {
            get {
                return graphQLMap["editorID"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "editorID")
            }
        }
    }
    
    public struct DeletePostEditor5Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreateUser5Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, username: String) {
            graphQLMap = ["id": id, "username": username]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var username: String {
            get {
                return graphQLMap["username"] as! String
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "username")
            }
        }
    }
    
    public struct ModelUser5ConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(username: ModelStringInput? = nil, and: [ModelUser5ConditionInput?]? = nil, or: [ModelUser5ConditionInput?]? = nil, not: ModelUser5ConditionInput? = nil) {
            graphQLMap = ["username": username, "and": and, "or": or, "not": not]
        }
        
        public var username: ModelStringInput? {
            get {
                return graphQLMap["username"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "username")
            }
        }
        
        public var and: [ModelUser5ConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelUser5ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelUser5ConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelUser5ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelUser5ConditionInput? {
            get {
                return graphQLMap["not"] as! ModelUser5ConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct UpdateUser5Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, username: String? = nil) {
            graphQLMap = ["id": id, "username": username]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var username: String? {
            get {
                return graphQLMap["username"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "username")
            }
        }
    }
    
    public struct DeleteUser5Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreateBlog6Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, name: String) {
            graphQLMap = ["id": id, "name": name]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var name: String {
            get {
                return graphQLMap["name"] as! String
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
    }
    
    public struct ModelBlog6ConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(name: ModelStringInput? = nil, and: [ModelBlog6ConditionInput?]? = nil, or: [ModelBlog6ConditionInput?]? = nil, not: ModelBlog6ConditionInput? = nil) {
            graphQLMap = ["name": name, "and": and, "or": or, "not": not]
        }
        
        public var name: ModelStringInput? {
            get {
                return graphQLMap["name"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
        
        public var and: [ModelBlog6ConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelBlog6ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelBlog6ConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelBlog6ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelBlog6ConditionInput? {
            get {
                return graphQLMap["not"] as! ModelBlog6ConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct UpdateBlog6Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, name: String? = nil) {
            graphQLMap = ["id": id, "name": name]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var name: String? {
            get {
                return graphQLMap["name"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
    }
    
    public struct DeleteBlog6Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreatePost6Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, title: String, blogId: GraphQLID) {
            graphQLMap = ["id": id, "title": title, "blogID": blogId]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var title: String {
            get {
                return graphQLMap["title"] as! String
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
        
        public var blogId: GraphQLID {
            get {
                return graphQLMap["blogID"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "blogID")
            }
        }
    }
    
    public struct ModelPost6ConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(title: ModelStringInput? = nil, blogId: ModelIDInput? = nil, and: [ModelPost6ConditionInput?]? = nil, or: [ModelPost6ConditionInput?]? = nil, not: ModelPost6ConditionInput? = nil) {
            graphQLMap = ["title": title, "blogID": blogId, "and": and, "or": or, "not": not]
        }
        
        public var title: ModelStringInput? {
            get {
                return graphQLMap["title"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
        
        public var blogId: ModelIDInput? {
            get {
                return graphQLMap["blogID"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "blogID")
            }
        }
        
        public var and: [ModelPost6ConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelPost6ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelPost6ConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelPost6ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelPost6ConditionInput? {
            get {
                return graphQLMap["not"] as! ModelPost6ConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct UpdatePost6Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, title: String? = nil, blogId: GraphQLID? = nil) {
            graphQLMap = ["id": id, "title": title, "blogID": blogId]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var title: String? {
            get {
                return graphQLMap["title"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
        
        public var blogId: GraphQLID? {
            get {
                return graphQLMap["blogID"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "blogID")
            }
        }
    }
    
    public struct DeletePost6Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreateComment6Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, postId: GraphQLID, content: String) {
            graphQLMap = ["id": id, "postID": postId, "content": content]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var postId: GraphQLID {
            get {
                return graphQLMap["postID"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "postID")
            }
        }
        
        public var content: String {
            get {
                return graphQLMap["content"] as! String
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
    }
    
    public struct ModelComment6ConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(postId: ModelIDInput? = nil, content: ModelStringInput? = nil, and: [ModelComment6ConditionInput?]? = nil, or: [ModelComment6ConditionInput?]? = nil, not: ModelComment6ConditionInput? = nil) {
            graphQLMap = ["postID": postId, "content": content, "and": and, "or": or, "not": not]
        }
        
        public var postId: ModelIDInput? {
            get {
                return graphQLMap["postID"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "postID")
            }
        }
        
        public var content: ModelStringInput? {
            get {
                return graphQLMap["content"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
        
        public var and: [ModelComment6ConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelComment6ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelComment6ConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelComment6ConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelComment6ConditionInput? {
            get {
                return graphQLMap["not"] as! ModelComment6ConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct UpdateComment6Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, postId: GraphQLID? = nil, content: String? = nil) {
            graphQLMap = ["id": id, "postID": postId, "content": content]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var postId: GraphQLID? {
            get {
                return graphQLMap["postID"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "postID")
            }
        }
        
        public var content: String? {
            get {
                return graphQLMap["content"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
    }
    
    public struct DeleteComment6Input: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreateScalarContainerInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, myString: String? = nil, myInt: Int? = nil, myDouble: Double? = nil, myBool: Bool? = nil, myDate: String? = nil, myTime: String? = nil, myDateTime: String? = nil, myTimeStamp: Int? = nil, myEmail: String? = nil, myJson: String? = nil, myPhone: String? = nil, myUrl: String? = nil, myIpAddress: String? = nil) {
            graphQLMap = ["id": id, "myString": myString, "myInt": myInt, "myDouble": myDouble, "myBool": myBool, "myDate": myDate, "myTime": myTime, "myDateTime": myDateTime, "myTimeStamp": myTimeStamp, "myEmail": myEmail, "myJSON": myJson, "myPhone": myPhone, "myURL": myUrl, "myIPAddress": myIpAddress]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var myString: String? {
            get {
                return graphQLMap["myString"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myString")
            }
        }
        
        public var myInt: Int? {
            get {
                return graphQLMap["myInt"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myInt")
            }
        }
        
        public var myDouble: Double? {
            get {
                return graphQLMap["myDouble"] as! Double?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myDouble")
            }
        }
        
        public var myBool: Bool? {
            get {
                return graphQLMap["myBool"] as! Bool?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myBool")
            }
        }
        
        public var myDate: String? {
            get {
                return graphQLMap["myDate"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myDate")
            }
        }
        
        public var myTime: String? {
            get {
                return graphQLMap["myTime"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myTime")
            }
        }
        
        public var myDateTime: String? {
            get {
                return graphQLMap["myDateTime"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myDateTime")
            }
        }
        
        public var myTimeStamp: Int? {
            get {
                return graphQLMap["myTimeStamp"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myTimeStamp")
            }
        }
        
        public var myEmail: String? {
            get {
                return graphQLMap["myEmail"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myEmail")
            }
        }
        
        public var myJson: String? {
            get {
                return graphQLMap["myJSON"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myJSON")
            }
        }
        
        public var myPhone: String? {
            get {
                return graphQLMap["myPhone"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myPhone")
            }
        }
        
        public var myUrl: String? {
            get {
                return graphQLMap["myURL"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myURL")
            }
        }
        
        public var myIpAddress: String? {
            get {
                return graphQLMap["myIPAddress"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myIPAddress")
            }
        }
    }
    
    public struct ModelScalarContainerConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(myString: ModelStringInput? = nil, myInt: ModelIntInput? = nil, myDouble: ModelFloatInput? = nil, myBool: ModelBooleanInput? = nil, myDate: ModelStringInput? = nil, myTime: ModelStringInput? = nil, myDateTime: ModelStringInput? = nil, myTimeStamp: ModelIntInput? = nil, myEmail: ModelStringInput? = nil, myJson: ModelStringInput? = nil, myPhone: ModelStringInput? = nil, myUrl: ModelStringInput? = nil, myIpAddress: ModelStringInput? = nil, and: [ModelScalarContainerConditionInput?]? = nil, or: [ModelScalarContainerConditionInput?]? = nil, not: ModelScalarContainerConditionInput? = nil) {
            graphQLMap = ["myString": myString, "myInt": myInt, "myDouble": myDouble, "myBool": myBool, "myDate": myDate, "myTime": myTime, "myDateTime": myDateTime, "myTimeStamp": myTimeStamp, "myEmail": myEmail, "myJSON": myJson, "myPhone": myPhone, "myURL": myUrl, "myIPAddress": myIpAddress, "and": and, "or": or, "not": not]
        }
        
        public var myString: ModelStringInput? {
            get {
                return graphQLMap["myString"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myString")
            }
        }
        
        public var myInt: ModelIntInput? {
            get {
                return graphQLMap["myInt"] as! ModelIntInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myInt")
            }
        }
        
        public var myDouble: ModelFloatInput? {
            get {
                return graphQLMap["myDouble"] as! ModelFloatInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myDouble")
            }
        }
        
        public var myBool: ModelBooleanInput? {
            get {
                return graphQLMap["myBool"] as! ModelBooleanInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myBool")
            }
        }
        
        public var myDate: ModelStringInput? {
            get {
                return graphQLMap["myDate"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myDate")
            }
        }
        
        public var myTime: ModelStringInput? {
            get {
                return graphQLMap["myTime"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myTime")
            }
        }
        
        public var myDateTime: ModelStringInput? {
            get {
                return graphQLMap["myDateTime"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myDateTime")
            }
        }
        
        public var myTimeStamp: ModelIntInput? {
            get {
                return graphQLMap["myTimeStamp"] as! ModelIntInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myTimeStamp")
            }
        }
        
        public var myEmail: ModelStringInput? {
            get {
                return graphQLMap["myEmail"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myEmail")
            }
        }
        
        public var myJson: ModelStringInput? {
            get {
                return graphQLMap["myJSON"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myJSON")
            }
        }
        
        public var myPhone: ModelStringInput? {
            get {
                return graphQLMap["myPhone"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myPhone")
            }
        }
        
        public var myUrl: ModelStringInput? {
            get {
                return graphQLMap["myURL"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myURL")
            }
        }
        
        public var myIpAddress: ModelStringInput? {
            get {
                return graphQLMap["myIPAddress"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myIPAddress")
            }
        }
        
        public var and: [ModelScalarContainerConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelScalarContainerConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelScalarContainerConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelScalarContainerConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelScalarContainerConditionInput? {
            get {
                return graphQLMap["not"] as! ModelScalarContainerConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelIntInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(ne: Int? = nil, eq: Int? = nil, le: Int? = nil, lt: Int? = nil, ge: Int? = nil, gt: Int? = nil, between: [Int?]? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil) {
            graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "between": between, "attributeExists": attributeExists, "attributeType": attributeType]
        }
        
        public var ne: Int? {
            get {
                return graphQLMap["ne"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "ne")
            }
        }
        
        public var eq: Int? {
            get {
                return graphQLMap["eq"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "eq")
            }
        }
        
        public var le: Int? {
            get {
                return graphQLMap["le"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "le")
            }
        }
        
        public var lt: Int? {
            get {
                return graphQLMap["lt"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "lt")
            }
        }
        
        public var ge: Int? {
            get {
                return graphQLMap["ge"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "ge")
            }
        }
        
        public var gt: Int? {
            get {
                return graphQLMap["gt"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "gt")
            }
        }
        
        public var between: [Int?]? {
            get {
                return graphQLMap["between"] as! [Int?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "between")
            }
        }
        
        public var attributeExists: Bool? {
            get {
                return graphQLMap["attributeExists"] as! Bool?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "attributeExists")
            }
        }
        
        public var attributeType: ModelAttributeTypes? {
            get {
                return graphQLMap["attributeType"] as! ModelAttributeTypes?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "attributeType")
            }
        }
    }
    
    public struct UpdateScalarContainerInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, myString: String? = nil, myInt: Int? = nil, myDouble: Double? = nil, myBool: Bool? = nil, myDate: String? = nil, myTime: String? = nil, myDateTime: String? = nil, myTimeStamp: Int? = nil, myEmail: String? = nil, myJson: String? = nil, myPhone: String? = nil, myUrl: String? = nil, myIpAddress: String? = nil) {
            graphQLMap = ["id": id, "myString": myString, "myInt": myInt, "myDouble": myDouble, "myBool": myBool, "myDate": myDate, "myTime": myTime, "myDateTime": myDateTime, "myTimeStamp": myTimeStamp, "myEmail": myEmail, "myJSON": myJson, "myPhone": myPhone, "myURL": myUrl, "myIPAddress": myIpAddress]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var myString: String? {
            get {
                return graphQLMap["myString"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myString")
            }
        }
        
        public var myInt: Int? {
            get {
                return graphQLMap["myInt"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myInt")
            }
        }
        
        public var myDouble: Double? {
            get {
                return graphQLMap["myDouble"] as! Double?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myDouble")
            }
        }
        
        public var myBool: Bool? {
            get {
                return graphQLMap["myBool"] as! Bool?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myBool")
            }
        }
        
        public var myDate: String? {
            get {
                return graphQLMap["myDate"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myDate")
            }
        }
        
        public var myTime: String? {
            get {
                return graphQLMap["myTime"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myTime")
            }
        }
        
        public var myDateTime: String? {
            get {
                return graphQLMap["myDateTime"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myDateTime")
            }
        }
        
        public var myTimeStamp: Int? {
            get {
                return graphQLMap["myTimeStamp"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myTimeStamp")
            }
        }
        
        public var myEmail: String? {
            get {
                return graphQLMap["myEmail"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myEmail")
            }
        }
        
        public var myJson: String? {
            get {
                return graphQLMap["myJSON"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myJSON")
            }
        }
        
        public var myPhone: String? {
            get {
                return graphQLMap["myPhone"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myPhone")
            }
        }
        
        public var myUrl: String? {
            get {
                return graphQLMap["myURL"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myURL")
            }
        }
        
        public var myIpAddress: String? {
            get {
                return graphQLMap["myIPAddress"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myIPAddress")
            }
        }
    }
    
    public struct DeleteScalarContainerInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreateListIntContainerInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, test: Int, nullableInt: Int? = nil, intList: [Int], intNullableList: [Int]? = nil, nullableIntList: [Int?], nullableIntNullableList: [Int?]? = nil) {
            graphQLMap = ["id": id, "test": test, "nullableInt": nullableInt, "intList": intList, "intNullableList": intNullableList, "nullableIntList": nullableIntList, "nullableIntNullableList": nullableIntNullableList]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var test: Int {
            get {
                return graphQLMap["test"] as! Int
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "test")
            }
        }
        
        public var nullableInt: Int? {
            get {
                return graphQLMap["nullableInt"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableInt")
            }
        }
        
        public var intList: [Int] {
            get {
                return graphQLMap["intList"] as! [Int]
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "intList")
            }
        }
        
        public var intNullableList: [Int]? {
            get {
                return graphQLMap["intNullableList"] as! [Int]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "intNullableList")
            }
        }
        
        public var nullableIntList: [Int?] {
            get {
                return graphQLMap["nullableIntList"] as! [Int?]
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableIntList")
            }
        }
        
        public var nullableIntNullableList: [Int?]? {
            get {
                return graphQLMap["nullableIntNullableList"] as! [Int?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableIntNullableList")
            }
        }
    }
    
    public struct ModelListIntContainerConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(test: ModelIntInput? = nil, nullableInt: ModelIntInput? = nil, intList: ModelIntInput? = nil, intNullableList: ModelIntInput? = nil, nullableIntList: ModelIntInput? = nil, nullableIntNullableList: ModelIntInput? = nil, and: [ModelListIntContainerConditionInput?]? = nil, or: [ModelListIntContainerConditionInput?]? = nil, not: ModelListIntContainerConditionInput? = nil) {
            graphQLMap = ["test": test, "nullableInt": nullableInt, "intList": intList, "intNullableList": intNullableList, "nullableIntList": nullableIntList, "nullableIntNullableList": nullableIntNullableList, "and": and, "or": or, "not": not]
        }
        
        public var test: ModelIntInput? {
            get {
                return graphQLMap["test"] as! ModelIntInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "test")
            }
        }
        
        public var nullableInt: ModelIntInput? {
            get {
                return graphQLMap["nullableInt"] as! ModelIntInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableInt")
            }
        }
        
        public var intList: ModelIntInput? {
            get {
                return graphQLMap["intList"] as! ModelIntInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "intList")
            }
        }
        
        public var intNullableList: ModelIntInput? {
            get {
                return graphQLMap["intNullableList"] as! ModelIntInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "intNullableList")
            }
        }
        
        public var nullableIntList: ModelIntInput? {
            get {
                return graphQLMap["nullableIntList"] as! ModelIntInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableIntList")
            }
        }
        
        public var nullableIntNullableList: ModelIntInput? {
            get {
                return graphQLMap["nullableIntNullableList"] as! ModelIntInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableIntNullableList")
            }
        }
        
        public var and: [ModelListIntContainerConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelListIntContainerConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelListIntContainerConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelListIntContainerConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelListIntContainerConditionInput? {
            get {
                return graphQLMap["not"] as! ModelListIntContainerConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct UpdateListIntContainerInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, test: Int? = nil, nullableInt: Int? = nil, intList: [Int]? = nil, intNullableList: [Int]? = nil, nullableIntList: [Int?]? = nil, nullableIntNullableList: [Int?]? = nil) {
            graphQLMap = ["id": id, "test": test, "nullableInt": nullableInt, "intList": intList, "intNullableList": intNullableList, "nullableIntList": nullableIntList, "nullableIntNullableList": nullableIntNullableList]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var test: Int? {
            get {
                return graphQLMap["test"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "test")
            }
        }
        
        public var nullableInt: Int? {
            get {
                return graphQLMap["nullableInt"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableInt")
            }
        }
        
        public var intList: [Int]? {
            get {
                return graphQLMap["intList"] as! [Int]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "intList")
            }
        }
        
        public var intNullableList: [Int]? {
            get {
                return graphQLMap["intNullableList"] as! [Int]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "intNullableList")
            }
        }
        
        public var nullableIntList: [Int?]? {
            get {
                return graphQLMap["nullableIntList"] as! [Int?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableIntList")
            }
        }
        
        public var nullableIntNullableList: [Int?]? {
            get {
                return graphQLMap["nullableIntNullableList"] as! [Int?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableIntNullableList")
            }
        }
    }
    
    public struct DeleteListIntContainerInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreateListStringContainerInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, test: String, nullableString: String? = nil, stringList: [String], stringNullableList: [String]? = nil, nullableStringList: [String?], nullableStringNullableList: [String?]? = nil) {
            graphQLMap = ["id": id, "test": test, "nullableString": nullableString, "stringList": stringList, "stringNullableList": stringNullableList, "nullableStringList": nullableStringList, "nullableStringNullableList": nullableStringNullableList]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var test: String {
            get {
                return graphQLMap["test"] as! String
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "test")
            }
        }
        
        public var nullableString: String? {
            get {
                return graphQLMap["nullableString"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableString")
            }
        }
        
        public var stringList: [String] {
            get {
                return graphQLMap["stringList"] as! [String]
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "stringList")
            }
        }
        
        public var stringNullableList: [String]? {
            get {
                return graphQLMap["stringNullableList"] as! [String]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "stringNullableList")
            }
        }
        
        public var nullableStringList: [String?] {
            get {
                return graphQLMap["nullableStringList"] as! [String?]
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableStringList")
            }
        }
        
        public var nullableStringNullableList: [String?]? {
            get {
                return graphQLMap["nullableStringNullableList"] as! [String?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableStringNullableList")
            }
        }
    }
    
    public struct ModelListStringContainerConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(test: ModelStringInput? = nil, nullableString: ModelStringInput? = nil, stringList: ModelStringInput? = nil, stringNullableList: ModelStringInput? = nil, nullableStringList: ModelStringInput? = nil, nullableStringNullableList: ModelStringInput? = nil, and: [ModelListStringContainerConditionInput?]? = nil, or: [ModelListStringContainerConditionInput?]? = nil, not: ModelListStringContainerConditionInput? = nil) {
            graphQLMap = ["test": test, "nullableString": nullableString, "stringList": stringList, "stringNullableList": stringNullableList, "nullableStringList": nullableStringList, "nullableStringNullableList": nullableStringNullableList, "and": and, "or": or, "not": not]
        }
        
        public var test: ModelStringInput? {
            get {
                return graphQLMap["test"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "test")
            }
        }
        
        public var nullableString: ModelStringInput? {
            get {
                return graphQLMap["nullableString"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableString")
            }
        }
        
        public var stringList: ModelStringInput? {
            get {
                return graphQLMap["stringList"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "stringList")
            }
        }
        
        public var stringNullableList: ModelStringInput? {
            get {
                return graphQLMap["stringNullableList"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "stringNullableList")
            }
        }
        
        public var nullableStringList: ModelStringInput? {
            get {
                return graphQLMap["nullableStringList"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableStringList")
            }
        }
        
        public var nullableStringNullableList: ModelStringInput? {
            get {
                return graphQLMap["nullableStringNullableList"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableStringNullableList")
            }
        }
        
        public var and: [ModelListStringContainerConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelListStringContainerConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelListStringContainerConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelListStringContainerConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelListStringContainerConditionInput? {
            get {
                return graphQLMap["not"] as! ModelListStringContainerConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct UpdateListStringContainerInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, test: String? = nil, nullableString: String? = nil, stringList: [String]? = nil, stringNullableList: [String]? = nil, nullableStringList: [String?]? = nil, nullableStringNullableList: [String?]? = nil) {
            graphQLMap = ["id": id, "test": test, "nullableString": nullableString, "stringList": stringList, "stringNullableList": stringNullableList, "nullableStringList": nullableStringList, "nullableStringNullableList": nullableStringNullableList]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var test: String? {
            get {
                return graphQLMap["test"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "test")
            }
        }
        
        public var nullableString: String? {
            get {
                return graphQLMap["nullableString"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableString")
            }
        }
        
        public var stringList: [String]? {
            get {
                return graphQLMap["stringList"] as! [String]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "stringList")
            }
        }
        
        public var stringNullableList: [String]? {
            get {
                return graphQLMap["stringNullableList"] as! [String]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "stringNullableList")
            }
        }
        
        public var nullableStringList: [String?]? {
            get {
                return graphQLMap["nullableStringList"] as! [String?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableStringList")
            }
        }
        
        public var nullableStringNullableList: [String?]? {
            get {
                return graphQLMap["nullableStringNullableList"] as! [String?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableStringNullableList")
            }
        }
    }
    
    public struct DeleteListStringContainerInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreateEnumTestModelInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, enumVal: TestEnum, nullableEnumVal: TestEnum? = nil, enumList: [TestEnum], enumNullableList: [TestEnum]? = nil, nullableEnumList: [TestEnum?], nullableEnumNullableList: [TestEnum?]? = nil) {
            graphQLMap = ["id": id, "enumVal": enumVal, "nullableEnumVal": nullableEnumVal, "enumList": enumList, "enumNullableList": enumNullableList, "nullableEnumList": nullableEnumList, "nullableEnumNullableList": nullableEnumNullableList]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var enumVal: TestEnum {
            get {
                return graphQLMap["enumVal"] as! TestEnum
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "enumVal")
            }
        }
        
        public var nullableEnumVal: TestEnum? {
            get {
                return graphQLMap["nullableEnumVal"] as! TestEnum?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableEnumVal")
            }
        }
        
        public var enumList: [TestEnum] {
            get {
                return graphQLMap["enumList"] as! [TestEnum]
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "enumList")
            }
        }
        
        public var enumNullableList: [TestEnum]? {
            get {
                return graphQLMap["enumNullableList"] as! [TestEnum]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "enumNullableList")
            }
        }
        
        public var nullableEnumList: [TestEnum?] {
            get {
                return graphQLMap["nullableEnumList"] as! [TestEnum?]
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableEnumList")
            }
        }
        
        public var nullableEnumNullableList: [TestEnum?]? {
            get {
                return graphQLMap["nullableEnumNullableList"] as! [TestEnum?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableEnumNullableList")
            }
        }
    }
    
    public enum TestEnum: RawRepresentable, Equatable, JSONDecodable, JSONEncodable {
        public typealias RawValue = String
        case valueOne
        case valueTwo
        /// Auto generated constant for unknown enum values
        case unknown(RawValue)
        
        public init?(rawValue: RawValue) {
            switch rawValue {
            case "VALUE_ONE": self = .valueOne
            case "VALUE_TWO": self = .valueTwo
            default: self = .unknown(rawValue)
            }
        }
        
        public var rawValue: RawValue {
            switch self {
            case .valueOne: return "VALUE_ONE"
            case .valueTwo: return "VALUE_TWO"
            case .unknown(let value): return value
            }
        }
        
        public static func == (lhs: TestEnum, rhs: TestEnum) -> Bool {
            switch (lhs, rhs) {
            case (.valueOne, .valueOne): return true
            case (.valueTwo, .valueTwo): return true
            case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue
            default: return false
            }
        }
    }
    
    public struct ModelEnumTestModelConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(enumVal: ModelTestEnumInput? = nil, nullableEnumVal: ModelTestEnumInput? = nil, enumList: ModelTestEnumListInput? = nil, enumNullableList: ModelTestEnumListInput? = nil, nullableEnumList: ModelTestEnumListInput? = nil, nullableEnumNullableList: ModelTestEnumListInput? = nil, and: [ModelEnumTestModelConditionInput?]? = nil, or: [ModelEnumTestModelConditionInput?]? = nil, not: ModelEnumTestModelConditionInput? = nil) {
            graphQLMap = ["enumVal": enumVal, "nullableEnumVal": nullableEnumVal, "enumList": enumList, "enumNullableList": enumNullableList, "nullableEnumList": nullableEnumList, "nullableEnumNullableList": nullableEnumNullableList, "and": and, "or": or, "not": not]
        }
        
        public var enumVal: ModelTestEnumInput? {
            get {
                return graphQLMap["enumVal"] as! ModelTestEnumInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "enumVal")
            }
        }
        
        public var nullableEnumVal: ModelTestEnumInput? {
            get {
                return graphQLMap["nullableEnumVal"] as! ModelTestEnumInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableEnumVal")
            }
        }
        
        public var enumList: ModelTestEnumListInput? {
            get {
                return graphQLMap["enumList"] as! ModelTestEnumListInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "enumList")
            }
        }
        
        public var enumNullableList: ModelTestEnumListInput? {
            get {
                return graphQLMap["enumNullableList"] as! ModelTestEnumListInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "enumNullableList")
            }
        }
        
        public var nullableEnumList: ModelTestEnumListInput? {
            get {
                return graphQLMap["nullableEnumList"] as! ModelTestEnumListInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableEnumList")
            }
        }
        
        public var nullableEnumNullableList: ModelTestEnumListInput? {
            get {
                return graphQLMap["nullableEnumNullableList"] as! ModelTestEnumListInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableEnumNullableList")
            }
        }
        
        public var and: [ModelEnumTestModelConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelEnumTestModelConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelEnumTestModelConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelEnumTestModelConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelEnumTestModelConditionInput? {
            get {
                return graphQLMap["not"] as! ModelEnumTestModelConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelTestEnumInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(eq: TestEnum? = nil, ne: TestEnum? = nil) {
            graphQLMap = ["eq": eq, "ne": ne]
        }
        
        public var eq: TestEnum? {
            get {
                return graphQLMap["eq"] as! TestEnum?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "eq")
            }
        }
        
        public var ne: TestEnum? {
            get {
                return graphQLMap["ne"] as! TestEnum?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "ne")
            }
        }
    }
    
    public struct ModelTestEnumListInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(eq: [TestEnum?]? = nil, ne: [TestEnum?]? = nil, contains: TestEnum? = nil, notContains: TestEnum? = nil) {
            graphQLMap = ["eq": eq, "ne": ne, "contains": contains, "notContains": notContains]
        }
        
        public var eq: [TestEnum?]? {
            get {
                return graphQLMap["eq"] as! [TestEnum?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "eq")
            }
        }
        
        public var ne: [TestEnum?]? {
            get {
                return graphQLMap["ne"] as! [TestEnum?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "ne")
            }
        }
        
        public var contains: TestEnum? {
            get {
                return graphQLMap["contains"] as! TestEnum?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "contains")
            }
        }
        
        public var notContains: TestEnum? {
            get {
                return graphQLMap["notContains"] as! TestEnum?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "notContains")
            }
        }
    }
    
    public struct UpdateEnumTestModelInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, enumVal: TestEnum? = nil, nullableEnumVal: TestEnum? = nil, enumList: [TestEnum]? = nil, enumNullableList: [TestEnum]? = nil, nullableEnumList: [TestEnum?]? = nil, nullableEnumNullableList: [TestEnum?]? = nil) {
            graphQLMap = ["id": id, "enumVal": enumVal, "nullableEnumVal": nullableEnumVal, "enumList": enumList, "enumNullableList": enumNullableList, "nullableEnumList": nullableEnumList, "nullableEnumNullableList": nullableEnumNullableList]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var enumVal: TestEnum? {
            get {
                return graphQLMap["enumVal"] as! TestEnum?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "enumVal")
            }
        }
        
        public var nullableEnumVal: TestEnum? {
            get {
                return graphQLMap["nullableEnumVal"] as! TestEnum?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableEnumVal")
            }
        }
        
        public var enumList: [TestEnum]? {
            get {
                return graphQLMap["enumList"] as! [TestEnum]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "enumList")
            }
        }
        
        public var enumNullableList: [TestEnum]? {
            get {
                return graphQLMap["enumNullableList"] as! [TestEnum]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "enumNullableList")
            }
        }
        
        public var nullableEnumList: [TestEnum?]? {
            get {
                return graphQLMap["nullableEnumList"] as! [TestEnum?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableEnumList")
            }
        }
        
        public var nullableEnumNullableList: [TestEnum?]? {
            get {
                return graphQLMap["nullableEnumNullableList"] as! [TestEnum?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableEnumNullableList")
            }
        }
    }
    
    public struct DeleteEnumTestModelInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct CreateNestedTypeTestModelInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID? = nil, nestedVal: NestedInput, nullableNestedVal: NestedInput? = nil, nestedList: [NestedInput], nestedNullableList: [NestedInput]? = nil, nullableNestedList: [NestedInput?], nullableNestedNullableList: [NestedInput?]? = nil) {
            graphQLMap = ["id": id, "nestedVal": nestedVal, "nullableNestedVal": nullableNestedVal, "nestedList": nestedList, "nestedNullableList": nestedNullableList, "nullableNestedList": nullableNestedList, "nullableNestedNullableList": nullableNestedNullableList]
        }
        
        public var id: GraphQLID? {
            get {
                return graphQLMap["id"] as! GraphQLID?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var nestedVal: NestedInput {
            get {
                return graphQLMap["nestedVal"] as! NestedInput
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nestedVal")
            }
        }
        
        public var nullableNestedVal: NestedInput? {
            get {
                return graphQLMap["nullableNestedVal"] as! NestedInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableNestedVal")
            }
        }
        
        public var nestedList: [NestedInput] {
            get {
                return graphQLMap["nestedList"] as! [NestedInput]
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nestedList")
            }
        }
        
        public var nestedNullableList: [NestedInput]? {
            get {
                return graphQLMap["nestedNullableList"] as! [NestedInput]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nestedNullableList")
            }
        }
        
        public var nullableNestedList: [NestedInput?] {
            get {
                return graphQLMap["nullableNestedList"] as! [NestedInput?]
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableNestedList")
            }
        }
        
        public var nullableNestedNullableList: [NestedInput?]? {
            get {
                return graphQLMap["nullableNestedNullableList"] as! [NestedInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableNestedNullableList")
            }
        }
    }
    
    public struct NestedInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(valueOne: Int? = nil, valueTwo: String? = nil) {
            graphQLMap = ["valueOne": valueOne, "valueTwo": valueTwo]
        }
        
        public var valueOne: Int? {
            get {
                return graphQLMap["valueOne"] as! Int?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "valueOne")
            }
        }
        
        public var valueTwo: String? {
            get {
                return graphQLMap["valueTwo"] as! String?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "valueTwo")
            }
        }
    }
    
    public struct ModelNestedTypeTestModelConditionInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(and: [ModelNestedTypeTestModelConditionInput?]? = nil, or: [ModelNestedTypeTestModelConditionInput?]? = nil, not: ModelNestedTypeTestModelConditionInput? = nil) {
            graphQLMap = ["and": and, "or": or, "not": not]
        }
        
        public var and: [ModelNestedTypeTestModelConditionInput?]? {
            get {
                return graphQLMap["and"] as! [ModelNestedTypeTestModelConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelNestedTypeTestModelConditionInput?]? {
            get {
                return graphQLMap["or"] as! [ModelNestedTypeTestModelConditionInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelNestedTypeTestModelConditionInput? {
            get {
                return graphQLMap["not"] as! ModelNestedTypeTestModelConditionInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct UpdateNestedTypeTestModelInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID, nestedVal: NestedInput? = nil, nullableNestedVal: NestedInput? = nil, nestedList: [NestedInput]? = nil, nestedNullableList: [NestedInput]? = nil, nullableNestedList: [NestedInput?]? = nil, nullableNestedNullableList: [NestedInput?]? = nil) {
            graphQLMap = ["id": id, "nestedVal": nestedVal, "nullableNestedVal": nullableNestedVal, "nestedList": nestedList, "nestedNullableList": nestedNullableList, "nullableNestedList": nullableNestedList, "nullableNestedNullableList": nullableNestedNullableList]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var nestedVal: NestedInput? {
            get {
                return graphQLMap["nestedVal"] as! NestedInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nestedVal")
            }
        }
        
        public var nullableNestedVal: NestedInput? {
            get {
                return graphQLMap["nullableNestedVal"] as! NestedInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableNestedVal")
            }
        }
        
        public var nestedList: [NestedInput]? {
            get {
                return graphQLMap["nestedList"] as! [NestedInput]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nestedList")
            }
        }
        
        public var nestedNullableList: [NestedInput]? {
            get {
                return graphQLMap["nestedNullableList"] as! [NestedInput]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nestedNullableList")
            }
        }
        
        public var nullableNestedList: [NestedInput?]? {
            get {
                return graphQLMap["nullableNestedList"] as! [NestedInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableNestedList")
            }
        }
        
        public var nullableNestedNullableList: [NestedInput?]? {
            get {
                return graphQLMap["nullableNestedNullableList"] as! [NestedInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableNestedNullableList")
            }
        }
    }
    
    public struct DeleteNestedTypeTestModelInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: GraphQLID) {
            graphQLMap = ["id": id]
        }
        
        public var id: GraphQLID {
            get {
                return graphQLMap["id"] as! GraphQLID
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
    }
    
    public struct ModelPostFilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, title: ModelStringInput? = nil, content: ModelStringInput? = nil, createdAt: ModelStringInput? = nil, updatedAt: ModelStringInput? = nil, draft: ModelBooleanInput? = nil, rating: ModelFloatInput? = nil, status: ModelPostStatusInput? = nil, and: [ModelPostFilterInput?]? = nil, or: [ModelPostFilterInput?]? = nil, not: ModelPostFilterInput? = nil) {
            graphQLMap = ["id": id, "title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var title: ModelStringInput? {
            get {
                return graphQLMap["title"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
        
        public var content: ModelStringInput? {
            get {
                return graphQLMap["content"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
        
        public var createdAt: ModelStringInput? {
            get {
                return graphQLMap["createdAt"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "createdAt")
            }
        }
        
        public var updatedAt: ModelStringInput? {
            get {
                return graphQLMap["updatedAt"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "updatedAt")
            }
        }
        
        public var draft: ModelBooleanInput? {
            get {
                return graphQLMap["draft"] as! ModelBooleanInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "draft")
            }
        }
        
        public var rating: ModelFloatInput? {
            get {
                return graphQLMap["rating"] as! ModelFloatInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "rating")
            }
        }
        
        public var status: ModelPostStatusInput? {
            get {
                return graphQLMap["status"] as! ModelPostStatusInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "status")
            }
        }
        
        public var and: [ModelPostFilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelPostFilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelPostFilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelPostFilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelPostFilterInput? {
            get {
                return graphQLMap["not"] as! ModelPostFilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelCommentFilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, content: ModelStringInput? = nil, createdAt: ModelStringInput? = nil, and: [ModelCommentFilterInput?]? = nil, or: [ModelCommentFilterInput?]? = nil, not: ModelCommentFilterInput? = nil) {
            graphQLMap = ["id": id, "content": content, "createdAt": createdAt, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var content: ModelStringInput? {
            get {
                return graphQLMap["content"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
        
        public var createdAt: ModelStringInput? {
            get {
                return graphQLMap["createdAt"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "createdAt")
            }
        }
        
        public var and: [ModelCommentFilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelCommentFilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelCommentFilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelCommentFilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelCommentFilterInput? {
            get {
                return graphQLMap["not"] as! ModelCommentFilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelProject1FilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, name: ModelStringInput? = nil, and: [ModelProject1FilterInput?]? = nil, or: [ModelProject1FilterInput?]? = nil, not: ModelProject1FilterInput? = nil) {
            graphQLMap = ["id": id, "name": name, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var name: ModelStringInput? {
            get {
                return graphQLMap["name"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
        
        public var and: [ModelProject1FilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelProject1FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelProject1FilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelProject1FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelProject1FilterInput? {
            get {
                return graphQLMap["not"] as! ModelProject1FilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelTeam1FilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, name: ModelStringInput? = nil, and: [ModelTeam1FilterInput?]? = nil, or: [ModelTeam1FilterInput?]? = nil, not: ModelTeam1FilterInput? = nil) {
            graphQLMap = ["id": id, "name": name, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var name: ModelStringInput? {
            get {
                return graphQLMap["name"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
        
        public var and: [ModelTeam1FilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelTeam1FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelTeam1FilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelTeam1FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelTeam1FilterInput? {
            get {
                return graphQLMap["not"] as! ModelTeam1FilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelProject2FilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, name: ModelStringInput? = nil, teamId: ModelIDInput? = nil, and: [ModelProject2FilterInput?]? = nil, or: [ModelProject2FilterInput?]? = nil, not: ModelProject2FilterInput? = nil) {
            graphQLMap = ["id": id, "name": name, "teamID": teamId, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var name: ModelStringInput? {
            get {
                return graphQLMap["name"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
        
        public var teamId: ModelIDInput? {
            get {
                return graphQLMap["teamID"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "teamID")
            }
        }
        
        public var and: [ModelProject2FilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelProject2FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelProject2FilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelProject2FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelProject2FilterInput? {
            get {
                return graphQLMap["not"] as! ModelProject2FilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelTeam2FilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, name: ModelStringInput? = nil, and: [ModelTeam2FilterInput?]? = nil, or: [ModelTeam2FilterInput?]? = nil, not: ModelTeam2FilterInput? = nil) {
            graphQLMap = ["id": id, "name": name, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var name: ModelStringInput? {
            get {
                return graphQLMap["name"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
        
        public var and: [ModelTeam2FilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelTeam2FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelTeam2FilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelTeam2FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelTeam2FilterInput? {
            get {
                return graphQLMap["not"] as! ModelTeam2FilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelPost3FilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, title: ModelStringInput? = nil, and: [ModelPost3FilterInput?]? = nil, or: [ModelPost3FilterInput?]? = nil, not: ModelPost3FilterInput? = nil) {
            graphQLMap = ["id": id, "title": title, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var title: ModelStringInput? {
            get {
                return graphQLMap["title"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
        
        public var and: [ModelPost3FilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelPost3FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelPost3FilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelPost3FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelPost3FilterInput? {
            get {
                return graphQLMap["not"] as! ModelPost3FilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelComment3FilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, postId: ModelIDInput? = nil, content: ModelStringInput? = nil, and: [ModelComment3FilterInput?]? = nil, or: [ModelComment3FilterInput?]? = nil, not: ModelComment3FilterInput? = nil) {
            graphQLMap = ["id": id, "postID": postId, "content": content, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var postId: ModelIDInput? {
            get {
                return graphQLMap["postID"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "postID")
            }
        }
        
        public var content: ModelStringInput? {
            get {
                return graphQLMap["content"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
        
        public var and: [ModelComment3FilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelComment3FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelComment3FilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelComment3FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelComment3FilterInput? {
            get {
                return graphQLMap["not"] as! ModelComment3FilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelPost4FilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, title: ModelStringInput? = nil, and: [ModelPost4FilterInput?]? = nil, or: [ModelPost4FilterInput?]? = nil, not: ModelPost4FilterInput? = nil) {
            graphQLMap = ["id": id, "title": title, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var title: ModelStringInput? {
            get {
                return graphQLMap["title"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
        
        public var and: [ModelPost4FilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelPost4FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelPost4FilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelPost4FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelPost4FilterInput? {
            get {
                return graphQLMap["not"] as! ModelPost4FilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelComment4FilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, postId: ModelIDInput? = nil, content: ModelStringInput? = nil, and: [ModelComment4FilterInput?]? = nil, or: [ModelComment4FilterInput?]? = nil, not: ModelComment4FilterInput? = nil) {
            graphQLMap = ["id": id, "postID": postId, "content": content, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var postId: ModelIDInput? {
            get {
                return graphQLMap["postID"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "postID")
            }
        }
        
        public var content: ModelStringInput? {
            get {
                return graphQLMap["content"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
        
        public var and: [ModelComment4FilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelComment4FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelComment4FilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelComment4FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelComment4FilterInput? {
            get {
                return graphQLMap["not"] as! ModelComment4FilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelPost5FilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, title: ModelStringInput? = nil, and: [ModelPost5FilterInput?]? = nil, or: [ModelPost5FilterInput?]? = nil, not: ModelPost5FilterInput? = nil) {
            graphQLMap = ["id": id, "title": title, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var title: ModelStringInput? {
            get {
                return graphQLMap["title"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
        
        public var and: [ModelPost5FilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelPost5FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelPost5FilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelPost5FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelPost5FilterInput? {
            get {
                return graphQLMap["not"] as! ModelPost5FilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelPostEditor5FilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, postId: ModelIDInput? = nil, editorId: ModelIDInput? = nil, and: [ModelPostEditor5FilterInput?]? = nil, or: [ModelPostEditor5FilterInput?]? = nil, not: ModelPostEditor5FilterInput? = nil) {
            graphQLMap = ["id": id, "postID": postId, "editorID": editorId, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var postId: ModelIDInput? {
            get {
                return graphQLMap["postID"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "postID")
            }
        }
        
        public var editorId: ModelIDInput? {
            get {
                return graphQLMap["editorID"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "editorID")
            }
        }
        
        public var and: [ModelPostEditor5FilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelPostEditor5FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelPostEditor5FilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelPostEditor5FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelPostEditor5FilterInput? {
            get {
                return graphQLMap["not"] as! ModelPostEditor5FilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelUser5FilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, username: ModelStringInput? = nil, and: [ModelUser5FilterInput?]? = nil, or: [ModelUser5FilterInput?]? = nil, not: ModelUser5FilterInput? = nil) {
            graphQLMap = ["id": id, "username": username, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var username: ModelStringInput? {
            get {
                return graphQLMap["username"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "username")
            }
        }
        
        public var and: [ModelUser5FilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelUser5FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelUser5FilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelUser5FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelUser5FilterInput? {
            get {
                return graphQLMap["not"] as! ModelUser5FilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelBlog6FilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, name: ModelStringInput? = nil, and: [ModelBlog6FilterInput?]? = nil, or: [ModelBlog6FilterInput?]? = nil, not: ModelBlog6FilterInput? = nil) {
            graphQLMap = ["id": id, "name": name, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var name: ModelStringInput? {
            get {
                return graphQLMap["name"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "name")
            }
        }
        
        public var and: [ModelBlog6FilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelBlog6FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelBlog6FilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelBlog6FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelBlog6FilterInput? {
            get {
                return graphQLMap["not"] as! ModelBlog6FilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelPost6FilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, title: ModelStringInput? = nil, blogId: ModelIDInput? = nil, and: [ModelPost6FilterInput?]? = nil, or: [ModelPost6FilterInput?]? = nil, not: ModelPost6FilterInput? = nil) {
            graphQLMap = ["id": id, "title": title, "blogID": blogId, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var title: ModelStringInput? {
            get {
                return graphQLMap["title"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "title")
            }
        }
        
        public var blogId: ModelIDInput? {
            get {
                return graphQLMap["blogID"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "blogID")
            }
        }
        
        public var and: [ModelPost6FilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelPost6FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelPost6FilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelPost6FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelPost6FilterInput? {
            get {
                return graphQLMap["not"] as! ModelPost6FilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelComment6FilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, postId: ModelIDInput? = nil, content: ModelStringInput? = nil, and: [ModelComment6FilterInput?]? = nil, or: [ModelComment6FilterInput?]? = nil, not: ModelComment6FilterInput? = nil) {
            graphQLMap = ["id": id, "postID": postId, "content": content, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var postId: ModelIDInput? {
            get {
                return graphQLMap["postID"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "postID")
            }
        }
        
        public var content: ModelStringInput? {
            get {
                return graphQLMap["content"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "content")
            }
        }
        
        public var and: [ModelComment6FilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelComment6FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelComment6FilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelComment6FilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelComment6FilterInput? {
            get {
                return graphQLMap["not"] as! ModelComment6FilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelScalarContainerFilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, myString: ModelStringInput? = nil, myInt: ModelIntInput? = nil, myDouble: ModelFloatInput? = nil, myBool: ModelBooleanInput? = nil, myDate: ModelStringInput? = nil, myTime: ModelStringInput? = nil, myDateTime: ModelStringInput? = nil, myTimeStamp: ModelIntInput? = nil, myEmail: ModelStringInput? = nil, myJson: ModelStringInput? = nil, myPhone: ModelStringInput? = nil, myUrl: ModelStringInput? = nil, myIpAddress: ModelStringInput? = nil, and: [ModelScalarContainerFilterInput?]? = nil, or: [ModelScalarContainerFilterInput?]? = nil, not: ModelScalarContainerFilterInput? = nil) {
            graphQLMap = ["id": id, "myString": myString, "myInt": myInt, "myDouble": myDouble, "myBool": myBool, "myDate": myDate, "myTime": myTime, "myDateTime": myDateTime, "myTimeStamp": myTimeStamp, "myEmail": myEmail, "myJSON": myJson, "myPhone": myPhone, "myURL": myUrl, "myIPAddress": myIpAddress, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var myString: ModelStringInput? {
            get {
                return graphQLMap["myString"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myString")
            }
        }
        
        public var myInt: ModelIntInput? {
            get {
                return graphQLMap["myInt"] as! ModelIntInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myInt")
            }
        }
        
        public var myDouble: ModelFloatInput? {
            get {
                return graphQLMap["myDouble"] as! ModelFloatInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myDouble")
            }
        }
        
        public var myBool: ModelBooleanInput? {
            get {
                return graphQLMap["myBool"] as! ModelBooleanInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myBool")
            }
        }
        
        public var myDate: ModelStringInput? {
            get {
                return graphQLMap["myDate"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myDate")
            }
        }
        
        public var myTime: ModelStringInput? {
            get {
                return graphQLMap["myTime"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myTime")
            }
        }
        
        public var myDateTime: ModelStringInput? {
            get {
                return graphQLMap["myDateTime"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myDateTime")
            }
        }
        
        public var myTimeStamp: ModelIntInput? {
            get {
                return graphQLMap["myTimeStamp"] as! ModelIntInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myTimeStamp")
            }
        }
        
        public var myEmail: ModelStringInput? {
            get {
                return graphQLMap["myEmail"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myEmail")
            }
        }
        
        public var myJson: ModelStringInput? {
            get {
                return graphQLMap["myJSON"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myJSON")
            }
        }
        
        public var myPhone: ModelStringInput? {
            get {
                return graphQLMap["myPhone"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myPhone")
            }
        }
        
        public var myUrl: ModelStringInput? {
            get {
                return graphQLMap["myURL"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myURL")
            }
        }
        
        public var myIpAddress: ModelStringInput? {
            get {
                return graphQLMap["myIPAddress"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "myIPAddress")
            }
        }
        
        public var and: [ModelScalarContainerFilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelScalarContainerFilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelScalarContainerFilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelScalarContainerFilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelScalarContainerFilterInput? {
            get {
                return graphQLMap["not"] as! ModelScalarContainerFilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelListIntContainerFilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, test: ModelIntInput? = nil, nullableInt: ModelIntInput? = nil, intList: ModelIntInput? = nil, intNullableList: ModelIntInput? = nil, nullableIntList: ModelIntInput? = nil, nullableIntNullableList: ModelIntInput? = nil, and: [ModelListIntContainerFilterInput?]? = nil, or: [ModelListIntContainerFilterInput?]? = nil, not: ModelListIntContainerFilterInput? = nil) {
            graphQLMap = ["id": id, "test": test, "nullableInt": nullableInt, "intList": intList, "intNullableList": intNullableList, "nullableIntList": nullableIntList, "nullableIntNullableList": nullableIntNullableList, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var test: ModelIntInput? {
            get {
                return graphQLMap["test"] as! ModelIntInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "test")
            }
        }
        
        public var nullableInt: ModelIntInput? {
            get {
                return graphQLMap["nullableInt"] as! ModelIntInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableInt")
            }
        }
        
        public var intList: ModelIntInput? {
            get {
                return graphQLMap["intList"] as! ModelIntInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "intList")
            }
        }
        
        public var intNullableList: ModelIntInput? {
            get {
                return graphQLMap["intNullableList"] as! ModelIntInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "intNullableList")
            }
        }
        
        public var nullableIntList: ModelIntInput? {
            get {
                return graphQLMap["nullableIntList"] as! ModelIntInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableIntList")
            }
        }
        
        public var nullableIntNullableList: ModelIntInput? {
            get {
                return graphQLMap["nullableIntNullableList"] as! ModelIntInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableIntNullableList")
            }
        }
        
        public var and: [ModelListIntContainerFilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelListIntContainerFilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelListIntContainerFilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelListIntContainerFilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelListIntContainerFilterInput? {
            get {
                return graphQLMap["not"] as! ModelListIntContainerFilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelListStringContainerFilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, test: ModelStringInput? = nil, nullableString: ModelStringInput? = nil, stringList: ModelStringInput? = nil, stringNullableList: ModelStringInput? = nil, nullableStringList: ModelStringInput? = nil, nullableStringNullableList: ModelStringInput? = nil, and: [ModelListStringContainerFilterInput?]? = nil, or: [ModelListStringContainerFilterInput?]? = nil, not: ModelListStringContainerFilterInput? = nil) {
            graphQLMap = ["id": id, "test": test, "nullableString": nullableString, "stringList": stringList, "stringNullableList": stringNullableList, "nullableStringList": nullableStringList, "nullableStringNullableList": nullableStringNullableList, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var test: ModelStringInput? {
            get {
                return graphQLMap["test"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "test")
            }
        }
        
        public var nullableString: ModelStringInput? {
            get {
                return graphQLMap["nullableString"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableString")
            }
        }
        
        public var stringList: ModelStringInput? {
            get {
                return graphQLMap["stringList"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "stringList")
            }
        }
        
        public var stringNullableList: ModelStringInput? {
            get {
                return graphQLMap["stringNullableList"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "stringNullableList")
            }
        }
        
        public var nullableStringList: ModelStringInput? {
            get {
                return graphQLMap["nullableStringList"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableStringList")
            }
        }
        
        public var nullableStringNullableList: ModelStringInput? {
            get {
                return graphQLMap["nullableStringNullableList"] as! ModelStringInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableStringNullableList")
            }
        }
        
        public var and: [ModelListStringContainerFilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelListStringContainerFilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelListStringContainerFilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelListStringContainerFilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelListStringContainerFilterInput? {
            get {
                return graphQLMap["not"] as! ModelListStringContainerFilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelEnumTestModelFilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, enumVal: ModelTestEnumInput? = nil, nullableEnumVal: ModelTestEnumInput? = nil, enumList: ModelTestEnumListInput? = nil, enumNullableList: ModelTestEnumListInput? = nil, nullableEnumList: ModelTestEnumListInput? = nil, nullableEnumNullableList: ModelTestEnumListInput? = nil, and: [ModelEnumTestModelFilterInput?]? = nil, or: [ModelEnumTestModelFilterInput?]? = nil, not: ModelEnumTestModelFilterInput? = nil) {
            graphQLMap = ["id": id, "enumVal": enumVal, "nullableEnumVal": nullableEnumVal, "enumList": enumList, "enumNullableList": enumNullableList, "nullableEnumList": nullableEnumList, "nullableEnumNullableList": nullableEnumNullableList, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var enumVal: ModelTestEnumInput? {
            get {
                return graphQLMap["enumVal"] as! ModelTestEnumInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "enumVal")
            }
        }
        
        public var nullableEnumVal: ModelTestEnumInput? {
            get {
                return graphQLMap["nullableEnumVal"] as! ModelTestEnumInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableEnumVal")
            }
        }
        
        public var enumList: ModelTestEnumListInput? {
            get {
                return graphQLMap["enumList"] as! ModelTestEnumListInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "enumList")
            }
        }
        
        public var enumNullableList: ModelTestEnumListInput? {
            get {
                return graphQLMap["enumNullableList"] as! ModelTestEnumListInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "enumNullableList")
            }
        }
        
        public var nullableEnumList: ModelTestEnumListInput? {
            get {
                return graphQLMap["nullableEnumList"] as! ModelTestEnumListInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableEnumList")
            }
        }
        
        public var nullableEnumNullableList: ModelTestEnumListInput? {
            get {
                return graphQLMap["nullableEnumNullableList"] as! ModelTestEnumListInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "nullableEnumNullableList")
            }
        }
        
        public var and: [ModelEnumTestModelFilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelEnumTestModelFilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelEnumTestModelFilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelEnumTestModelFilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelEnumTestModelFilterInput? {
            get {
                return graphQLMap["not"] as! ModelEnumTestModelFilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public struct ModelNestedTypeTestModelFilterInput: GraphQLMapConvertible {
        public var graphQLMap: GraphQLMap
        
        public init(id: ModelIDInput? = nil, and: [ModelNestedTypeTestModelFilterInput?]? = nil, or: [ModelNestedTypeTestModelFilterInput?]? = nil, not: ModelNestedTypeTestModelFilterInput? = nil) {
            graphQLMap = ["id": id, "and": and, "or": or, "not": not]
        }
        
        public var id: ModelIDInput? {
            get {
                return graphQLMap["id"] as! ModelIDInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "id")
            }
        }
        
        public var and: [ModelNestedTypeTestModelFilterInput?]? {
            get {
                return graphQLMap["and"] as! [ModelNestedTypeTestModelFilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "and")
            }
        }
        
        public var or: [ModelNestedTypeTestModelFilterInput?]? {
            get {
                return graphQLMap["or"] as! [ModelNestedTypeTestModelFilterInput?]?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "or")
            }
        }
        
        public var not: ModelNestedTypeTestModelFilterInput? {
            get {
                return graphQLMap["not"] as! ModelNestedTypeTestModelFilterInput?
            }
            set {
                graphQLMap.updateValue(newValue, forKey: "not")
            }
        }
    }
    
    public final class CreatePostMutation: GraphQLMutation {
        public static let operationString =
        "mutation CreatePost($input: CreatePostInput!, $condition: ModelPostConditionInput) {\n  createPost(input: $input, condition: $condition) {\n    __typename\n    id\n    title\n    content\n    createdAt\n    updatedAt\n    draft\n    rating\n    status\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n}"
        
        public var input: CreatePostInput
        public var condition: ModelPostConditionInput?
        
        public init(input: CreatePostInput, condition: ModelPostConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createPost", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreatePost.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createPost: CreatePost? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createPost": createPost.flatMap { $0.snapshot }])
            }
            
            public var createPost: CreatePost? {
                get {
                    return (snapshot["createPost"] as? Snapshot).flatMap { CreatePost(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createPost")
                }
            }
            
            public struct CreatePost: GraphQLSelectionSet {
                public static let possibleTypes = ["Post"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .scalar(String.self)),
                    GraphQLField("draft", type: .scalar(Bool.self)),
                    GraphQLField("rating", type: .scalar(Double.self)),
                    GraphQLField("status", type: .scalar(PostStatus.self)),
                    GraphQLField("comments", type: .object(Comment.selections)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, content: String, createdAt: String, updatedAt: String? = nil, draft: Bool? = nil, rating: Double? = nil, status: PostStatus? = nil, comments: Comment? = nil) {
                    self.init(snapshot: ["__typename": "Post", "id": id, "title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status, "comments": comments.flatMap { $0.snapshot }])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String? {
                    get {
                        return snapshot["updatedAt"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public var draft: Bool? {
                    get {
                        return snapshot["draft"] as? Bool
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "draft")
                    }
                }
                
                public var rating: Double? {
                    get {
                        return snapshot["rating"] as? Double
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "rating")
                    }
                }
                
                public var status: PostStatus? {
                    get {
                        return snapshot["status"] as? PostStatus
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "status")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelCommentConnection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelCommentConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment", "id": id, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class UpdatePostMutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdatePost($input: UpdatePostInput!, $condition: ModelPostConditionInput) {\n  updatePost(input: $input, condition: $condition) {\n    __typename\n    id\n    title\n    content\n    createdAt\n    updatedAt\n    draft\n    rating\n    status\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n}"
        
        public var input: UpdatePostInput
        public var condition: ModelPostConditionInput?
        
        public init(input: UpdatePostInput, condition: ModelPostConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updatePost", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdatePost.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updatePost: UpdatePost? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updatePost": updatePost.flatMap { $0.snapshot }])
            }
            
            public var updatePost: UpdatePost? {
                get {
                    return (snapshot["updatePost"] as? Snapshot).flatMap { UpdatePost(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updatePost")
                }
            }
            
            public struct UpdatePost: GraphQLSelectionSet {
                public static let possibleTypes = ["Post"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .scalar(String.self)),
                    GraphQLField("draft", type: .scalar(Bool.self)),
                    GraphQLField("rating", type: .scalar(Double.self)),
                    GraphQLField("status", type: .scalar(PostStatus.self)),
                    GraphQLField("comments", type: .object(Comment.selections)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, content: String, createdAt: String, updatedAt: String? = nil, draft: Bool? = nil, rating: Double? = nil, status: PostStatus? = nil, comments: Comment? = nil) {
                    self.init(snapshot: ["__typename": "Post", "id": id, "title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status, "comments": comments.flatMap { $0.snapshot }])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String? {
                    get {
                        return snapshot["updatedAt"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public var draft: Bool? {
                    get {
                        return snapshot["draft"] as? Bool
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "draft")
                    }
                }
                
                public var rating: Double? {
                    get {
                        return snapshot["rating"] as? Double
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "rating")
                    }
                }
                
                public var status: PostStatus? {
                    get {
                        return snapshot["status"] as? PostStatus
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "status")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelCommentConnection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelCommentConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment", "id": id, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class DeletePostMutation: GraphQLMutation {
        public static let operationString =
        "mutation DeletePost($input: DeletePostInput!, $condition: ModelPostConditionInput) {\n  deletePost(input: $input, condition: $condition) {\n    __typename\n    id\n    title\n    content\n    createdAt\n    updatedAt\n    draft\n    rating\n    status\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n}"
        
        public var input: DeletePostInput
        public var condition: ModelPostConditionInput?
        
        public init(input: DeletePostInput, condition: ModelPostConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deletePost", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeletePost.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deletePost: DeletePost? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deletePost": deletePost.flatMap { $0.snapshot }])
            }
            
            public var deletePost: DeletePost? {
                get {
                    return (snapshot["deletePost"] as? Snapshot).flatMap { DeletePost(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deletePost")
                }
            }
            
            public struct DeletePost: GraphQLSelectionSet {
                public static let possibleTypes = ["Post"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .scalar(String.self)),
                    GraphQLField("draft", type: .scalar(Bool.self)),
                    GraphQLField("rating", type: .scalar(Double.self)),
                    GraphQLField("status", type: .scalar(PostStatus.self)),
                    GraphQLField("comments", type: .object(Comment.selections)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, content: String, createdAt: String, updatedAt: String? = nil, draft: Bool? = nil, rating: Double? = nil, status: PostStatus? = nil, comments: Comment? = nil) {
                    self.init(snapshot: ["__typename": "Post", "id": id, "title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status, "comments": comments.flatMap { $0.snapshot }])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String? {
                    get {
                        return snapshot["updatedAt"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public var draft: Bool? {
                    get {
                        return snapshot["draft"] as? Bool
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "draft")
                    }
                }
                
                public var rating: Double? {
                    get {
                        return snapshot["rating"] as? Double
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "rating")
                    }
                }
                
                public var status: PostStatus? {
                    get {
                        return snapshot["status"] as? PostStatus
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "status")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelCommentConnection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelCommentConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment", "id": id, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class CreateCommentMutation: GraphQLMutation {
        public static let operationString =
        "mutation CreateComment($input: CreateCommentInput!, $condition: ModelCommentConditionInput) {\n  createComment(input: $input, condition: $condition) {\n    __typename\n    id\n    content\n    createdAt\n    post {\n      __typename\n      id\n      title\n      content\n      createdAt\n      updatedAt\n      draft\n      rating\n      status\n      comments {\n        __typename\n        nextToken\n      }\n    }\n    updatedAt\n  }\n}"
        
        public var input: CreateCommentInput
        public var condition: ModelCommentConditionInput?
        
        public init(input: CreateCommentInput, condition: ModelCommentConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createComment", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateComment.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createComment: CreateComment? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createComment": createComment.flatMap { $0.snapshot }])
            }
            
            public var createComment: CreateComment? {
                get {
                    return (snapshot["createComment"] as? Snapshot).flatMap { CreateComment(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createComment")
                }
            }
            
            public struct CreateComment: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, content: String, createdAt: String, post: Post? = nil, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment", "id": id, "content": content, "createdAt": createdAt, "post": post.flatMap { $0.snapshot }, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("content", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .scalar(String.self)),
                        GraphQLField("draft", type: .scalar(Bool.self)),
                        GraphQLField("rating", type: .scalar(Double.self)),
                        GraphQLField("status", type: .scalar(PostStatus.self)),
                        GraphQLField("comments", type: .object(Comment.selections)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, content: String, createdAt: String, updatedAt: String? = nil, draft: Bool? = nil, rating: Double? = nil, status: PostStatus? = nil, comments: Comment? = nil) {
                        self.init(snapshot: ["__typename": "Post", "id": id, "title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status, "comments": comments.flatMap { $0.snapshot }])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var content: String {
                        get {
                            return snapshot["content"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "content")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String? {
                        get {
                            return snapshot["updatedAt"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public var draft: Bool? {
                        get {
                            return snapshot["draft"] as? Bool
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "draft")
                        }
                    }
                    
                    public var rating: Double? {
                        get {
                            return snapshot["rating"] as? Double
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "rating")
                        }
                    }
                    
                    public var status: PostStatus? {
                        get {
                            return snapshot["status"] as? PostStatus
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "status")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelCommentConnection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelCommentConnection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class UpdateCommentMutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdateComment($input: UpdateCommentInput!, $condition: ModelCommentConditionInput) {\n  updateComment(input: $input, condition: $condition) {\n    __typename\n    id\n    content\n    createdAt\n    post {\n      __typename\n      id\n      title\n      content\n      createdAt\n      updatedAt\n      draft\n      rating\n      status\n      comments {\n        __typename\n        nextToken\n      }\n    }\n    updatedAt\n  }\n}"
        
        public var input: UpdateCommentInput
        public var condition: ModelCommentConditionInput?
        
        public init(input: UpdateCommentInput, condition: ModelCommentConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updateComment", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateComment.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updateComment: UpdateComment? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updateComment": updateComment.flatMap { $0.snapshot }])
            }
            
            public var updateComment: UpdateComment? {
                get {
                    return (snapshot["updateComment"] as? Snapshot).flatMap { UpdateComment(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updateComment")
                }
            }
            
            public struct UpdateComment: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, content: String, createdAt: String, post: Post? = nil, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment", "id": id, "content": content, "createdAt": createdAt, "post": post.flatMap { $0.snapshot }, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("content", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .scalar(String.self)),
                        GraphQLField("draft", type: .scalar(Bool.self)),
                        GraphQLField("rating", type: .scalar(Double.self)),
                        GraphQLField("status", type: .scalar(PostStatus.self)),
                        GraphQLField("comments", type: .object(Comment.selections)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, content: String, createdAt: String, updatedAt: String? = nil, draft: Bool? = nil, rating: Double? = nil, status: PostStatus? = nil, comments: Comment? = nil) {
                        self.init(snapshot: ["__typename": "Post", "id": id, "title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status, "comments": comments.flatMap { $0.snapshot }])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var content: String {
                        get {
                            return snapshot["content"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "content")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String? {
                        get {
                            return snapshot["updatedAt"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public var draft: Bool? {
                        get {
                            return snapshot["draft"] as? Bool
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "draft")
                        }
                    }
                    
                    public var rating: Double? {
                        get {
                            return snapshot["rating"] as? Double
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "rating")
                        }
                    }
                    
                    public var status: PostStatus? {
                        get {
                            return snapshot["status"] as? PostStatus
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "status")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelCommentConnection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelCommentConnection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class DeleteCommentMutation: GraphQLMutation {
        public static let operationString =
        "mutation DeleteComment($input: DeleteCommentInput!, $condition: ModelCommentConditionInput) {\n  deleteComment(input: $input, condition: $condition) {\n    __typename\n    id\n    content\n    createdAt\n    post {\n      __typename\n      id\n      title\n      content\n      createdAt\n      updatedAt\n      draft\n      rating\n      status\n      comments {\n        __typename\n        nextToken\n      }\n    }\n    updatedAt\n  }\n}"
        
        public var input: DeleteCommentInput
        public var condition: ModelCommentConditionInput?
        
        public init(input: DeleteCommentInput, condition: ModelCommentConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deleteComment", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteComment.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deleteComment: DeleteComment? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deleteComment": deleteComment.flatMap { $0.snapshot }])
            }
            
            public var deleteComment: DeleteComment? {
                get {
                    return (snapshot["deleteComment"] as? Snapshot).flatMap { DeleteComment(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deleteComment")
                }
            }
            
            public struct DeleteComment: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, content: String, createdAt: String, post: Post? = nil, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment", "id": id, "content": content, "createdAt": createdAt, "post": post.flatMap { $0.snapshot }, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("content", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .scalar(String.self)),
                        GraphQLField("draft", type: .scalar(Bool.self)),
                        GraphQLField("rating", type: .scalar(Double.self)),
                        GraphQLField("status", type: .scalar(PostStatus.self)),
                        GraphQLField("comments", type: .object(Comment.selections)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, content: String, createdAt: String, updatedAt: String? = nil, draft: Bool? = nil, rating: Double? = nil, status: PostStatus? = nil, comments: Comment? = nil) {
                        self.init(snapshot: ["__typename": "Post", "id": id, "title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status, "comments": comments.flatMap { $0.snapshot }])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var content: String {
                        get {
                            return snapshot["content"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "content")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String? {
                        get {
                            return snapshot["updatedAt"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public var draft: Bool? {
                        get {
                            return snapshot["draft"] as? Bool
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "draft")
                        }
                    }
                    
                    public var rating: Double? {
                        get {
                            return snapshot["rating"] as? Double
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "rating")
                        }
                    }
                    
                    public var status: PostStatus? {
                        get {
                            return snapshot["status"] as? PostStatus
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "status")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelCommentConnection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelCommentConnection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class CreateProject1Mutation: GraphQLMutation {
        public static let operationString =
        "mutation CreateProject1($input: CreateProject1Input!, $condition: ModelProject1ConditionInput) {\n  createProject1(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: CreateProject1Input
        public var condition: ModelProject1ConditionInput?
        
        public init(input: CreateProject1Input, condition: ModelProject1ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createProject1", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateProject1.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createProject1: CreateProject1? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createProject1": createProject1.flatMap { $0.snapshot }])
            }
            
            public var createProject1: CreateProject1? {
                get {
                    return (snapshot["createProject1"] as? Snapshot).flatMap { CreateProject1(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createProject1")
                }
            }
            
            public struct CreateProject1: GraphQLSelectionSet {
                public static let possibleTypes = ["Project1"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .scalar(String.self)),
                    GraphQLField("team", type: .object(Team.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String? = nil, team: Team? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Project1", "id": id, "name": name, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String? {
                    get {
                        return snapshot["name"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var team: Team? {
                    get {
                        return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "team")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Team: GraphQLSelectionSet {
                    public static let possibleTypes = ["Team1"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Team1", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class UpdateProject1Mutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdateProject1($input: UpdateProject1Input!, $condition: ModelProject1ConditionInput) {\n  updateProject1(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: UpdateProject1Input
        public var condition: ModelProject1ConditionInput?
        
        public init(input: UpdateProject1Input, condition: ModelProject1ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updateProject1", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateProject1.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updateProject1: UpdateProject1? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updateProject1": updateProject1.flatMap { $0.snapshot }])
            }
            
            public var updateProject1: UpdateProject1? {
                get {
                    return (snapshot["updateProject1"] as? Snapshot).flatMap { UpdateProject1(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updateProject1")
                }
            }
            
            public struct UpdateProject1: GraphQLSelectionSet {
                public static let possibleTypes = ["Project1"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .scalar(String.self)),
                    GraphQLField("team", type: .object(Team.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String? = nil, team: Team? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Project1", "id": id, "name": name, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String? {
                    get {
                        return snapshot["name"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var team: Team? {
                    get {
                        return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "team")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Team: GraphQLSelectionSet {
                    public static let possibleTypes = ["Team1"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Team1", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class DeleteProject1Mutation: GraphQLMutation {
        public static let operationString =
        "mutation DeleteProject1($input: DeleteProject1Input!, $condition: ModelProject1ConditionInput) {\n  deleteProject1(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: DeleteProject1Input
        public var condition: ModelProject1ConditionInput?
        
        public init(input: DeleteProject1Input, condition: ModelProject1ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deleteProject1", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteProject1.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deleteProject1: DeleteProject1? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deleteProject1": deleteProject1.flatMap { $0.snapshot }])
            }
            
            public var deleteProject1: DeleteProject1? {
                get {
                    return (snapshot["deleteProject1"] as? Snapshot).flatMap { DeleteProject1(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deleteProject1")
                }
            }
            
            public struct DeleteProject1: GraphQLSelectionSet {
                public static let possibleTypes = ["Project1"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .scalar(String.self)),
                    GraphQLField("team", type: .object(Team.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String? = nil, team: Team? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Project1", "id": id, "name": name, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String? {
                    get {
                        return snapshot["name"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var team: Team? {
                    get {
                        return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "team")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Team: GraphQLSelectionSet {
                    public static let possibleTypes = ["Team1"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Team1", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class CreateTeam1Mutation: GraphQLMutation {
        public static let operationString =
        "mutation CreateTeam1($input: CreateTeam1Input!, $condition: ModelTeam1ConditionInput) {\n  createTeam1(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: CreateTeam1Input
        public var condition: ModelTeam1ConditionInput?
        
        public init(input: CreateTeam1Input, condition: ModelTeam1ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createTeam1", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateTeam1.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createTeam1: CreateTeam1? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createTeam1": createTeam1.flatMap { $0.snapshot }])
            }
            
            public var createTeam1: CreateTeam1? {
                get {
                    return (snapshot["createTeam1"] as? Snapshot).flatMap { CreateTeam1(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createTeam1")
                }
            }
            
            public struct CreateTeam1: GraphQLSelectionSet {
                public static let possibleTypes = ["Team1"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Team1", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class UpdateTeam1Mutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdateTeam1($input: UpdateTeam1Input!, $condition: ModelTeam1ConditionInput) {\n  updateTeam1(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: UpdateTeam1Input
        public var condition: ModelTeam1ConditionInput?
        
        public init(input: UpdateTeam1Input, condition: ModelTeam1ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updateTeam1", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateTeam1.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updateTeam1: UpdateTeam1? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updateTeam1": updateTeam1.flatMap { $0.snapshot }])
            }
            
            public var updateTeam1: UpdateTeam1? {
                get {
                    return (snapshot["updateTeam1"] as? Snapshot).flatMap { UpdateTeam1(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updateTeam1")
                }
            }
            
            public struct UpdateTeam1: GraphQLSelectionSet {
                public static let possibleTypes = ["Team1"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Team1", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class DeleteTeam1Mutation: GraphQLMutation {
        public static let operationString =
        "mutation DeleteTeam1($input: DeleteTeam1Input!, $condition: ModelTeam1ConditionInput) {\n  deleteTeam1(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: DeleteTeam1Input
        public var condition: ModelTeam1ConditionInput?
        
        public init(input: DeleteTeam1Input, condition: ModelTeam1ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deleteTeam1", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteTeam1.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deleteTeam1: DeleteTeam1? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deleteTeam1": deleteTeam1.flatMap { $0.snapshot }])
            }
            
            public var deleteTeam1: DeleteTeam1? {
                get {
                    return (snapshot["deleteTeam1"] as? Snapshot).flatMap { DeleteTeam1(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deleteTeam1")
                }
            }
            
            public struct DeleteTeam1: GraphQLSelectionSet {
                public static let possibleTypes = ["Team1"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Team1", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class CreateProject2Mutation: GraphQLMutation {
        public static let operationString =
        "mutation CreateProject2($input: CreateProject2Input!, $condition: ModelProject2ConditionInput) {\n  createProject2(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    teamID\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: CreateProject2Input
        public var condition: ModelProject2ConditionInput?
        
        public init(input: CreateProject2Input, condition: ModelProject2ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createProject2", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateProject2.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createProject2: CreateProject2? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createProject2": createProject2.flatMap { $0.snapshot }])
            }
            
            public var createProject2: CreateProject2? {
                get {
                    return (snapshot["createProject2"] as? Snapshot).flatMap { CreateProject2(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createProject2")
                }
            }
            
            public struct CreateProject2: GraphQLSelectionSet {
                public static let possibleTypes = ["Project2"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .scalar(String.self)),
                    GraphQLField("teamID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("team", type: .object(Team.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String? = nil, teamId: GraphQLID, team: Team? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Project2", "id": id, "name": name, "teamID": teamId, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String? {
                    get {
                        return snapshot["name"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var teamId: GraphQLID {
                    get {
                        return snapshot["teamID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "teamID")
                    }
                }
                
                public var team: Team? {
                    get {
                        return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "team")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Team: GraphQLSelectionSet {
                    public static let possibleTypes = ["Team2"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Team2", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class UpdateProject2Mutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdateProject2($input: UpdateProject2Input!, $condition: ModelProject2ConditionInput) {\n  updateProject2(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    teamID\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: UpdateProject2Input
        public var condition: ModelProject2ConditionInput?
        
        public init(input: UpdateProject2Input, condition: ModelProject2ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updateProject2", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateProject2.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updateProject2: UpdateProject2? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updateProject2": updateProject2.flatMap { $0.snapshot }])
            }
            
            public var updateProject2: UpdateProject2? {
                get {
                    return (snapshot["updateProject2"] as? Snapshot).flatMap { UpdateProject2(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updateProject2")
                }
            }
            
            public struct UpdateProject2: GraphQLSelectionSet {
                public static let possibleTypes = ["Project2"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .scalar(String.self)),
                    GraphQLField("teamID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("team", type: .object(Team.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String? = nil, teamId: GraphQLID, team: Team? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Project2", "id": id, "name": name, "teamID": teamId, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String? {
                    get {
                        return snapshot["name"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var teamId: GraphQLID {
                    get {
                        return snapshot["teamID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "teamID")
                    }
                }
                
                public var team: Team? {
                    get {
                        return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "team")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Team: GraphQLSelectionSet {
                    public static let possibleTypes = ["Team2"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Team2", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class DeleteProject2Mutation: GraphQLMutation {
        public static let operationString =
        "mutation DeleteProject2($input: DeleteProject2Input!, $condition: ModelProject2ConditionInput) {\n  deleteProject2(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    teamID\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: DeleteProject2Input
        public var condition: ModelProject2ConditionInput?
        
        public init(input: DeleteProject2Input, condition: ModelProject2ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deleteProject2", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteProject2.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deleteProject2: DeleteProject2? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deleteProject2": deleteProject2.flatMap { $0.snapshot }])
            }
            
            public var deleteProject2: DeleteProject2? {
                get {
                    return (snapshot["deleteProject2"] as? Snapshot).flatMap { DeleteProject2(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deleteProject2")
                }
            }
            
            public struct DeleteProject2: GraphQLSelectionSet {
                public static let possibleTypes = ["Project2"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .scalar(String.self)),
                    GraphQLField("teamID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("team", type: .object(Team.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String? = nil, teamId: GraphQLID, team: Team? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Project2", "id": id, "name": name, "teamID": teamId, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String? {
                    get {
                        return snapshot["name"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var teamId: GraphQLID {
                    get {
                        return snapshot["teamID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "teamID")
                    }
                }
                
                public var team: Team? {
                    get {
                        return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "team")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Team: GraphQLSelectionSet {
                    public static let possibleTypes = ["Team2"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Team2", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class CreateTeam2Mutation: GraphQLMutation {
        public static let operationString =
        "mutation CreateTeam2($input: CreateTeam2Input!, $condition: ModelTeam2ConditionInput) {\n  createTeam2(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: CreateTeam2Input
        public var condition: ModelTeam2ConditionInput?
        
        public init(input: CreateTeam2Input, condition: ModelTeam2ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createTeam2", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateTeam2.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createTeam2: CreateTeam2? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createTeam2": createTeam2.flatMap { $0.snapshot }])
            }
            
            public var createTeam2: CreateTeam2? {
                get {
                    return (snapshot["createTeam2"] as? Snapshot).flatMap { CreateTeam2(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createTeam2")
                }
            }
            
            public struct CreateTeam2: GraphQLSelectionSet {
                public static let possibleTypes = ["Team2"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Team2", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class UpdateTeam2Mutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdateTeam2($input: UpdateTeam2Input!, $condition: ModelTeam2ConditionInput) {\n  updateTeam2(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: UpdateTeam2Input
        public var condition: ModelTeam2ConditionInput?
        
        public init(input: UpdateTeam2Input, condition: ModelTeam2ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updateTeam2", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateTeam2.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updateTeam2: UpdateTeam2? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updateTeam2": updateTeam2.flatMap { $0.snapshot }])
            }
            
            public var updateTeam2: UpdateTeam2? {
                get {
                    return (snapshot["updateTeam2"] as? Snapshot).flatMap { UpdateTeam2(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updateTeam2")
                }
            }
            
            public struct UpdateTeam2: GraphQLSelectionSet {
                public static let possibleTypes = ["Team2"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Team2", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class DeleteTeam2Mutation: GraphQLMutation {
        public static let operationString =
        "mutation DeleteTeam2($input: DeleteTeam2Input!, $condition: ModelTeam2ConditionInput) {\n  deleteTeam2(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: DeleteTeam2Input
        public var condition: ModelTeam2ConditionInput?
        
        public init(input: DeleteTeam2Input, condition: ModelTeam2ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deleteTeam2", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteTeam2.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deleteTeam2: DeleteTeam2? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deleteTeam2": deleteTeam2.flatMap { $0.snapshot }])
            }
            
            public var deleteTeam2: DeleteTeam2? {
                get {
                    return (snapshot["deleteTeam2"] as? Snapshot).flatMap { DeleteTeam2(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deleteTeam2")
                }
            }
            
            public struct DeleteTeam2: GraphQLSelectionSet {
                public static let possibleTypes = ["Team2"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Team2", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class CreatePost3Mutation: GraphQLMutation {
        public static let operationString =
        "mutation CreatePost3($input: CreatePost3Input!, $condition: ModelPost3ConditionInput) {\n  createPost3(input: $input, condition: $condition) {\n    __typename\n    id\n    title\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: CreatePost3Input
        public var condition: ModelPost3ConditionInput?
        
        public init(input: CreatePost3Input, condition: ModelPost3ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createPost3", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreatePost3.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createPost3: CreatePost3? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createPost3": createPost3.flatMap { $0.snapshot }])
            }
            
            public var createPost3: CreatePost3? {
                get {
                    return (snapshot["createPost3"] as? Snapshot).flatMap { CreatePost3(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createPost3")
                }
            }
            
            public struct CreatePost3: GraphQLSelectionSet {
                public static let possibleTypes = ["Post3"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post3", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment3Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment3Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment3"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment3", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class UpdatePost3Mutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdatePost3($input: UpdatePost3Input!, $condition: ModelPost3ConditionInput) {\n  updatePost3(input: $input, condition: $condition) {\n    __typename\n    id\n    title\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: UpdatePost3Input
        public var condition: ModelPost3ConditionInput?
        
        public init(input: UpdatePost3Input, condition: ModelPost3ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updatePost3", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdatePost3.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updatePost3: UpdatePost3? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updatePost3": updatePost3.flatMap { $0.snapshot }])
            }
            
            public var updatePost3: UpdatePost3? {
                get {
                    return (snapshot["updatePost3"] as? Snapshot).flatMap { UpdatePost3(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updatePost3")
                }
            }
            
            public struct UpdatePost3: GraphQLSelectionSet {
                public static let possibleTypes = ["Post3"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post3", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment3Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment3Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment3"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment3", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class DeletePost3Mutation: GraphQLMutation {
        public static let operationString =
        "mutation DeletePost3($input: DeletePost3Input!, $condition: ModelPost3ConditionInput) {\n  deletePost3(input: $input, condition: $condition) {\n    __typename\n    id\n    title\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: DeletePost3Input
        public var condition: ModelPost3ConditionInput?
        
        public init(input: DeletePost3Input, condition: ModelPost3ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deletePost3", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeletePost3.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deletePost3: DeletePost3? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deletePost3": deletePost3.flatMap { $0.snapshot }])
            }
            
            public var deletePost3: DeletePost3? {
                get {
                    return (snapshot["deletePost3"] as? Snapshot).flatMap { DeletePost3(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deletePost3")
                }
            }
            
            public struct DeletePost3: GraphQLSelectionSet {
                public static let possibleTypes = ["Post3"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post3", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment3Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment3Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment3"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment3", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class CreateComment3Mutation: GraphQLMutation {
        public static let operationString =
        "mutation CreateComment3($input: CreateComment3Input!, $condition: ModelComment3ConditionInput) {\n  createComment3(input: $input, condition: $condition) {\n    __typename\n    id\n    postID\n    content\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: CreateComment3Input
        public var condition: ModelComment3ConditionInput?
        
        public init(input: CreateComment3Input, condition: ModelComment3ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createComment3", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateComment3.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createComment3: CreateComment3? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createComment3": createComment3.flatMap { $0.snapshot }])
            }
            
            public var createComment3: CreateComment3? {
                get {
                    return (snapshot["createComment3"] as? Snapshot).flatMap { CreateComment3(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createComment3")
                }
            }
            
            public struct CreateComment3: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment3"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment3", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class UpdateComment3Mutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdateComment3($input: UpdateComment3Input!, $condition: ModelComment3ConditionInput) {\n  updateComment3(input: $input, condition: $condition) {\n    __typename\n    id\n    postID\n    content\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: UpdateComment3Input
        public var condition: ModelComment3ConditionInput?
        
        public init(input: UpdateComment3Input, condition: ModelComment3ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updateComment3", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateComment3.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updateComment3: UpdateComment3? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updateComment3": updateComment3.flatMap { $0.snapshot }])
            }
            
            public var updateComment3: UpdateComment3? {
                get {
                    return (snapshot["updateComment3"] as? Snapshot).flatMap { UpdateComment3(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updateComment3")
                }
            }
            
            public struct UpdateComment3: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment3"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment3", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class DeleteComment3Mutation: GraphQLMutation {
        public static let operationString =
        "mutation DeleteComment3($input: DeleteComment3Input!, $condition: ModelComment3ConditionInput) {\n  deleteComment3(input: $input, condition: $condition) {\n    __typename\n    id\n    postID\n    content\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: DeleteComment3Input
        public var condition: ModelComment3ConditionInput?
        
        public init(input: DeleteComment3Input, condition: ModelComment3ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deleteComment3", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteComment3.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deleteComment3: DeleteComment3? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deleteComment3": deleteComment3.flatMap { $0.snapshot }])
            }
            
            public var deleteComment3: DeleteComment3? {
                get {
                    return (snapshot["deleteComment3"] as? Snapshot).flatMap { DeleteComment3(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deleteComment3")
                }
            }
            
            public struct DeleteComment3: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment3"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment3", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class CreatePost4Mutation: GraphQLMutation {
        public static let operationString =
        "mutation CreatePost4($input: CreatePost4Input!, $condition: ModelPost4ConditionInput) {\n  createPost4(input: $input, condition: $condition) {\n    __typename\n    id\n    title\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: CreatePost4Input
        public var condition: ModelPost4ConditionInput?
        
        public init(input: CreatePost4Input, condition: ModelPost4ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createPost4", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreatePost4.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createPost4: CreatePost4? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createPost4": createPost4.flatMap { $0.snapshot }])
            }
            
            public var createPost4: CreatePost4? {
                get {
                    return (snapshot["createPost4"] as? Snapshot).flatMap { CreatePost4(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createPost4")
                }
            }
            
            public struct CreatePost4: GraphQLSelectionSet {
                public static let possibleTypes = ["Post4"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post4", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment4Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment4Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment4"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment4", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class UpdatePost4Mutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdatePost4($input: UpdatePost4Input!, $condition: ModelPost4ConditionInput) {\n  updatePost4(input: $input, condition: $condition) {\n    __typename\n    id\n    title\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: UpdatePost4Input
        public var condition: ModelPost4ConditionInput?
        
        public init(input: UpdatePost4Input, condition: ModelPost4ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updatePost4", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdatePost4.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updatePost4: UpdatePost4? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updatePost4": updatePost4.flatMap { $0.snapshot }])
            }
            
            public var updatePost4: UpdatePost4? {
                get {
                    return (snapshot["updatePost4"] as? Snapshot).flatMap { UpdatePost4(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updatePost4")
                }
            }
            
            public struct UpdatePost4: GraphQLSelectionSet {
                public static let possibleTypes = ["Post4"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post4", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment4Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment4Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment4"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment4", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class DeletePost4Mutation: GraphQLMutation {
        public static let operationString =
        "mutation DeletePost4($input: DeletePost4Input!, $condition: ModelPost4ConditionInput) {\n  deletePost4(input: $input, condition: $condition) {\n    __typename\n    id\n    title\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: DeletePost4Input
        public var condition: ModelPost4ConditionInput?
        
        public init(input: DeletePost4Input, condition: ModelPost4ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deletePost4", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeletePost4.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deletePost4: DeletePost4? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deletePost4": deletePost4.flatMap { $0.snapshot }])
            }
            
            public var deletePost4: DeletePost4? {
                get {
                    return (snapshot["deletePost4"] as? Snapshot).flatMap { DeletePost4(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deletePost4")
                }
            }
            
            public struct DeletePost4: GraphQLSelectionSet {
                public static let possibleTypes = ["Post4"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post4", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment4Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment4Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment4"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment4", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class CreateComment4Mutation: GraphQLMutation {
        public static let operationString =
        "mutation CreateComment4($input: CreateComment4Input!, $condition: ModelComment4ConditionInput) {\n  createComment4(input: $input, condition: $condition) {\n    __typename\n    id\n    postID\n    content\n    post {\n      __typename\n      id\n      title\n      comments {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: CreateComment4Input
        public var condition: ModelComment4ConditionInput?
        
        public init(input: CreateComment4Input, condition: ModelComment4ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createComment4", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateComment4.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createComment4: CreateComment4? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createComment4": createComment4.flatMap { $0.snapshot }])
            }
            
            public var createComment4: CreateComment4? {
                get {
                    return (snapshot["createComment4"] as? Snapshot).flatMap { CreateComment4(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createComment4")
                }
            }
            
            public struct CreateComment4: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment4"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, content: String, post: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment4", "id": id, "postID": postId, "content": content, "post": post.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post4"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("comments", type: .object(Comment.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post4", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelComment4Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelComment4Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class UpdateComment4Mutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdateComment4($input: UpdateComment4Input!, $condition: ModelComment4ConditionInput) {\n  updateComment4(input: $input, condition: $condition) {\n    __typename\n    id\n    postID\n    content\n    post {\n      __typename\n      id\n      title\n      comments {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: UpdateComment4Input
        public var condition: ModelComment4ConditionInput?
        
        public init(input: UpdateComment4Input, condition: ModelComment4ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updateComment4", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateComment4.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updateComment4: UpdateComment4? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updateComment4": updateComment4.flatMap { $0.snapshot }])
            }
            
            public var updateComment4: UpdateComment4? {
                get {
                    return (snapshot["updateComment4"] as? Snapshot).flatMap { UpdateComment4(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updateComment4")
                }
            }
            
            public struct UpdateComment4: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment4"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, content: String, post: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment4", "id": id, "postID": postId, "content": content, "post": post.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post4"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("comments", type: .object(Comment.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post4", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelComment4Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelComment4Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class DeleteComment4Mutation: GraphQLMutation {
        public static let operationString =
        "mutation DeleteComment4($input: DeleteComment4Input!, $condition: ModelComment4ConditionInput) {\n  deleteComment4(input: $input, condition: $condition) {\n    __typename\n    id\n    postID\n    content\n    post {\n      __typename\n      id\n      title\n      comments {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: DeleteComment4Input
        public var condition: ModelComment4ConditionInput?
        
        public init(input: DeleteComment4Input, condition: ModelComment4ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deleteComment4", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteComment4.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deleteComment4: DeleteComment4? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deleteComment4": deleteComment4.flatMap { $0.snapshot }])
            }
            
            public var deleteComment4: DeleteComment4? {
                get {
                    return (snapshot["deleteComment4"] as? Snapshot).flatMap { DeleteComment4(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deleteComment4")
                }
            }
            
            public struct DeleteComment4: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment4"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, content: String, post: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment4", "id": id, "postID": postId, "content": content, "post": post.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post4"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("comments", type: .object(Comment.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post4", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelComment4Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelComment4Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class CreatePost5Mutation: GraphQLMutation {
        public static let operationString =
        "mutation CreatePost5($input: CreatePost5Input!, $condition: ModelPost5ConditionInput) {\n  createPost5(input: $input, condition: $condition) {\n    __typename\n    id\n    title\n    editors {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        editorID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: CreatePost5Input
        public var condition: ModelPost5ConditionInput?
        
        public init(input: CreatePost5Input, condition: ModelPost5ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createPost5", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreatePost5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createPost5: CreatePost5? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createPost5": createPost5.flatMap { $0.snapshot }])
            }
            
            public var createPost5: CreatePost5? {
                get {
                    return (snapshot["createPost5"] as? Snapshot).flatMap { CreatePost5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createPost5")
                }
            }
            
            public struct CreatePost5: GraphQLSelectionSet {
                public static let possibleTypes = ["Post5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("editors", type: .object(Editor.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, editors: Editor? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post5", "id": id, "title": title, "editors": editors.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var editors: Editor? {
                    get {
                        return (snapshot["editors"] as? Snapshot).flatMap { Editor(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "editors")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Editor: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPostEditor5Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["PostEditor5"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var editorId: GraphQLID {
                            get {
                                return snapshot["editorID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "editorID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class UpdatePost5Mutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdatePost5($input: UpdatePost5Input!, $condition: ModelPost5ConditionInput) {\n  updatePost5(input: $input, condition: $condition) {\n    __typename\n    id\n    title\n    editors {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        editorID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: UpdatePost5Input
        public var condition: ModelPost5ConditionInput?
        
        public init(input: UpdatePost5Input, condition: ModelPost5ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updatePost5", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdatePost5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updatePost5: UpdatePost5? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updatePost5": updatePost5.flatMap { $0.snapshot }])
            }
            
            public var updatePost5: UpdatePost5? {
                get {
                    return (snapshot["updatePost5"] as? Snapshot).flatMap { UpdatePost5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updatePost5")
                }
            }
            
            public struct UpdatePost5: GraphQLSelectionSet {
                public static let possibleTypes = ["Post5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("editors", type: .object(Editor.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, editors: Editor? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post5", "id": id, "title": title, "editors": editors.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var editors: Editor? {
                    get {
                        return (snapshot["editors"] as? Snapshot).flatMap { Editor(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "editors")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Editor: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPostEditor5Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["PostEditor5"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var editorId: GraphQLID {
                            get {
                                return snapshot["editorID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "editorID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class DeletePost5Mutation: GraphQLMutation {
        public static let operationString =
        "mutation DeletePost5($input: DeletePost5Input!, $condition: ModelPost5ConditionInput) {\n  deletePost5(input: $input, condition: $condition) {\n    __typename\n    id\n    title\n    editors {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        editorID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: DeletePost5Input
        public var condition: ModelPost5ConditionInput?
        
        public init(input: DeletePost5Input, condition: ModelPost5ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deletePost5", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeletePost5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deletePost5: DeletePost5? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deletePost5": deletePost5.flatMap { $0.snapshot }])
            }
            
            public var deletePost5: DeletePost5? {
                get {
                    return (snapshot["deletePost5"] as? Snapshot).flatMap { DeletePost5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deletePost5")
                }
            }
            
            public struct DeletePost5: GraphQLSelectionSet {
                public static let possibleTypes = ["Post5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("editors", type: .object(Editor.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, editors: Editor? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post5", "id": id, "title": title, "editors": editors.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var editors: Editor? {
                    get {
                        return (snapshot["editors"] as? Snapshot).flatMap { Editor(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "editors")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Editor: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPostEditor5Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["PostEditor5"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var editorId: GraphQLID {
                            get {
                                return snapshot["editorID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "editorID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class CreatePostEditor5Mutation: GraphQLMutation {
        public static let operationString =
        "mutation CreatePostEditor5($input: CreatePostEditor5Input!, $condition: ModelPostEditor5ConditionInput) {\n  createPostEditor5(input: $input, condition: $condition) {\n    __typename\n    id\n    postID\n    editorID\n    post {\n      __typename\n      id\n      title\n      editors {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    editor {\n      __typename\n      id\n      username\n      posts {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: CreatePostEditor5Input
        public var condition: ModelPostEditor5ConditionInput?
        
        public init(input: CreatePostEditor5Input, condition: ModelPostEditor5ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createPostEditor5", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreatePostEditor5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createPostEditor5: CreatePostEditor5? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createPostEditor5": createPostEditor5.flatMap { $0.snapshot }])
            }
            
            public var createPostEditor5: CreatePostEditor5? {
                get {
                    return (snapshot["createPostEditor5"] as? Snapshot).flatMap { CreatePostEditor5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createPostEditor5")
                }
            }
            
            public struct CreatePostEditor5: GraphQLSelectionSet {
                public static let possibleTypes = ["PostEditor5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("post", type: .nonNull(.object(Post.selections))),
                    GraphQLField("editor", type: .nonNull(.object(Editor.selections))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, post: Post, editor: Editor, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "post": post.snapshot, "editor": editor.snapshot, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var editorId: GraphQLID {
                    get {
                        return snapshot["editorID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "editorID")
                    }
                }
                
                public var post: Post {
                    get {
                        return Post(snapshot: snapshot["post"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "post")
                    }
                }
                
                public var editor: Editor {
                    get {
                        return Editor(snapshot: snapshot["editor"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "editor")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post5"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("editors", type: .object(Editor.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, editors: Editor? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post5", "id": id, "title": title, "editors": editors.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var editors: Editor? {
                        get {
                            return (snapshot["editors"] as? Snapshot).flatMap { Editor(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "editors")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Editor: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPostEditor5Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
                
                public struct Editor: GraphQLSelectionSet {
                    public static let possibleTypes = ["User5"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("username", type: .nonNull(.scalar(String.self))),
                        GraphQLField("posts", type: .object(Post.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, username: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "User5", "id": id, "username": username, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var username: String {
                        get {
                            return snapshot["username"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "username")
                        }
                    }
                    
                    public var posts: Post? {
                        get {
                            return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPostEditor5Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class UpdatePostEditor5Mutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdatePostEditor5($input: UpdatePostEditor5Input!, $condition: ModelPostEditor5ConditionInput) {\n  updatePostEditor5(input: $input, condition: $condition) {\n    __typename\n    id\n    postID\n    editorID\n    post {\n      __typename\n      id\n      title\n      editors {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    editor {\n      __typename\n      id\n      username\n      posts {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: UpdatePostEditor5Input
        public var condition: ModelPostEditor5ConditionInput?
        
        public init(input: UpdatePostEditor5Input, condition: ModelPostEditor5ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updatePostEditor5", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdatePostEditor5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updatePostEditor5: UpdatePostEditor5? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updatePostEditor5": updatePostEditor5.flatMap { $0.snapshot }])
            }
            
            public var updatePostEditor5: UpdatePostEditor5? {
                get {
                    return (snapshot["updatePostEditor5"] as? Snapshot).flatMap { UpdatePostEditor5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updatePostEditor5")
                }
            }
            
            public struct UpdatePostEditor5: GraphQLSelectionSet {
                public static let possibleTypes = ["PostEditor5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("post", type: .nonNull(.object(Post.selections))),
                    GraphQLField("editor", type: .nonNull(.object(Editor.selections))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, post: Post, editor: Editor, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "post": post.snapshot, "editor": editor.snapshot, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var editorId: GraphQLID {
                    get {
                        return snapshot["editorID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "editorID")
                    }
                }
                
                public var post: Post {
                    get {
                        return Post(snapshot: snapshot["post"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "post")
                    }
                }
                
                public var editor: Editor {
                    get {
                        return Editor(snapshot: snapshot["editor"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "editor")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post5"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("editors", type: .object(Editor.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, editors: Editor? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post5", "id": id, "title": title, "editors": editors.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var editors: Editor? {
                        get {
                            return (snapshot["editors"] as? Snapshot).flatMap { Editor(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "editors")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Editor: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPostEditor5Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
                
                public struct Editor: GraphQLSelectionSet {
                    public static let possibleTypes = ["User5"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("username", type: .nonNull(.scalar(String.self))),
                        GraphQLField("posts", type: .object(Post.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, username: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "User5", "id": id, "username": username, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var username: String {
                        get {
                            return snapshot["username"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "username")
                        }
                    }
                    
                    public var posts: Post? {
                        get {
                            return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPostEditor5Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class DeletePostEditor5Mutation: GraphQLMutation {
        public static let operationString =
        "mutation DeletePostEditor5($input: DeletePostEditor5Input!, $condition: ModelPostEditor5ConditionInput) {\n  deletePostEditor5(input: $input, condition: $condition) {\n    __typename\n    id\n    postID\n    editorID\n    post {\n      __typename\n      id\n      title\n      editors {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    editor {\n      __typename\n      id\n      username\n      posts {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: DeletePostEditor5Input
        public var condition: ModelPostEditor5ConditionInput?
        
        public init(input: DeletePostEditor5Input, condition: ModelPostEditor5ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deletePostEditor5", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeletePostEditor5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deletePostEditor5: DeletePostEditor5? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deletePostEditor5": deletePostEditor5.flatMap { $0.snapshot }])
            }
            
            public var deletePostEditor5: DeletePostEditor5? {
                get {
                    return (snapshot["deletePostEditor5"] as? Snapshot).flatMap { DeletePostEditor5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deletePostEditor5")
                }
            }
            
            public struct DeletePostEditor5: GraphQLSelectionSet {
                public static let possibleTypes = ["PostEditor5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("post", type: .nonNull(.object(Post.selections))),
                    GraphQLField("editor", type: .nonNull(.object(Editor.selections))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, post: Post, editor: Editor, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "post": post.snapshot, "editor": editor.snapshot, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var editorId: GraphQLID {
                    get {
                        return snapshot["editorID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "editorID")
                    }
                }
                
                public var post: Post {
                    get {
                        return Post(snapshot: snapshot["post"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "post")
                    }
                }
                
                public var editor: Editor {
                    get {
                        return Editor(snapshot: snapshot["editor"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "editor")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post5"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("editors", type: .object(Editor.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, editors: Editor? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post5", "id": id, "title": title, "editors": editors.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var editors: Editor? {
                        get {
                            return (snapshot["editors"] as? Snapshot).flatMap { Editor(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "editors")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Editor: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPostEditor5Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
                
                public struct Editor: GraphQLSelectionSet {
                    public static let possibleTypes = ["User5"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("username", type: .nonNull(.scalar(String.self))),
                        GraphQLField("posts", type: .object(Post.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, username: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "User5", "id": id, "username": username, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var username: String {
                        get {
                            return snapshot["username"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "username")
                        }
                    }
                    
                    public var posts: Post? {
                        get {
                            return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPostEditor5Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class CreateUser5Mutation: GraphQLMutation {
        public static let operationString =
        "mutation CreateUser5($input: CreateUser5Input!, $condition: ModelUser5ConditionInput) {\n  createUser5(input: $input, condition: $condition) {\n    __typename\n    id\n    username\n    posts {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        editorID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: CreateUser5Input
        public var condition: ModelUser5ConditionInput?
        
        public init(input: CreateUser5Input, condition: ModelUser5ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createUser5", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateUser5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createUser5: CreateUser5? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createUser5": createUser5.flatMap { $0.snapshot }])
            }
            
            public var createUser5: CreateUser5? {
                get {
                    return (snapshot["createUser5"] as? Snapshot).flatMap { CreateUser5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createUser5")
                }
            }
            
            public struct CreateUser5: GraphQLSelectionSet {
                public static let possibleTypes = ["User5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("username", type: .nonNull(.scalar(String.self))),
                    GraphQLField("posts", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, username: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "User5", "id": id, "username": username, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var username: String {
                    get {
                        return snapshot["username"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "username")
                    }
                }
                
                public var posts: Post? {
                    get {
                        return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPostEditor5Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["PostEditor5"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var editorId: GraphQLID {
                            get {
                                return snapshot["editorID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "editorID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class UpdateUser5Mutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdateUser5($input: UpdateUser5Input!, $condition: ModelUser5ConditionInput) {\n  updateUser5(input: $input, condition: $condition) {\n    __typename\n    id\n    username\n    posts {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        editorID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: UpdateUser5Input
        public var condition: ModelUser5ConditionInput?
        
        public init(input: UpdateUser5Input, condition: ModelUser5ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updateUser5", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateUser5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updateUser5: UpdateUser5? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updateUser5": updateUser5.flatMap { $0.snapshot }])
            }
            
            public var updateUser5: UpdateUser5? {
                get {
                    return (snapshot["updateUser5"] as? Snapshot).flatMap { UpdateUser5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updateUser5")
                }
            }
            
            public struct UpdateUser5: GraphQLSelectionSet {
                public static let possibleTypes = ["User5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("username", type: .nonNull(.scalar(String.self))),
                    GraphQLField("posts", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, username: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "User5", "id": id, "username": username, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var username: String {
                    get {
                        return snapshot["username"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "username")
                    }
                }
                
                public var posts: Post? {
                    get {
                        return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPostEditor5Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["PostEditor5"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var editorId: GraphQLID {
                            get {
                                return snapshot["editorID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "editorID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class DeleteUser5Mutation: GraphQLMutation {
        public static let operationString =
        "mutation DeleteUser5($input: DeleteUser5Input!, $condition: ModelUser5ConditionInput) {\n  deleteUser5(input: $input, condition: $condition) {\n    __typename\n    id\n    username\n    posts {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        editorID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: DeleteUser5Input
        public var condition: ModelUser5ConditionInput?
        
        public init(input: DeleteUser5Input, condition: ModelUser5ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deleteUser5", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteUser5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deleteUser5: DeleteUser5? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deleteUser5": deleteUser5.flatMap { $0.snapshot }])
            }
            
            public var deleteUser5: DeleteUser5? {
                get {
                    return (snapshot["deleteUser5"] as? Snapshot).flatMap { DeleteUser5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deleteUser5")
                }
            }
            
            public struct DeleteUser5: GraphQLSelectionSet {
                public static let possibleTypes = ["User5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("username", type: .nonNull(.scalar(String.self))),
                    GraphQLField("posts", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, username: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "User5", "id": id, "username": username, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var username: String {
                    get {
                        return snapshot["username"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "username")
                    }
                }
                
                public var posts: Post? {
                    get {
                        return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPostEditor5Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["PostEditor5"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var editorId: GraphQLID {
                            get {
                                return snapshot["editorID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "editorID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class CreateBlog6Mutation: GraphQLMutation {
        public static let operationString =
        "mutation CreateBlog6($input: CreateBlog6Input!, $condition: ModelBlog6ConditionInput) {\n  createBlog6(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    posts {\n      __typename\n      items {\n        __typename\n        id\n        title\n        blogID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: CreateBlog6Input
        public var condition: ModelBlog6ConditionInput?
        
        public init(input: CreateBlog6Input, condition: ModelBlog6ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createBlog6", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateBlog6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createBlog6: CreateBlog6? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createBlog6": createBlog6.flatMap { $0.snapshot }])
            }
            
            public var createBlog6: CreateBlog6? {
                get {
                    return (snapshot["createBlog6"] as? Snapshot).flatMap { CreateBlog6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createBlog6")
                }
            }
            
            public struct CreateBlog6: GraphQLSelectionSet {
                public static let possibleTypes = ["Blog6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("posts", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var posts: Post? {
                    get {
                        return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPost6Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPost6Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Post6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("title", type: .nonNull(.scalar(String.self))),
                            GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, title: String, blogId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var title: String {
                            get {
                                return snapshot["title"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "title")
                            }
                        }
                        
                        public var blogId: GraphQLID {
                            get {
                                return snapshot["blogID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "blogID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class UpdateBlog6Mutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdateBlog6($input: UpdateBlog6Input!, $condition: ModelBlog6ConditionInput) {\n  updateBlog6(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    posts {\n      __typename\n      items {\n        __typename\n        id\n        title\n        blogID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: UpdateBlog6Input
        public var condition: ModelBlog6ConditionInput?
        
        public init(input: UpdateBlog6Input, condition: ModelBlog6ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updateBlog6", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateBlog6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updateBlog6: UpdateBlog6? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updateBlog6": updateBlog6.flatMap { $0.snapshot }])
            }
            
            public var updateBlog6: UpdateBlog6? {
                get {
                    return (snapshot["updateBlog6"] as? Snapshot).flatMap { UpdateBlog6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updateBlog6")
                }
            }
            
            public struct UpdateBlog6: GraphQLSelectionSet {
                public static let possibleTypes = ["Blog6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("posts", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var posts: Post? {
                    get {
                        return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPost6Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPost6Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Post6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("title", type: .nonNull(.scalar(String.self))),
                            GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, title: String, blogId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var title: String {
                            get {
                                return snapshot["title"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "title")
                            }
                        }
                        
                        public var blogId: GraphQLID {
                            get {
                                return snapshot["blogID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "blogID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class DeleteBlog6Mutation: GraphQLMutation {
        public static let operationString =
        "mutation DeleteBlog6($input: DeleteBlog6Input!, $condition: ModelBlog6ConditionInput) {\n  deleteBlog6(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    posts {\n      __typename\n      items {\n        __typename\n        id\n        title\n        blogID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: DeleteBlog6Input
        public var condition: ModelBlog6ConditionInput?
        
        public init(input: DeleteBlog6Input, condition: ModelBlog6ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deleteBlog6", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteBlog6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deleteBlog6: DeleteBlog6? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deleteBlog6": deleteBlog6.flatMap { $0.snapshot }])
            }
            
            public var deleteBlog6: DeleteBlog6? {
                get {
                    return (snapshot["deleteBlog6"] as? Snapshot).flatMap { DeleteBlog6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deleteBlog6")
                }
            }
            
            public struct DeleteBlog6: GraphQLSelectionSet {
                public static let possibleTypes = ["Blog6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("posts", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var posts: Post? {
                    get {
                        return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPost6Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPost6Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Post6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("title", type: .nonNull(.scalar(String.self))),
                            GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, title: String, blogId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var title: String {
                            get {
                                return snapshot["title"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "title")
                            }
                        }
                        
                        public var blogId: GraphQLID {
                            get {
                                return snapshot["blogID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "blogID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class CreatePost6Mutation: GraphQLMutation {
        public static let operationString =
        "mutation CreatePost6($input: CreatePost6Input!, $condition: ModelPost6ConditionInput) {\n  createPost6(input: $input, condition: $condition) {\n    __typename\n    id\n    title\n    blogID\n    blog {\n      __typename\n      id\n      name\n      posts {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: CreatePost6Input
        public var condition: ModelPost6ConditionInput?
        
        public init(input: CreatePost6Input, condition: ModelPost6ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createPost6", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreatePost6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createPost6: CreatePost6? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createPost6": createPost6.flatMap { $0.snapshot }])
            }
            
            public var createPost6: CreatePost6? {
                get {
                    return (snapshot["createPost6"] as? Snapshot).flatMap { CreatePost6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createPost6")
                }
            }
            
            public struct CreatePost6: GraphQLSelectionSet {
                public static let possibleTypes = ["Post6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("blog", type: .object(Blog.selections)),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, blogId: GraphQLID, blog: Blog? = nil, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "blog": blog.flatMap { $0.snapshot }, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var blogId: GraphQLID {
                    get {
                        return snapshot["blogID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "blogID")
                    }
                }
                
                public var blog: Blog? {
                    get {
                        return (snapshot["blog"] as? Snapshot).flatMap { Blog(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "blog")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Blog: GraphQLSelectionSet {
                    public static let possibleTypes = ["Blog6"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("posts", type: .object(Post.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var posts: Post? {
                        get {
                            return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPost6Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPost6Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment6Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment6Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment6", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class UpdatePost6Mutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdatePost6($input: UpdatePost6Input!, $condition: ModelPost6ConditionInput) {\n  updatePost6(input: $input, condition: $condition) {\n    __typename\n    id\n    title\n    blogID\n    blog {\n      __typename\n      id\n      name\n      posts {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: UpdatePost6Input
        public var condition: ModelPost6ConditionInput?
        
        public init(input: UpdatePost6Input, condition: ModelPost6ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updatePost6", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdatePost6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updatePost6: UpdatePost6? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updatePost6": updatePost6.flatMap { $0.snapshot }])
            }
            
            public var updatePost6: UpdatePost6? {
                get {
                    return (snapshot["updatePost6"] as? Snapshot).flatMap { UpdatePost6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updatePost6")
                }
            }
            
            public struct UpdatePost6: GraphQLSelectionSet {
                public static let possibleTypes = ["Post6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("blog", type: .object(Blog.selections)),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, blogId: GraphQLID, blog: Blog? = nil, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "blog": blog.flatMap { $0.snapshot }, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var blogId: GraphQLID {
                    get {
                        return snapshot["blogID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "blogID")
                    }
                }
                
                public var blog: Blog? {
                    get {
                        return (snapshot["blog"] as? Snapshot).flatMap { Blog(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "blog")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Blog: GraphQLSelectionSet {
                    public static let possibleTypes = ["Blog6"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("posts", type: .object(Post.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var posts: Post? {
                        get {
                            return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPost6Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPost6Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment6Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment6Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment6", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class DeletePost6Mutation: GraphQLMutation {
        public static let operationString =
        "mutation DeletePost6($input: DeletePost6Input!, $condition: ModelPost6ConditionInput) {\n  deletePost6(input: $input, condition: $condition) {\n    __typename\n    id\n    title\n    blogID\n    blog {\n      __typename\n      id\n      name\n      posts {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: DeletePost6Input
        public var condition: ModelPost6ConditionInput?
        
        public init(input: DeletePost6Input, condition: ModelPost6ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deletePost6", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeletePost6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deletePost6: DeletePost6? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deletePost6": deletePost6.flatMap { $0.snapshot }])
            }
            
            public var deletePost6: DeletePost6? {
                get {
                    return (snapshot["deletePost6"] as? Snapshot).flatMap { DeletePost6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deletePost6")
                }
            }
            
            public struct DeletePost6: GraphQLSelectionSet {
                public static let possibleTypes = ["Post6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("blog", type: .object(Blog.selections)),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, blogId: GraphQLID, blog: Blog? = nil, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "blog": blog.flatMap { $0.snapshot }, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var blogId: GraphQLID {
                    get {
                        return snapshot["blogID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "blogID")
                    }
                }
                
                public var blog: Blog? {
                    get {
                        return (snapshot["blog"] as? Snapshot).flatMap { Blog(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "blog")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Blog: GraphQLSelectionSet {
                    public static let possibleTypes = ["Blog6"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("posts", type: .object(Post.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var posts: Post? {
                        get {
                            return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPost6Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPost6Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment6Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment6Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment6", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class CreateComment6Mutation: GraphQLMutation {
        public static let operationString =
        "mutation CreateComment6($input: CreateComment6Input!, $condition: ModelComment6ConditionInput) {\n  createComment6(input: $input, condition: $condition) {\n    __typename\n    id\n    postID\n    post {\n      __typename\n      id\n      title\n      blogID\n      blog {\n        __typename\n        id\n        name\n        createdAt\n        updatedAt\n      }\n      comments {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    content\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: CreateComment6Input
        public var condition: ModelComment6ConditionInput?
        
        public init(input: CreateComment6Input, condition: ModelComment6ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createComment6", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateComment6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createComment6: CreateComment6? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createComment6": createComment6.flatMap { $0.snapshot }])
            }
            
            public var createComment6: CreateComment6? {
                get {
                    return (snapshot["createComment6"] as? Snapshot).flatMap { CreateComment6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createComment6")
                }
            }
            
            public struct CreateComment6: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, post: Post? = nil, content: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment6", "id": id, "postID": postId, "post": post.flatMap { $0.snapshot }, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post6"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("blog", type: .object(Blog.selections)),
                        GraphQLField("comments", type: .object(Comment.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, blogId: GraphQLID, blog: Blog? = nil, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "blog": blog.flatMap { $0.snapshot }, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var blogId: GraphQLID {
                        get {
                            return snapshot["blogID"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "blogID")
                        }
                    }
                    
                    public var blog: Blog? {
                        get {
                            return (snapshot["blog"] as? Snapshot).flatMap { Blog(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "blog")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Blog: GraphQLSelectionSet {
                        public static let possibleTypes = ["Blog6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var name: String {
                            get {
                                return snapshot["name"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "name")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelComment6Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelComment6Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class UpdateComment6Mutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdateComment6($input: UpdateComment6Input!, $condition: ModelComment6ConditionInput) {\n  updateComment6(input: $input, condition: $condition) {\n    __typename\n    id\n    postID\n    post {\n      __typename\n      id\n      title\n      blogID\n      blog {\n        __typename\n        id\n        name\n        createdAt\n        updatedAt\n      }\n      comments {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    content\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: UpdateComment6Input
        public var condition: ModelComment6ConditionInput?
        
        public init(input: UpdateComment6Input, condition: ModelComment6ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updateComment6", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateComment6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updateComment6: UpdateComment6? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updateComment6": updateComment6.flatMap { $0.snapshot }])
            }
            
            public var updateComment6: UpdateComment6? {
                get {
                    return (snapshot["updateComment6"] as? Snapshot).flatMap { UpdateComment6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updateComment6")
                }
            }
            
            public struct UpdateComment6: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, post: Post? = nil, content: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment6", "id": id, "postID": postId, "post": post.flatMap { $0.snapshot }, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post6"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("blog", type: .object(Blog.selections)),
                        GraphQLField("comments", type: .object(Comment.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, blogId: GraphQLID, blog: Blog? = nil, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "blog": blog.flatMap { $0.snapshot }, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var blogId: GraphQLID {
                        get {
                            return snapshot["blogID"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "blogID")
                        }
                    }
                    
                    public var blog: Blog? {
                        get {
                            return (snapshot["blog"] as? Snapshot).flatMap { Blog(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "blog")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Blog: GraphQLSelectionSet {
                        public static let possibleTypes = ["Blog6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var name: String {
                            get {
                                return snapshot["name"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "name")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelComment6Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelComment6Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class DeleteComment6Mutation: GraphQLMutation {
        public static let operationString =
        "mutation DeleteComment6($input: DeleteComment6Input!, $condition: ModelComment6ConditionInput) {\n  deleteComment6(input: $input, condition: $condition) {\n    __typename\n    id\n    postID\n    post {\n      __typename\n      id\n      title\n      blogID\n      blog {\n        __typename\n        id\n        name\n        createdAt\n        updatedAt\n      }\n      comments {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    content\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: DeleteComment6Input
        public var condition: ModelComment6ConditionInput?
        
        public init(input: DeleteComment6Input, condition: ModelComment6ConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deleteComment6", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteComment6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deleteComment6: DeleteComment6? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deleteComment6": deleteComment6.flatMap { $0.snapshot }])
            }
            
            public var deleteComment6: DeleteComment6? {
                get {
                    return (snapshot["deleteComment6"] as? Snapshot).flatMap { DeleteComment6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deleteComment6")
                }
            }
            
            public struct DeleteComment6: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, post: Post? = nil, content: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment6", "id": id, "postID": postId, "post": post.flatMap { $0.snapshot }, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post6"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("blog", type: .object(Blog.selections)),
                        GraphQLField("comments", type: .object(Comment.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, blogId: GraphQLID, blog: Blog? = nil, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "blog": blog.flatMap { $0.snapshot }, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var blogId: GraphQLID {
                        get {
                            return snapshot["blogID"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "blogID")
                        }
                    }
                    
                    public var blog: Blog? {
                        get {
                            return (snapshot["blog"] as? Snapshot).flatMap { Blog(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "blog")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Blog: GraphQLSelectionSet {
                        public static let possibleTypes = ["Blog6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var name: String {
                            get {
                                return snapshot["name"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "name")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelComment6Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelComment6Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class CreateScalarContainerMutation: GraphQLMutation {
        public static let operationString =
        "mutation CreateScalarContainer($input: CreateScalarContainerInput!, $condition: ModelScalarContainerConditionInput) {\n  createScalarContainer(input: $input, condition: $condition) {\n    __typename\n    id\n    myString\n    myInt\n    myDouble\n    myBool\n    myDate\n    myTime\n    myDateTime\n    myTimeStamp\n    myEmail\n    myJSON\n    myPhone\n    myURL\n    myIPAddress\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: CreateScalarContainerInput
        public var condition: ModelScalarContainerConditionInput?
        
        public init(input: CreateScalarContainerInput, condition: ModelScalarContainerConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createScalarContainer", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateScalarContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createScalarContainer: CreateScalarContainer? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createScalarContainer": createScalarContainer.flatMap { $0.snapshot }])
            }
            
            public var createScalarContainer: CreateScalarContainer? {
                get {
                    return (snapshot["createScalarContainer"] as? Snapshot).flatMap { CreateScalarContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createScalarContainer")
                }
            }
            
            public struct CreateScalarContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ScalarContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("myString", type: .scalar(String.self)),
                    GraphQLField("myInt", type: .scalar(Int.self)),
                    GraphQLField("myDouble", type: .scalar(Double.self)),
                    GraphQLField("myBool", type: .scalar(Bool.self)),
                    GraphQLField("myDate", type: .scalar(String.self)),
                    GraphQLField("myTime", type: .scalar(String.self)),
                    GraphQLField("myDateTime", type: .scalar(String.self)),
                    GraphQLField("myTimeStamp", type: .scalar(Int.self)),
                    GraphQLField("myEmail", type: .scalar(String.self)),
                    GraphQLField("myJSON", type: .scalar(String.self)),
                    GraphQLField("myPhone", type: .scalar(String.self)),
                    GraphQLField("myURL", type: .scalar(String.self)),
                    GraphQLField("myIPAddress", type: .scalar(String.self)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, myString: String? = nil, myInt: Int? = nil, myDouble: Double? = nil, myBool: Bool? = nil, myDate: String? = nil, myTime: String? = nil, myDateTime: String? = nil, myTimeStamp: Int? = nil, myEmail: String? = nil, myJson: String? = nil, myPhone: String? = nil, myUrl: String? = nil, myIpAddress: String? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ScalarContainer", "id": id, "myString": myString, "myInt": myInt, "myDouble": myDouble, "myBool": myBool, "myDate": myDate, "myTime": myTime, "myDateTime": myDateTime, "myTimeStamp": myTimeStamp, "myEmail": myEmail, "myJSON": myJson, "myPhone": myPhone, "myURL": myUrl, "myIPAddress": myIpAddress, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var myString: String? {
                    get {
                        return snapshot["myString"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myString")
                    }
                }
                
                public var myInt: Int? {
                    get {
                        return snapshot["myInt"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myInt")
                    }
                }
                
                public var myDouble: Double? {
                    get {
                        return snapshot["myDouble"] as? Double
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDouble")
                    }
                }
                
                public var myBool: Bool? {
                    get {
                        return snapshot["myBool"] as? Bool
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myBool")
                    }
                }
                
                public var myDate: String? {
                    get {
                        return snapshot["myDate"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDate")
                    }
                }
                
                public var myTime: String? {
                    get {
                        return snapshot["myTime"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myTime")
                    }
                }
                
                public var myDateTime: String? {
                    get {
                        return snapshot["myDateTime"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDateTime")
                    }
                }
                
                public var myTimeStamp: Int? {
                    get {
                        return snapshot["myTimeStamp"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myTimeStamp")
                    }
                }
                
                public var myEmail: String? {
                    get {
                        return snapshot["myEmail"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myEmail")
                    }
                }
                
                public var myJson: String? {
                    get {
                        return snapshot["myJSON"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myJSON")
                    }
                }
                
                public var myPhone: String? {
                    get {
                        return snapshot["myPhone"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myPhone")
                    }
                }
                
                public var myUrl: String? {
                    get {
                        return snapshot["myURL"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myURL")
                    }
                }
                
                public var myIpAddress: String? {
                    get {
                        return snapshot["myIPAddress"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myIPAddress")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class UpdateScalarContainerMutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdateScalarContainer($input: UpdateScalarContainerInput!, $condition: ModelScalarContainerConditionInput) {\n  updateScalarContainer(input: $input, condition: $condition) {\n    __typename\n    id\n    myString\n    myInt\n    myDouble\n    myBool\n    myDate\n    myTime\n    myDateTime\n    myTimeStamp\n    myEmail\n    myJSON\n    myPhone\n    myURL\n    myIPAddress\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: UpdateScalarContainerInput
        public var condition: ModelScalarContainerConditionInput?
        
        public init(input: UpdateScalarContainerInput, condition: ModelScalarContainerConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updateScalarContainer", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateScalarContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updateScalarContainer: UpdateScalarContainer? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updateScalarContainer": updateScalarContainer.flatMap { $0.snapshot }])
            }
            
            public var updateScalarContainer: UpdateScalarContainer? {
                get {
                    return (snapshot["updateScalarContainer"] as? Snapshot).flatMap { UpdateScalarContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updateScalarContainer")
                }
            }
            
            public struct UpdateScalarContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ScalarContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("myString", type: .scalar(String.self)),
                    GraphQLField("myInt", type: .scalar(Int.self)),
                    GraphQLField("myDouble", type: .scalar(Double.self)),
                    GraphQLField("myBool", type: .scalar(Bool.self)),
                    GraphQLField("myDate", type: .scalar(String.self)),
                    GraphQLField("myTime", type: .scalar(String.self)),
                    GraphQLField("myDateTime", type: .scalar(String.self)),
                    GraphQLField("myTimeStamp", type: .scalar(Int.self)),
                    GraphQLField("myEmail", type: .scalar(String.self)),
                    GraphQLField("myJSON", type: .scalar(String.self)),
                    GraphQLField("myPhone", type: .scalar(String.self)),
                    GraphQLField("myURL", type: .scalar(String.self)),
                    GraphQLField("myIPAddress", type: .scalar(String.self)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, myString: String? = nil, myInt: Int? = nil, myDouble: Double? = nil, myBool: Bool? = nil, myDate: String? = nil, myTime: String? = nil, myDateTime: String? = nil, myTimeStamp: Int? = nil, myEmail: String? = nil, myJson: String? = nil, myPhone: String? = nil, myUrl: String? = nil, myIpAddress: String? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ScalarContainer", "id": id, "myString": myString, "myInt": myInt, "myDouble": myDouble, "myBool": myBool, "myDate": myDate, "myTime": myTime, "myDateTime": myDateTime, "myTimeStamp": myTimeStamp, "myEmail": myEmail, "myJSON": myJson, "myPhone": myPhone, "myURL": myUrl, "myIPAddress": myIpAddress, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var myString: String? {
                    get {
                        return snapshot["myString"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myString")
                    }
                }
                
                public var myInt: Int? {
                    get {
                        return snapshot["myInt"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myInt")
                    }
                }
                
                public var myDouble: Double? {
                    get {
                        return snapshot["myDouble"] as? Double
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDouble")
                    }
                }
                
                public var myBool: Bool? {
                    get {
                        return snapshot["myBool"] as? Bool
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myBool")
                    }
                }
                
                public var myDate: String? {
                    get {
                        return snapshot["myDate"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDate")
                    }
                }
                
                public var myTime: String? {
                    get {
                        return snapshot["myTime"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myTime")
                    }
                }
                
                public var myDateTime: String? {
                    get {
                        return snapshot["myDateTime"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDateTime")
                    }
                }
                
                public var myTimeStamp: Int? {
                    get {
                        return snapshot["myTimeStamp"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myTimeStamp")
                    }
                }
                
                public var myEmail: String? {
                    get {
                        return snapshot["myEmail"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myEmail")
                    }
                }
                
                public var myJson: String? {
                    get {
                        return snapshot["myJSON"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myJSON")
                    }
                }
                
                public var myPhone: String? {
                    get {
                        return snapshot["myPhone"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myPhone")
                    }
                }
                
                public var myUrl: String? {
                    get {
                        return snapshot["myURL"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myURL")
                    }
                }
                
                public var myIpAddress: String? {
                    get {
                        return snapshot["myIPAddress"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myIPAddress")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class DeleteScalarContainerMutation: GraphQLMutation {
        public static let operationString =
        "mutation DeleteScalarContainer($input: DeleteScalarContainerInput!, $condition: ModelScalarContainerConditionInput) {\n  deleteScalarContainer(input: $input, condition: $condition) {\n    __typename\n    id\n    myString\n    myInt\n    myDouble\n    myBool\n    myDate\n    myTime\n    myDateTime\n    myTimeStamp\n    myEmail\n    myJSON\n    myPhone\n    myURL\n    myIPAddress\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: DeleteScalarContainerInput
        public var condition: ModelScalarContainerConditionInput?
        
        public init(input: DeleteScalarContainerInput, condition: ModelScalarContainerConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deleteScalarContainer", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteScalarContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deleteScalarContainer: DeleteScalarContainer? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deleteScalarContainer": deleteScalarContainer.flatMap { $0.snapshot }])
            }
            
            public var deleteScalarContainer: DeleteScalarContainer? {
                get {
                    return (snapshot["deleteScalarContainer"] as? Snapshot).flatMap { DeleteScalarContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deleteScalarContainer")
                }
            }
            
            public struct DeleteScalarContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ScalarContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("myString", type: .scalar(String.self)),
                    GraphQLField("myInt", type: .scalar(Int.self)),
                    GraphQLField("myDouble", type: .scalar(Double.self)),
                    GraphQLField("myBool", type: .scalar(Bool.self)),
                    GraphQLField("myDate", type: .scalar(String.self)),
                    GraphQLField("myTime", type: .scalar(String.self)),
                    GraphQLField("myDateTime", type: .scalar(String.self)),
                    GraphQLField("myTimeStamp", type: .scalar(Int.self)),
                    GraphQLField("myEmail", type: .scalar(String.self)),
                    GraphQLField("myJSON", type: .scalar(String.self)),
                    GraphQLField("myPhone", type: .scalar(String.self)),
                    GraphQLField("myURL", type: .scalar(String.self)),
                    GraphQLField("myIPAddress", type: .scalar(String.self)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, myString: String? = nil, myInt: Int? = nil, myDouble: Double? = nil, myBool: Bool? = nil, myDate: String? = nil, myTime: String? = nil, myDateTime: String? = nil, myTimeStamp: Int? = nil, myEmail: String? = nil, myJson: String? = nil, myPhone: String? = nil, myUrl: String? = nil, myIpAddress: String? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ScalarContainer", "id": id, "myString": myString, "myInt": myInt, "myDouble": myDouble, "myBool": myBool, "myDate": myDate, "myTime": myTime, "myDateTime": myDateTime, "myTimeStamp": myTimeStamp, "myEmail": myEmail, "myJSON": myJson, "myPhone": myPhone, "myURL": myUrl, "myIPAddress": myIpAddress, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var myString: String? {
                    get {
                        return snapshot["myString"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myString")
                    }
                }
                
                public var myInt: Int? {
                    get {
                        return snapshot["myInt"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myInt")
                    }
                }
                
                public var myDouble: Double? {
                    get {
                        return snapshot["myDouble"] as? Double
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDouble")
                    }
                }
                
                public var myBool: Bool? {
                    get {
                        return snapshot["myBool"] as? Bool
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myBool")
                    }
                }
                
                public var myDate: String? {
                    get {
                        return snapshot["myDate"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDate")
                    }
                }
                
                public var myTime: String? {
                    get {
                        return snapshot["myTime"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myTime")
                    }
                }
                
                public var myDateTime: String? {
                    get {
                        return snapshot["myDateTime"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDateTime")
                    }
                }
                
                public var myTimeStamp: Int? {
                    get {
                        return snapshot["myTimeStamp"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myTimeStamp")
                    }
                }
                
                public var myEmail: String? {
                    get {
                        return snapshot["myEmail"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myEmail")
                    }
                }
                
                public var myJson: String? {
                    get {
                        return snapshot["myJSON"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myJSON")
                    }
                }
                
                public var myPhone: String? {
                    get {
                        return snapshot["myPhone"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myPhone")
                    }
                }
                
                public var myUrl: String? {
                    get {
                        return snapshot["myURL"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myURL")
                    }
                }
                
                public var myIpAddress: String? {
                    get {
                        return snapshot["myIPAddress"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myIPAddress")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class CreateListIntContainerMutation: GraphQLMutation {
        public static let operationString =
        "mutation CreateListIntContainer($input: CreateListIntContainerInput!, $condition: ModelListIntContainerConditionInput) {\n  createListIntContainer(input: $input, condition: $condition) {\n    __typename\n    id\n    test\n    nullableInt\n    intList\n    intNullableList\n    nullableIntList\n    nullableIntNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: CreateListIntContainerInput
        public var condition: ModelListIntContainerConditionInput?
        
        public init(input: CreateListIntContainerInput, condition: ModelListIntContainerConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createListIntContainer", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateListIntContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createListIntContainer: CreateListIntContainer? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createListIntContainer": createListIntContainer.flatMap { $0.snapshot }])
            }
            
            public var createListIntContainer: CreateListIntContainer? {
                get {
                    return (snapshot["createListIntContainer"] as? Snapshot).flatMap { CreateListIntContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createListIntContainer")
                }
            }
            
            public struct CreateListIntContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ListIntContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("test", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("nullableInt", type: .scalar(Int.self)),
                    GraphQLField("intList", type: .nonNull(.list(.nonNull(.scalar(Int.self))))),
                    GraphQLField("intNullableList", type: .list(.nonNull(.scalar(Int.self)))),
                    GraphQLField("nullableIntList", type: .nonNull(.list(.scalar(Int.self)))),
                    GraphQLField("nullableIntNullableList", type: .list(.scalar(Int.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, test: Int, nullableInt: Int? = nil, intList: [Int], intNullableList: [Int]? = nil, nullableIntList: [Int?], nullableIntNullableList: [Int?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ListIntContainer", "id": id, "test": test, "nullableInt": nullableInt, "intList": intList, "intNullableList": intNullableList, "nullableIntList": nullableIntList, "nullableIntNullableList": nullableIntNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var test: Int {
                    get {
                        return snapshot["test"]! as! Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "test")
                    }
                }
                
                public var nullableInt: Int? {
                    get {
                        return snapshot["nullableInt"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableInt")
                    }
                }
                
                public var intList: [Int] {
                    get {
                        return snapshot["intList"]! as! [Int]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "intList")
                    }
                }
                
                public var intNullableList: [Int]? {
                    get {
                        return snapshot["intNullableList"] as? [Int]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "intNullableList")
                    }
                }
                
                public var nullableIntList: [Int?] {
                    get {
                        return snapshot["nullableIntList"]! as! [Int?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableIntList")
                    }
                }
                
                public var nullableIntNullableList: [Int?]? {
                    get {
                        return snapshot["nullableIntNullableList"] as? [Int?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableIntNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class UpdateListIntContainerMutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdateListIntContainer($input: UpdateListIntContainerInput!, $condition: ModelListIntContainerConditionInput) {\n  updateListIntContainer(input: $input, condition: $condition) {\n    __typename\n    id\n    test\n    nullableInt\n    intList\n    intNullableList\n    nullableIntList\n    nullableIntNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: UpdateListIntContainerInput
        public var condition: ModelListIntContainerConditionInput?
        
        public init(input: UpdateListIntContainerInput, condition: ModelListIntContainerConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updateListIntContainer", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateListIntContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updateListIntContainer: UpdateListIntContainer? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updateListIntContainer": updateListIntContainer.flatMap { $0.snapshot }])
            }
            
            public var updateListIntContainer: UpdateListIntContainer? {
                get {
                    return (snapshot["updateListIntContainer"] as? Snapshot).flatMap { UpdateListIntContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updateListIntContainer")
                }
            }
            
            public struct UpdateListIntContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ListIntContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("test", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("nullableInt", type: .scalar(Int.self)),
                    GraphQLField("intList", type: .nonNull(.list(.nonNull(.scalar(Int.self))))),
                    GraphQLField("intNullableList", type: .list(.nonNull(.scalar(Int.self)))),
                    GraphQLField("nullableIntList", type: .nonNull(.list(.scalar(Int.self)))),
                    GraphQLField("nullableIntNullableList", type: .list(.scalar(Int.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, test: Int, nullableInt: Int? = nil, intList: [Int], intNullableList: [Int]? = nil, nullableIntList: [Int?], nullableIntNullableList: [Int?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ListIntContainer", "id": id, "test": test, "nullableInt": nullableInt, "intList": intList, "intNullableList": intNullableList, "nullableIntList": nullableIntList, "nullableIntNullableList": nullableIntNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var test: Int {
                    get {
                        return snapshot["test"]! as! Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "test")
                    }
                }
                
                public var nullableInt: Int? {
                    get {
                        return snapshot["nullableInt"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableInt")
                    }
                }
                
                public var intList: [Int] {
                    get {
                        return snapshot["intList"]! as! [Int]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "intList")
                    }
                }
                
                public var intNullableList: [Int]? {
                    get {
                        return snapshot["intNullableList"] as? [Int]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "intNullableList")
                    }
                }
                
                public var nullableIntList: [Int?] {
                    get {
                        return snapshot["nullableIntList"]! as! [Int?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableIntList")
                    }
                }
                
                public var nullableIntNullableList: [Int?]? {
                    get {
                        return snapshot["nullableIntNullableList"] as? [Int?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableIntNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class DeleteListIntContainerMutation: GraphQLMutation {
        public static let operationString =
        "mutation DeleteListIntContainer($input: DeleteListIntContainerInput!, $condition: ModelListIntContainerConditionInput) {\n  deleteListIntContainer(input: $input, condition: $condition) {\n    __typename\n    id\n    test\n    nullableInt\n    intList\n    intNullableList\n    nullableIntList\n    nullableIntNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: DeleteListIntContainerInput
        public var condition: ModelListIntContainerConditionInput?
        
        public init(input: DeleteListIntContainerInput, condition: ModelListIntContainerConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deleteListIntContainer", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteListIntContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deleteListIntContainer: DeleteListIntContainer? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deleteListIntContainer": deleteListIntContainer.flatMap { $0.snapshot }])
            }
            
            public var deleteListIntContainer: DeleteListIntContainer? {
                get {
                    return (snapshot["deleteListIntContainer"] as? Snapshot).flatMap { DeleteListIntContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deleteListIntContainer")
                }
            }
            
            public struct DeleteListIntContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ListIntContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("test", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("nullableInt", type: .scalar(Int.self)),
                    GraphQLField("intList", type: .nonNull(.list(.nonNull(.scalar(Int.self))))),
                    GraphQLField("intNullableList", type: .list(.nonNull(.scalar(Int.self)))),
                    GraphQLField("nullableIntList", type: .nonNull(.list(.scalar(Int.self)))),
                    GraphQLField("nullableIntNullableList", type: .list(.scalar(Int.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, test: Int, nullableInt: Int? = nil, intList: [Int], intNullableList: [Int]? = nil, nullableIntList: [Int?], nullableIntNullableList: [Int?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ListIntContainer", "id": id, "test": test, "nullableInt": nullableInt, "intList": intList, "intNullableList": intNullableList, "nullableIntList": nullableIntList, "nullableIntNullableList": nullableIntNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var test: Int {
                    get {
                        return snapshot["test"]! as! Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "test")
                    }
                }
                
                public var nullableInt: Int? {
                    get {
                        return snapshot["nullableInt"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableInt")
                    }
                }
                
                public var intList: [Int] {
                    get {
                        return snapshot["intList"]! as! [Int]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "intList")
                    }
                }
                
                public var intNullableList: [Int]? {
                    get {
                        return snapshot["intNullableList"] as? [Int]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "intNullableList")
                    }
                }
                
                public var nullableIntList: [Int?] {
                    get {
                        return snapshot["nullableIntList"]! as! [Int?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableIntList")
                    }
                }
                
                public var nullableIntNullableList: [Int?]? {
                    get {
                        return snapshot["nullableIntNullableList"] as? [Int?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableIntNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class CreateListStringContainerMutation: GraphQLMutation {
        public static let operationString =
        "mutation CreateListStringContainer($input: CreateListStringContainerInput!, $condition: ModelListStringContainerConditionInput) {\n  createListStringContainer(input: $input, condition: $condition) {\n    __typename\n    id\n    test\n    nullableString\n    stringList\n    stringNullableList\n    nullableStringList\n    nullableStringNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: CreateListStringContainerInput
        public var condition: ModelListStringContainerConditionInput?
        
        public init(input: CreateListStringContainerInput, condition: ModelListStringContainerConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createListStringContainer", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateListStringContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createListStringContainer: CreateListStringContainer? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createListStringContainer": createListStringContainer.flatMap { $0.snapshot }])
            }
            
            public var createListStringContainer: CreateListStringContainer? {
                get {
                    return (snapshot["createListStringContainer"] as? Snapshot).flatMap { CreateListStringContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createListStringContainer")
                }
            }
            
            public struct CreateListStringContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ListStringContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("test", type: .nonNull(.scalar(String.self))),
                    GraphQLField("nullableString", type: .scalar(String.self)),
                    GraphQLField("stringList", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
                    GraphQLField("stringNullableList", type: .list(.nonNull(.scalar(String.self)))),
                    GraphQLField("nullableStringList", type: .nonNull(.list(.scalar(String.self)))),
                    GraphQLField("nullableStringNullableList", type: .list(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, test: String, nullableString: String? = nil, stringList: [String], stringNullableList: [String]? = nil, nullableStringList: [String?], nullableStringNullableList: [String?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ListStringContainer", "id": id, "test": test, "nullableString": nullableString, "stringList": stringList, "stringNullableList": stringNullableList, "nullableStringList": nullableStringList, "nullableStringNullableList": nullableStringNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var test: String {
                    get {
                        return snapshot["test"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "test")
                    }
                }
                
                public var nullableString: String? {
                    get {
                        return snapshot["nullableString"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableString")
                    }
                }
                
                public var stringList: [String] {
                    get {
                        return snapshot["stringList"]! as! [String]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "stringList")
                    }
                }
                
                public var stringNullableList: [String]? {
                    get {
                        return snapshot["stringNullableList"] as? [String]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "stringNullableList")
                    }
                }
                
                public var nullableStringList: [String?] {
                    get {
                        return snapshot["nullableStringList"]! as! [String?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableStringList")
                    }
                }
                
                public var nullableStringNullableList: [String?]? {
                    get {
                        return snapshot["nullableStringNullableList"] as? [String?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableStringNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class UpdateListStringContainerMutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdateListStringContainer($input: UpdateListStringContainerInput!, $condition: ModelListStringContainerConditionInput) {\n  updateListStringContainer(input: $input, condition: $condition) {\n    __typename\n    id\n    test\n    nullableString\n    stringList\n    stringNullableList\n    nullableStringList\n    nullableStringNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: UpdateListStringContainerInput
        public var condition: ModelListStringContainerConditionInput?
        
        public init(input: UpdateListStringContainerInput, condition: ModelListStringContainerConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updateListStringContainer", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateListStringContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updateListStringContainer: UpdateListStringContainer? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updateListStringContainer": updateListStringContainer.flatMap { $0.snapshot }])
            }
            
            public var updateListStringContainer: UpdateListStringContainer? {
                get {
                    return (snapshot["updateListStringContainer"] as? Snapshot).flatMap { UpdateListStringContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updateListStringContainer")
                }
            }
            
            public struct UpdateListStringContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ListStringContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("test", type: .nonNull(.scalar(String.self))),
                    GraphQLField("nullableString", type: .scalar(String.self)),
                    GraphQLField("stringList", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
                    GraphQLField("stringNullableList", type: .list(.nonNull(.scalar(String.self)))),
                    GraphQLField("nullableStringList", type: .nonNull(.list(.scalar(String.self)))),
                    GraphQLField("nullableStringNullableList", type: .list(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, test: String, nullableString: String? = nil, stringList: [String], stringNullableList: [String]? = nil, nullableStringList: [String?], nullableStringNullableList: [String?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ListStringContainer", "id": id, "test": test, "nullableString": nullableString, "stringList": stringList, "stringNullableList": stringNullableList, "nullableStringList": nullableStringList, "nullableStringNullableList": nullableStringNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var test: String {
                    get {
                        return snapshot["test"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "test")
                    }
                }
                
                public var nullableString: String? {
                    get {
                        return snapshot["nullableString"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableString")
                    }
                }
                
                public var stringList: [String] {
                    get {
                        return snapshot["stringList"]! as! [String]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "stringList")
                    }
                }
                
                public var stringNullableList: [String]? {
                    get {
                        return snapshot["stringNullableList"] as? [String]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "stringNullableList")
                    }
                }
                
                public var nullableStringList: [String?] {
                    get {
                        return snapshot["nullableStringList"]! as! [String?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableStringList")
                    }
                }
                
                public var nullableStringNullableList: [String?]? {
                    get {
                        return snapshot["nullableStringNullableList"] as? [String?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableStringNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class DeleteListStringContainerMutation: GraphQLMutation {
        public static let operationString =
        "mutation DeleteListStringContainer($input: DeleteListStringContainerInput!, $condition: ModelListStringContainerConditionInput) {\n  deleteListStringContainer(input: $input, condition: $condition) {\n    __typename\n    id\n    test\n    nullableString\n    stringList\n    stringNullableList\n    nullableStringList\n    nullableStringNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: DeleteListStringContainerInput
        public var condition: ModelListStringContainerConditionInput?
        
        public init(input: DeleteListStringContainerInput, condition: ModelListStringContainerConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deleteListStringContainer", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteListStringContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deleteListStringContainer: DeleteListStringContainer? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deleteListStringContainer": deleteListStringContainer.flatMap { $0.snapshot }])
            }
            
            public var deleteListStringContainer: DeleteListStringContainer? {
                get {
                    return (snapshot["deleteListStringContainer"] as? Snapshot).flatMap { DeleteListStringContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deleteListStringContainer")
                }
            }
            
            public struct DeleteListStringContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ListStringContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("test", type: .nonNull(.scalar(String.self))),
                    GraphQLField("nullableString", type: .scalar(String.self)),
                    GraphQLField("stringList", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
                    GraphQLField("stringNullableList", type: .list(.nonNull(.scalar(String.self)))),
                    GraphQLField("nullableStringList", type: .nonNull(.list(.scalar(String.self)))),
                    GraphQLField("nullableStringNullableList", type: .list(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, test: String, nullableString: String? = nil, stringList: [String], stringNullableList: [String]? = nil, nullableStringList: [String?], nullableStringNullableList: [String?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ListStringContainer", "id": id, "test": test, "nullableString": nullableString, "stringList": stringList, "stringNullableList": stringNullableList, "nullableStringList": nullableStringList, "nullableStringNullableList": nullableStringNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var test: String {
                    get {
                        return snapshot["test"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "test")
                    }
                }
                
                public var nullableString: String? {
                    get {
                        return snapshot["nullableString"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableString")
                    }
                }
                
                public var stringList: [String] {
                    get {
                        return snapshot["stringList"]! as! [String]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "stringList")
                    }
                }
                
                public var stringNullableList: [String]? {
                    get {
                        return snapshot["stringNullableList"] as? [String]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "stringNullableList")
                    }
                }
                
                public var nullableStringList: [String?] {
                    get {
                        return snapshot["nullableStringList"]! as! [String?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableStringList")
                    }
                }
                
                public var nullableStringNullableList: [String?]? {
                    get {
                        return snapshot["nullableStringNullableList"] as? [String?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableStringNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class CreateEnumTestModelMutation: GraphQLMutation {
        public static let operationString =
        "mutation CreateEnumTestModel($input: CreateEnumTestModelInput!, $condition: ModelEnumTestModelConditionInput) {\n  createEnumTestModel(input: $input, condition: $condition) {\n    __typename\n    id\n    enumVal\n    nullableEnumVal\n    enumList\n    enumNullableList\n    nullableEnumList\n    nullableEnumNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: CreateEnumTestModelInput
        public var condition: ModelEnumTestModelConditionInput?
        
        public init(input: CreateEnumTestModelInput, condition: ModelEnumTestModelConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createEnumTestModel", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateEnumTestModel.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createEnumTestModel: CreateEnumTestModel? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createEnumTestModel": createEnumTestModel.flatMap { $0.snapshot }])
            }
            
            public var createEnumTestModel: CreateEnumTestModel? {
                get {
                    return (snapshot["createEnumTestModel"] as? Snapshot).flatMap { CreateEnumTestModel(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createEnumTestModel")
                }
            }
            
            public struct CreateEnumTestModel: GraphQLSelectionSet {
                public static let possibleTypes = ["EnumTestModel"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("enumVal", type: .nonNull(.scalar(TestEnum.self))),
                    GraphQLField("nullableEnumVal", type: .scalar(TestEnum.self)),
                    GraphQLField("enumList", type: .nonNull(.list(.nonNull(.scalar(TestEnum.self))))),
                    GraphQLField("enumNullableList", type: .list(.nonNull(.scalar(TestEnum.self)))),
                    GraphQLField("nullableEnumList", type: .nonNull(.list(.scalar(TestEnum.self)))),
                    GraphQLField("nullableEnumNullableList", type: .list(.scalar(TestEnum.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, enumVal: TestEnum, nullableEnumVal: TestEnum? = nil, enumList: [TestEnum], enumNullableList: [TestEnum]? = nil, nullableEnumList: [TestEnum?], nullableEnumNullableList: [TestEnum?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "EnumTestModel", "id": id, "enumVal": enumVal, "nullableEnumVal": nullableEnumVal, "enumList": enumList, "enumNullableList": enumNullableList, "nullableEnumList": nullableEnumList, "nullableEnumNullableList": nullableEnumNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var enumVal: TestEnum {
                    get {
                        return snapshot["enumVal"]! as! TestEnum
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumVal")
                    }
                }
                
                public var nullableEnumVal: TestEnum? {
                    get {
                        return snapshot["nullableEnumVal"] as? TestEnum
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumVal")
                    }
                }
                
                public var enumList: [TestEnum] {
                    get {
                        return snapshot["enumList"]! as! [TestEnum]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumList")
                    }
                }
                
                public var enumNullableList: [TestEnum]? {
                    get {
                        return snapshot["enumNullableList"] as? [TestEnum]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumNullableList")
                    }
                }
                
                public var nullableEnumList: [TestEnum?] {
                    get {
                        return snapshot["nullableEnumList"]! as! [TestEnum?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumList")
                    }
                }
                
                public var nullableEnumNullableList: [TestEnum?]? {
                    get {
                        return snapshot["nullableEnumNullableList"] as? [TestEnum?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class UpdateEnumTestModelMutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdateEnumTestModel($input: UpdateEnumTestModelInput!, $condition: ModelEnumTestModelConditionInput) {\n  updateEnumTestModel(input: $input, condition: $condition) {\n    __typename\n    id\n    enumVal\n    nullableEnumVal\n    enumList\n    enumNullableList\n    nullableEnumList\n    nullableEnumNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: UpdateEnumTestModelInput
        public var condition: ModelEnumTestModelConditionInput?
        
        public init(input: UpdateEnumTestModelInput, condition: ModelEnumTestModelConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updateEnumTestModel", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateEnumTestModel.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updateEnumTestModel: UpdateEnumTestModel? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updateEnumTestModel": updateEnumTestModel.flatMap { $0.snapshot }])
            }
            
            public var updateEnumTestModel: UpdateEnumTestModel? {
                get {
                    return (snapshot["updateEnumTestModel"] as? Snapshot).flatMap { UpdateEnumTestModel(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updateEnumTestModel")
                }
            }
            
            public struct UpdateEnumTestModel: GraphQLSelectionSet {
                public static let possibleTypes = ["EnumTestModel"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("enumVal", type: .nonNull(.scalar(TestEnum.self))),
                    GraphQLField("nullableEnumVal", type: .scalar(TestEnum.self)),
                    GraphQLField("enumList", type: .nonNull(.list(.nonNull(.scalar(TestEnum.self))))),
                    GraphQLField("enumNullableList", type: .list(.nonNull(.scalar(TestEnum.self)))),
                    GraphQLField("nullableEnumList", type: .nonNull(.list(.scalar(TestEnum.self)))),
                    GraphQLField("nullableEnumNullableList", type: .list(.scalar(TestEnum.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, enumVal: TestEnum, nullableEnumVal: TestEnum? = nil, enumList: [TestEnum], enumNullableList: [TestEnum]? = nil, nullableEnumList: [TestEnum?], nullableEnumNullableList: [TestEnum?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "EnumTestModel", "id": id, "enumVal": enumVal, "nullableEnumVal": nullableEnumVal, "enumList": enumList, "enumNullableList": enumNullableList, "nullableEnumList": nullableEnumList, "nullableEnumNullableList": nullableEnumNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var enumVal: TestEnum {
                    get {
                        return snapshot["enumVal"]! as! TestEnum
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumVal")
                    }
                }
                
                public var nullableEnumVal: TestEnum? {
                    get {
                        return snapshot["nullableEnumVal"] as? TestEnum
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumVal")
                    }
                }
                
                public var enumList: [TestEnum] {
                    get {
                        return snapshot["enumList"]! as! [TestEnum]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumList")
                    }
                }
                
                public var enumNullableList: [TestEnum]? {
                    get {
                        return snapshot["enumNullableList"] as? [TestEnum]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumNullableList")
                    }
                }
                
                public var nullableEnumList: [TestEnum?] {
                    get {
                        return snapshot["nullableEnumList"]! as! [TestEnum?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumList")
                    }
                }
                
                public var nullableEnumNullableList: [TestEnum?]? {
                    get {
                        return snapshot["nullableEnumNullableList"] as? [TestEnum?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class DeleteEnumTestModelMutation: GraphQLMutation {
        public static let operationString =
        "mutation DeleteEnumTestModel($input: DeleteEnumTestModelInput!, $condition: ModelEnumTestModelConditionInput) {\n  deleteEnumTestModel(input: $input, condition: $condition) {\n    __typename\n    id\n    enumVal\n    nullableEnumVal\n    enumList\n    enumNullableList\n    nullableEnumList\n    nullableEnumNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: DeleteEnumTestModelInput
        public var condition: ModelEnumTestModelConditionInput?
        
        public init(input: DeleteEnumTestModelInput, condition: ModelEnumTestModelConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deleteEnumTestModel", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteEnumTestModel.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deleteEnumTestModel: DeleteEnumTestModel? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deleteEnumTestModel": deleteEnumTestModel.flatMap { $0.snapshot }])
            }
            
            public var deleteEnumTestModel: DeleteEnumTestModel? {
                get {
                    return (snapshot["deleteEnumTestModel"] as? Snapshot).flatMap { DeleteEnumTestModel(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deleteEnumTestModel")
                }
            }
            
            public struct DeleteEnumTestModel: GraphQLSelectionSet {
                public static let possibleTypes = ["EnumTestModel"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("enumVal", type: .nonNull(.scalar(TestEnum.self))),
                    GraphQLField("nullableEnumVal", type: .scalar(TestEnum.self)),
                    GraphQLField("enumList", type: .nonNull(.list(.nonNull(.scalar(TestEnum.self))))),
                    GraphQLField("enumNullableList", type: .list(.nonNull(.scalar(TestEnum.self)))),
                    GraphQLField("nullableEnumList", type: .nonNull(.list(.scalar(TestEnum.self)))),
                    GraphQLField("nullableEnumNullableList", type: .list(.scalar(TestEnum.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, enumVal: TestEnum, nullableEnumVal: TestEnum? = nil, enumList: [TestEnum], enumNullableList: [TestEnum]? = nil, nullableEnumList: [TestEnum?], nullableEnumNullableList: [TestEnum?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "EnumTestModel", "id": id, "enumVal": enumVal, "nullableEnumVal": nullableEnumVal, "enumList": enumList, "enumNullableList": enumNullableList, "nullableEnumList": nullableEnumList, "nullableEnumNullableList": nullableEnumNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var enumVal: TestEnum {
                    get {
                        return snapshot["enumVal"]! as! TestEnum
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumVal")
                    }
                }
                
                public var nullableEnumVal: TestEnum? {
                    get {
                        return snapshot["nullableEnumVal"] as? TestEnum
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumVal")
                    }
                }
                
                public var enumList: [TestEnum] {
                    get {
                        return snapshot["enumList"]! as! [TestEnum]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumList")
                    }
                }
                
                public var enumNullableList: [TestEnum]? {
                    get {
                        return snapshot["enumNullableList"] as? [TestEnum]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumNullableList")
                    }
                }
                
                public var nullableEnumList: [TestEnum?] {
                    get {
                        return snapshot["nullableEnumList"]! as! [TestEnum?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumList")
                    }
                }
                
                public var nullableEnumNullableList: [TestEnum?]? {
                    get {
                        return snapshot["nullableEnumNullableList"] as? [TestEnum?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class CreateNestedTypeTestModelMutation: GraphQLMutation {
        public static let operationString =
        "mutation CreateNestedTypeTestModel($input: CreateNestedTypeTestModelInput!, $condition: ModelNestedTypeTestModelConditionInput) {\n  createNestedTypeTestModel(input: $input, condition: $condition) {\n    __typename\n    id\n    nestedVal {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedVal {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nestedList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nestedNullableList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedNullableList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: CreateNestedTypeTestModelInput
        public var condition: ModelNestedTypeTestModelConditionInput?
        
        public init(input: CreateNestedTypeTestModelInput, condition: ModelNestedTypeTestModelConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("createNestedTypeTestModel", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateNestedTypeTestModel.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(createNestedTypeTestModel: CreateNestedTypeTestModel? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "createNestedTypeTestModel": createNestedTypeTestModel.flatMap { $0.snapshot }])
            }
            
            public var createNestedTypeTestModel: CreateNestedTypeTestModel? {
                get {
                    return (snapshot["createNestedTypeTestModel"] as? Snapshot).flatMap { CreateNestedTypeTestModel(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "createNestedTypeTestModel")
                }
            }
            
            public struct CreateNestedTypeTestModel: GraphQLSelectionSet {
                public static let possibleTypes = ["NestedTypeTestModel"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("nestedVal", type: .nonNull(.object(NestedVal.selections))),
                    GraphQLField("nullableNestedVal", type: .object(NullableNestedVal.selections)),
                    GraphQLField("nestedList", type: .nonNull(.list(.nonNull(.object(NestedList.selections))))),
                    GraphQLField("nestedNullableList", type: .list(.nonNull(.object(NestedNullableList.selections)))),
                    GraphQLField("nullableNestedList", type: .nonNull(.list(.object(NullableNestedList.selections)))),
                    GraphQLField("nullableNestedNullableList", type: .list(.object(NullableNestedNullableList.selections))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, nestedVal: NestedVal, nullableNestedVal: NullableNestedVal? = nil, nestedList: [NestedList], nestedNullableList: [NestedNullableList]? = nil, nullableNestedList: [NullableNestedList?], nullableNestedNullableList: [NullableNestedNullableList?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "NestedTypeTestModel", "id": id, "nestedVal": nestedVal.snapshot, "nullableNestedVal": nullableNestedVal.flatMap { $0.snapshot }, "nestedList": nestedList.map { $0.snapshot }, "nestedNullableList": nestedNullableList.flatMap { $0.map { $0.snapshot } }, "nullableNestedList": nullableNestedList.map { $0.flatMap { $0.snapshot } }, "nullableNestedNullableList": nullableNestedNullableList.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var nestedVal: NestedVal {
                    get {
                        return NestedVal(snapshot: snapshot["nestedVal"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "nestedVal")
                    }
                }
                
                public var nullableNestedVal: NullableNestedVal? {
                    get {
                        return (snapshot["nullableNestedVal"] as? Snapshot).flatMap { NullableNestedVal(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "nullableNestedVal")
                    }
                }
                
                public var nestedList: [NestedList] {
                    get {
                        return (snapshot["nestedList"] as! [Snapshot]).map { NestedList(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.snapshot }, forKey: "nestedList")
                    }
                }
                
                public var nestedNullableList: [NestedNullableList]? {
                    get {
                        return (snapshot["nestedNullableList"] as? [Snapshot]).flatMap { $0.map { NestedNullableList(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.flatMap { $0.map { $0.snapshot } }, forKey: "nestedNullableList")
                    }
                }
                
                public var nullableNestedList: [NullableNestedList?] {
                    get {
                        return (snapshot["nullableNestedList"] as! [Snapshot?]).map { $0.flatMap { NullableNestedList(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "nullableNestedList")
                    }
                }
                
                public var nullableNestedNullableList: [NullableNestedNullableList?]? {
                    get {
                        return (snapshot["nullableNestedNullableList"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { NullableNestedNullableList(snapshot: $0) } } }
                    }
                    set {
                        snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "nullableNestedNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct NestedVal: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedVal: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NestedList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NestedNullableList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedNullableList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
            }
        }
    }
    
    public final class UpdateNestedTypeTestModelMutation: GraphQLMutation {
        public static let operationString =
        "mutation UpdateNestedTypeTestModel($input: UpdateNestedTypeTestModelInput!, $condition: ModelNestedTypeTestModelConditionInput) {\n  updateNestedTypeTestModel(input: $input, condition: $condition) {\n    __typename\n    id\n    nestedVal {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedVal {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nestedList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nestedNullableList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedNullableList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: UpdateNestedTypeTestModelInput
        public var condition: ModelNestedTypeTestModelConditionInput?
        
        public init(input: UpdateNestedTypeTestModelInput, condition: ModelNestedTypeTestModelConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("updateNestedTypeTestModel", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateNestedTypeTestModel.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(updateNestedTypeTestModel: UpdateNestedTypeTestModel? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "updateNestedTypeTestModel": updateNestedTypeTestModel.flatMap { $0.snapshot }])
            }
            
            public var updateNestedTypeTestModel: UpdateNestedTypeTestModel? {
                get {
                    return (snapshot["updateNestedTypeTestModel"] as? Snapshot).flatMap { UpdateNestedTypeTestModel(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "updateNestedTypeTestModel")
                }
            }
            
            public struct UpdateNestedTypeTestModel: GraphQLSelectionSet {
                public static let possibleTypes = ["NestedTypeTestModel"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("nestedVal", type: .nonNull(.object(NestedVal.selections))),
                    GraphQLField("nullableNestedVal", type: .object(NullableNestedVal.selections)),
                    GraphQLField("nestedList", type: .nonNull(.list(.nonNull(.object(NestedList.selections))))),
                    GraphQLField("nestedNullableList", type: .list(.nonNull(.object(NestedNullableList.selections)))),
                    GraphQLField("nullableNestedList", type: .nonNull(.list(.object(NullableNestedList.selections)))),
                    GraphQLField("nullableNestedNullableList", type: .list(.object(NullableNestedNullableList.selections))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, nestedVal: NestedVal, nullableNestedVal: NullableNestedVal? = nil, nestedList: [NestedList], nestedNullableList: [NestedNullableList]? = nil, nullableNestedList: [NullableNestedList?], nullableNestedNullableList: [NullableNestedNullableList?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "NestedTypeTestModel", "id": id, "nestedVal": nestedVal.snapshot, "nullableNestedVal": nullableNestedVal.flatMap { $0.snapshot }, "nestedList": nestedList.map { $0.snapshot }, "nestedNullableList": nestedNullableList.flatMap { $0.map { $0.snapshot } }, "nullableNestedList": nullableNestedList.map { $0.flatMap { $0.snapshot } }, "nullableNestedNullableList": nullableNestedNullableList.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var nestedVal: NestedVal {
                    get {
                        return NestedVal(snapshot: snapshot["nestedVal"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "nestedVal")
                    }
                }
                
                public var nullableNestedVal: NullableNestedVal? {
                    get {
                        return (snapshot["nullableNestedVal"] as? Snapshot).flatMap { NullableNestedVal(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "nullableNestedVal")
                    }
                }
                
                public var nestedList: [NestedList] {
                    get {
                        return (snapshot["nestedList"] as! [Snapshot]).map { NestedList(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.snapshot }, forKey: "nestedList")
                    }
                }
                
                public var nestedNullableList: [NestedNullableList]? {
                    get {
                        return (snapshot["nestedNullableList"] as? [Snapshot]).flatMap { $0.map { NestedNullableList(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.flatMap { $0.map { $0.snapshot } }, forKey: "nestedNullableList")
                    }
                }
                
                public var nullableNestedList: [NullableNestedList?] {
                    get {
                        return (snapshot["nullableNestedList"] as! [Snapshot?]).map { $0.flatMap { NullableNestedList(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "nullableNestedList")
                    }
                }
                
                public var nullableNestedNullableList: [NullableNestedNullableList?]? {
                    get {
                        return (snapshot["nullableNestedNullableList"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { NullableNestedNullableList(snapshot: $0) } } }
                    }
                    set {
                        snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "nullableNestedNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct NestedVal: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedVal: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NestedList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NestedNullableList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedNullableList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
            }
        }
    }
    
    public final class DeleteNestedTypeTestModelMutation: GraphQLMutation {
        public static let operationString =
        "mutation DeleteNestedTypeTestModel($input: DeleteNestedTypeTestModelInput!, $condition: ModelNestedTypeTestModelConditionInput) {\n  deleteNestedTypeTestModel(input: $input, condition: $condition) {\n    __typename\n    id\n    nestedVal {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedVal {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nestedList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nestedNullableList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedNullableList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var input: DeleteNestedTypeTestModelInput
        public var condition: ModelNestedTypeTestModelConditionInput?
        
        public init(input: DeleteNestedTypeTestModelInput, condition: ModelNestedTypeTestModelConditionInput? = nil) {
            self.input = input
            self.condition = condition
        }
        
        public var variables: GraphQLMap? {
            return ["input": input, "condition": condition]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Mutation"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("deleteNestedTypeTestModel", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteNestedTypeTestModel.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(deleteNestedTypeTestModel: DeleteNestedTypeTestModel? = nil) {
                self.init(snapshot: ["__typename": "Mutation", "deleteNestedTypeTestModel": deleteNestedTypeTestModel.flatMap { $0.snapshot }])
            }
            
            public var deleteNestedTypeTestModel: DeleteNestedTypeTestModel? {
                get {
                    return (snapshot["deleteNestedTypeTestModel"] as? Snapshot).flatMap { DeleteNestedTypeTestModel(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "deleteNestedTypeTestModel")
                }
            }
            
            public struct DeleteNestedTypeTestModel: GraphQLSelectionSet {
                public static let possibleTypes = ["NestedTypeTestModel"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("nestedVal", type: .nonNull(.object(NestedVal.selections))),
                    GraphQLField("nullableNestedVal", type: .object(NullableNestedVal.selections)),
                    GraphQLField("nestedList", type: .nonNull(.list(.nonNull(.object(NestedList.selections))))),
                    GraphQLField("nestedNullableList", type: .list(.nonNull(.object(NestedNullableList.selections)))),
                    GraphQLField("nullableNestedList", type: .nonNull(.list(.object(NullableNestedList.selections)))),
                    GraphQLField("nullableNestedNullableList", type: .list(.object(NullableNestedNullableList.selections))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, nestedVal: NestedVal, nullableNestedVal: NullableNestedVal? = nil, nestedList: [NestedList], nestedNullableList: [NestedNullableList]? = nil, nullableNestedList: [NullableNestedList?], nullableNestedNullableList: [NullableNestedNullableList?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "NestedTypeTestModel", "id": id, "nestedVal": nestedVal.snapshot, "nullableNestedVal": nullableNestedVal.flatMap { $0.snapshot }, "nestedList": nestedList.map { $0.snapshot }, "nestedNullableList": nestedNullableList.flatMap { $0.map { $0.snapshot } }, "nullableNestedList": nullableNestedList.map { $0.flatMap { $0.snapshot } }, "nullableNestedNullableList": nullableNestedNullableList.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var nestedVal: NestedVal {
                    get {
                        return NestedVal(snapshot: snapshot["nestedVal"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "nestedVal")
                    }
                }
                
                public var nullableNestedVal: NullableNestedVal? {
                    get {
                        return (snapshot["nullableNestedVal"] as? Snapshot).flatMap { NullableNestedVal(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "nullableNestedVal")
                    }
                }
                
                public var nestedList: [NestedList] {
                    get {
                        return (snapshot["nestedList"] as! [Snapshot]).map { NestedList(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.snapshot }, forKey: "nestedList")
                    }
                }
                
                public var nestedNullableList: [NestedNullableList]? {
                    get {
                        return (snapshot["nestedNullableList"] as? [Snapshot]).flatMap { $0.map { NestedNullableList(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.flatMap { $0.map { $0.snapshot } }, forKey: "nestedNullableList")
                    }
                }
                
                public var nullableNestedList: [NullableNestedList?] {
                    get {
                        return (snapshot["nullableNestedList"] as! [Snapshot?]).map { $0.flatMap { NullableNestedList(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "nullableNestedList")
                    }
                }
                
                public var nullableNestedNullableList: [NullableNestedNullableList?]? {
                    get {
                        return (snapshot["nullableNestedNullableList"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { NullableNestedNullableList(snapshot: $0) } } }
                    }
                    set {
                        snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "nullableNestedNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct NestedVal: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedVal: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NestedList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NestedNullableList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedNullableList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
            }
        }
    }
    
    public final class GetPostQuery: GraphQLQuery {
        public static let operationString =
        "query GetPost($id: ID!) {\n  getPost(id: $id) {\n    __typename\n    id\n    title\n    content\n    createdAt\n    updatedAt\n    draft\n    rating\n    status\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getPost", arguments: ["id": GraphQLVariable("id")], type: .object(GetPost.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getPost: GetPost? = nil) {
                self.init(snapshot: ["__typename": "Query", "getPost": getPost.flatMap { $0.snapshot }])
            }
            
            public var getPost: GetPost? {
                get {
                    return (snapshot["getPost"] as? Snapshot).flatMap { GetPost(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getPost")
                }
            }
            
            public struct GetPost: GraphQLSelectionSet {
                public static let possibleTypes = ["Post"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .scalar(String.self)),
                    GraphQLField("draft", type: .scalar(Bool.self)),
                    GraphQLField("rating", type: .scalar(Double.self)),
                    GraphQLField("status", type: .scalar(PostStatus.self)),
                    GraphQLField("comments", type: .object(Comment.selections)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, content: String, createdAt: String, updatedAt: String? = nil, draft: Bool? = nil, rating: Double? = nil, status: PostStatus? = nil, comments: Comment? = nil) {
                    self.init(snapshot: ["__typename": "Post", "id": id, "title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status, "comments": comments.flatMap { $0.snapshot }])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String? {
                    get {
                        return snapshot["updatedAt"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public var draft: Bool? {
                    get {
                        return snapshot["draft"] as? Bool
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "draft")
                    }
                }
                
                public var rating: Double? {
                    get {
                        return snapshot["rating"] as? Double
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "rating")
                    }
                }
                
                public var status: PostStatus? {
                    get {
                        return snapshot["status"] as? PostStatus
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "status")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelCommentConnection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelCommentConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment", "id": id, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class ListPostsQuery: GraphQLQuery {
        public static let operationString =
        "query ListPosts($filter: ModelPostFilterInput, $limit: Int, $nextToken: String) {\n  listPosts(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      title\n      content\n      createdAt\n      updatedAt\n      draft\n      rating\n      status\n      comments {\n        __typename\n        nextToken\n      }\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelPostFilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelPostFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listPosts", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListPost.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listPosts: ListPost? = nil) {
                self.init(snapshot: ["__typename": "Query", "listPosts": listPosts.flatMap { $0.snapshot }])
            }
            
            public var listPosts: ListPost? {
                get {
                    return (snapshot["listPosts"] as? Snapshot).flatMap { ListPost(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listPosts")
                }
            }
            
            public struct ListPost: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelPostConnection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelPostConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("content", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .scalar(String.self)),
                        GraphQLField("draft", type: .scalar(Bool.self)),
                        GraphQLField("rating", type: .scalar(Double.self)),
                        GraphQLField("status", type: .scalar(PostStatus.self)),
                        GraphQLField("comments", type: .object(Comment.selections)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, content: String, createdAt: String, updatedAt: String? = nil, draft: Bool? = nil, rating: Double? = nil, status: PostStatus? = nil, comments: Comment? = nil) {
                        self.init(snapshot: ["__typename": "Post", "id": id, "title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status, "comments": comments.flatMap { $0.snapshot }])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var content: String {
                        get {
                            return snapshot["content"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "content")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String? {
                        get {
                            return snapshot["updatedAt"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public var draft: Bool? {
                        get {
                            return snapshot["draft"] as? Bool
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "draft")
                        }
                    }
                    
                    public var rating: Double? {
                        get {
                            return snapshot["rating"] as? Double
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "rating")
                        }
                    }
                    
                    public var status: PostStatus? {
                        get {
                            return snapshot["status"] as? PostStatus
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "status")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelCommentConnection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelCommentConnection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class GetCommentQuery: GraphQLQuery {
        public static let operationString =
        "query GetComment($id: ID!) {\n  getComment(id: $id) {\n    __typename\n    id\n    content\n    createdAt\n    post {\n      __typename\n      id\n      title\n      content\n      createdAt\n      updatedAt\n      draft\n      rating\n      status\n      comments {\n        __typename\n        nextToken\n      }\n    }\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getComment", arguments: ["id": GraphQLVariable("id")], type: .object(GetComment.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getComment: GetComment? = nil) {
                self.init(snapshot: ["__typename": "Query", "getComment": getComment.flatMap { $0.snapshot }])
            }
            
            public var getComment: GetComment? {
                get {
                    return (snapshot["getComment"] as? Snapshot).flatMap { GetComment(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getComment")
                }
            }
            
            public struct GetComment: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, content: String, createdAt: String, post: Post? = nil, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment", "id": id, "content": content, "createdAt": createdAt, "post": post.flatMap { $0.snapshot }, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("content", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .scalar(String.self)),
                        GraphQLField("draft", type: .scalar(Bool.self)),
                        GraphQLField("rating", type: .scalar(Double.self)),
                        GraphQLField("status", type: .scalar(PostStatus.self)),
                        GraphQLField("comments", type: .object(Comment.selections)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, content: String, createdAt: String, updatedAt: String? = nil, draft: Bool? = nil, rating: Double? = nil, status: PostStatus? = nil, comments: Comment? = nil) {
                        self.init(snapshot: ["__typename": "Post", "id": id, "title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status, "comments": comments.flatMap { $0.snapshot }])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var content: String {
                        get {
                            return snapshot["content"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "content")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String? {
                        get {
                            return snapshot["updatedAt"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public var draft: Bool? {
                        get {
                            return snapshot["draft"] as? Bool
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "draft")
                        }
                    }
                    
                    public var rating: Double? {
                        get {
                            return snapshot["rating"] as? Double
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "rating")
                        }
                    }
                    
                    public var status: PostStatus? {
                        get {
                            return snapshot["status"] as? PostStatus
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "status")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelCommentConnection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelCommentConnection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class ListCommentsQuery: GraphQLQuery {
        public static let operationString =
        "query ListComments($filter: ModelCommentFilterInput, $limit: Int, $nextToken: String) {\n  listComments(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      content\n      createdAt\n      post {\n        __typename\n        id\n        title\n        content\n        createdAt\n        updatedAt\n        draft\n        rating\n        status\n      }\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelCommentFilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelCommentFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listComments", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListComment.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listComments: ListComment? = nil) {
                self.init(snapshot: ["__typename": "Query", "listComments": listComments.flatMap { $0.snapshot }])
            }
            
            public var listComments: ListComment? {
                get {
                    return (snapshot["listComments"] as? Snapshot).flatMap { ListComment(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listComments")
                }
            }
            
            public struct ListComment: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelCommentConnection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelCommentConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["Comment"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("content", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("post", type: .object(Post.selections)),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, content: String, createdAt: String, post: Post? = nil, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Comment", "id": id, "content": content, "createdAt": createdAt, "post": post.flatMap { $0.snapshot }, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var content: String {
                        get {
                            return snapshot["content"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "content")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var post: Post? {
                        get {
                            return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "post")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["Post"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("title", type: .nonNull(.scalar(String.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .scalar(String.self)),
                            GraphQLField("draft", type: .scalar(Bool.self)),
                            GraphQLField("rating", type: .scalar(Double.self)),
                            GraphQLField("status", type: .scalar(PostStatus.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, title: String, content: String, createdAt: String, updatedAt: String? = nil, draft: Bool? = nil, rating: Double? = nil, status: PostStatus? = nil) {
                            self.init(snapshot: ["__typename": "Post", "id": id, "title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var title: String {
                            get {
                                return snapshot["title"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "title")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String? {
                            get {
                                return snapshot["updatedAt"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                        
                        public var draft: Bool? {
                            get {
                                return snapshot["draft"] as? Bool
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "draft")
                            }
                        }
                        
                        public var rating: Double? {
                            get {
                                return snapshot["rating"] as? Double
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "rating")
                            }
                        }
                        
                        public var status: PostStatus? {
                            get {
                                return snapshot["status"] as? PostStatus
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "status")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class GetProject1Query: GraphQLQuery {
        public static let operationString =
        "query GetProject1($id: ID!) {\n  getProject1(id: $id) {\n    __typename\n    id\n    name\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getProject1", arguments: ["id": GraphQLVariable("id")], type: .object(GetProject1.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getProject1: GetProject1? = nil) {
                self.init(snapshot: ["__typename": "Query", "getProject1": getProject1.flatMap { $0.snapshot }])
            }
            
            public var getProject1: GetProject1? {
                get {
                    return (snapshot["getProject1"] as? Snapshot).flatMap { GetProject1(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getProject1")
                }
            }
            
            public struct GetProject1: GraphQLSelectionSet {
                public static let possibleTypes = ["Project1"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .scalar(String.self)),
                    GraphQLField("team", type: .object(Team.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String? = nil, team: Team? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Project1", "id": id, "name": name, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String? {
                    get {
                        return snapshot["name"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var team: Team? {
                    get {
                        return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "team")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Team: GraphQLSelectionSet {
                    public static let possibleTypes = ["Team1"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Team1", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class ListProject1sQuery: GraphQLQuery {
        public static let operationString =
        "query ListProject1s($filter: ModelProject1FilterInput, $limit: Int, $nextToken: String) {\n  listProject1s(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      team {\n        __typename\n        id\n        name\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelProject1FilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelProject1FilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listProject1s", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListProject1.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listProject1s: ListProject1? = nil) {
                self.init(snapshot: ["__typename": "Query", "listProject1s": listProject1s.flatMap { $0.snapshot }])
            }
            
            public var listProject1s: ListProject1? {
                get {
                    return (snapshot["listProject1s"] as? Snapshot).flatMap { ListProject1(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listProject1s")
                }
            }
            
            public struct ListProject1: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelProject1Connection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelProject1Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["Project1"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .scalar(String.self)),
                        GraphQLField("team", type: .object(Team.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String? = nil, team: Team? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Project1", "id": id, "name": name, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String? {
                        get {
                            return snapshot["name"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var team: Team? {
                        get {
                            return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "team")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Team: GraphQLSelectionSet {
                        public static let possibleTypes = ["Team1"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Team1", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var name: String {
                            get {
                                return snapshot["name"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "name")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class GetTeam1Query: GraphQLQuery {
        public static let operationString =
        "query GetTeam1($id: ID!) {\n  getTeam1(id: $id) {\n    __typename\n    id\n    name\n    createdAt\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getTeam1", arguments: ["id": GraphQLVariable("id")], type: .object(GetTeam1.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getTeam1: GetTeam1? = nil) {
                self.init(snapshot: ["__typename": "Query", "getTeam1": getTeam1.flatMap { $0.snapshot }])
            }
            
            public var getTeam1: GetTeam1? {
                get {
                    return (snapshot["getTeam1"] as? Snapshot).flatMap { GetTeam1(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getTeam1")
                }
            }
            
            public struct GetTeam1: GraphQLSelectionSet {
                public static let possibleTypes = ["Team1"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Team1", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class ListTeam1sQuery: GraphQLQuery {
        public static let operationString =
        "query ListTeam1s($filter: ModelTeam1FilterInput, $limit: Int, $nextToken: String) {\n  listTeam1s(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelTeam1FilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelTeam1FilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listTeam1s", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListTeam1.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listTeam1s: ListTeam1? = nil) {
                self.init(snapshot: ["__typename": "Query", "listTeam1s": listTeam1s.flatMap { $0.snapshot }])
            }
            
            public var listTeam1s: ListTeam1? {
                get {
                    return (snapshot["listTeam1s"] as? Snapshot).flatMap { ListTeam1(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listTeam1s")
                }
            }
            
            public struct ListTeam1: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelTeam1Connection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelTeam1Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["Team1"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Team1", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class GetProject2Query: GraphQLQuery {
        public static let operationString =
        "query GetProject2($id: ID!) {\n  getProject2(id: $id) {\n    __typename\n    id\n    name\n    teamID\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getProject2", arguments: ["id": GraphQLVariable("id")], type: .object(GetProject2.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getProject2: GetProject2? = nil) {
                self.init(snapshot: ["__typename": "Query", "getProject2": getProject2.flatMap { $0.snapshot }])
            }
            
            public var getProject2: GetProject2? {
                get {
                    return (snapshot["getProject2"] as? Snapshot).flatMap { GetProject2(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getProject2")
                }
            }
            
            public struct GetProject2: GraphQLSelectionSet {
                public static let possibleTypes = ["Project2"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .scalar(String.self)),
                    GraphQLField("teamID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("team", type: .object(Team.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String? = nil, teamId: GraphQLID, team: Team? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Project2", "id": id, "name": name, "teamID": teamId, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String? {
                    get {
                        return snapshot["name"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var teamId: GraphQLID {
                    get {
                        return snapshot["teamID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "teamID")
                    }
                }
                
                public var team: Team? {
                    get {
                        return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "team")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Team: GraphQLSelectionSet {
                    public static let possibleTypes = ["Team2"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Team2", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class ListProject2sQuery: GraphQLQuery {
        public static let operationString =
        "query ListProject2s($filter: ModelProject2FilterInput, $limit: Int, $nextToken: String) {\n  listProject2s(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      teamID\n      team {\n        __typename\n        id\n        name\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelProject2FilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelProject2FilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listProject2s", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListProject2.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listProject2s: ListProject2? = nil) {
                self.init(snapshot: ["__typename": "Query", "listProject2s": listProject2s.flatMap { $0.snapshot }])
            }
            
            public var listProject2s: ListProject2? {
                get {
                    return (snapshot["listProject2s"] as? Snapshot).flatMap { ListProject2(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listProject2s")
                }
            }
            
            public struct ListProject2: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelProject2Connection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelProject2Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["Project2"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .scalar(String.self)),
                        GraphQLField("teamID", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("team", type: .object(Team.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String? = nil, teamId: GraphQLID, team: Team? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Project2", "id": id, "name": name, "teamID": teamId, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String? {
                        get {
                            return snapshot["name"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var teamId: GraphQLID {
                        get {
                            return snapshot["teamID"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "teamID")
                        }
                    }
                    
                    public var team: Team? {
                        get {
                            return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "team")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Team: GraphQLSelectionSet {
                        public static let possibleTypes = ["Team2"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Team2", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var name: String {
                            get {
                                return snapshot["name"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "name")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class GetTeam2Query: GraphQLQuery {
        public static let operationString =
        "query GetTeam2($id: ID!) {\n  getTeam2(id: $id) {\n    __typename\n    id\n    name\n    createdAt\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getTeam2", arguments: ["id": GraphQLVariable("id")], type: .object(GetTeam2.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getTeam2: GetTeam2? = nil) {
                self.init(snapshot: ["__typename": "Query", "getTeam2": getTeam2.flatMap { $0.snapshot }])
            }
            
            public var getTeam2: GetTeam2? {
                get {
                    return (snapshot["getTeam2"] as? Snapshot).flatMap { GetTeam2(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getTeam2")
                }
            }
            
            public struct GetTeam2: GraphQLSelectionSet {
                public static let possibleTypes = ["Team2"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Team2", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class ListTeam2sQuery: GraphQLQuery {
        public static let operationString =
        "query ListTeam2s($filter: ModelTeam2FilterInput, $limit: Int, $nextToken: String) {\n  listTeam2s(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelTeam2FilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelTeam2FilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listTeam2s", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListTeam2.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listTeam2s: ListTeam2? = nil) {
                self.init(snapshot: ["__typename": "Query", "listTeam2s": listTeam2s.flatMap { $0.snapshot }])
            }
            
            public var listTeam2s: ListTeam2? {
                get {
                    return (snapshot["listTeam2s"] as? Snapshot).flatMap { ListTeam2(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listTeam2s")
                }
            }
            
            public struct ListTeam2: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelTeam2Connection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelTeam2Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["Team2"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Team2", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class GetPost3Query: GraphQLQuery {
        public static let operationString =
        "query GetPost3($id: ID!) {\n  getPost3(id: $id) {\n    __typename\n    id\n    title\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getPost3", arguments: ["id": GraphQLVariable("id")], type: .object(GetPost3.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getPost3: GetPost3? = nil) {
                self.init(snapshot: ["__typename": "Query", "getPost3": getPost3.flatMap { $0.snapshot }])
            }
            
            public var getPost3: GetPost3? {
                get {
                    return (snapshot["getPost3"] as? Snapshot).flatMap { GetPost3(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getPost3")
                }
            }
            
            public struct GetPost3: GraphQLSelectionSet {
                public static let possibleTypes = ["Post3"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post3", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment3Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment3Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment3"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment3", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class ListPost3sQuery: GraphQLQuery {
        public static let operationString =
        "query ListPost3s($filter: ModelPost3FilterInput, $limit: Int, $nextToken: String) {\n  listPost3s(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      title\n      comments {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelPost3FilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelPost3FilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listPost3s", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListPost3.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listPost3s: ListPost3? = nil) {
                self.init(snapshot: ["__typename": "Query", "listPost3s": listPost3s.flatMap { $0.snapshot }])
            }
            
            public var listPost3s: ListPost3? {
                get {
                    return (snapshot["listPost3s"] as? Snapshot).flatMap { ListPost3(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listPost3s")
                }
            }
            
            public struct ListPost3: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelPost3Connection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelPost3Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post3"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("comments", type: .object(Comment.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post3", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelComment3Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelComment3Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class GetComment3Query: GraphQLQuery {
        public static let operationString =
        "query GetComment3($id: ID!) {\n  getComment3(id: $id) {\n    __typename\n    id\n    postID\n    content\n    createdAt\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getComment3", arguments: ["id": GraphQLVariable("id")], type: .object(GetComment3.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getComment3: GetComment3? = nil) {
                self.init(snapshot: ["__typename": "Query", "getComment3": getComment3.flatMap { $0.snapshot }])
            }
            
            public var getComment3: GetComment3? {
                get {
                    return (snapshot["getComment3"] as? Snapshot).flatMap { GetComment3(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getComment3")
                }
            }
            
            public struct GetComment3: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment3"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment3", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class ListComment3sQuery: GraphQLQuery {
        public static let operationString =
        "query ListComment3s($filter: ModelComment3FilterInput, $limit: Int, $nextToken: String) {\n  listComment3s(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      postID\n      content\n      createdAt\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelComment3FilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelComment3FilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listComment3s", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListComment3.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listComment3s: ListComment3? = nil) {
                self.init(snapshot: ["__typename": "Query", "listComment3s": listComment3s.flatMap { $0.snapshot }])
            }
            
            public var listComment3s: ListComment3? {
                get {
                    return (snapshot["listComment3s"] as? Snapshot).flatMap { ListComment3(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listComment3s")
                }
            }
            
            public struct ListComment3: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelComment3Connection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelComment3Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["Comment3"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("content", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Comment3", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var postId: GraphQLID {
                        get {
                            return snapshot["postID"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "postID")
                        }
                    }
                    
                    public var content: String {
                        get {
                            return snapshot["content"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "content")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class GetPost4Query: GraphQLQuery {
        public static let operationString =
        "query GetPost4($id: ID!) {\n  getPost4(id: $id) {\n    __typename\n    id\n    title\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getPost4", arguments: ["id": GraphQLVariable("id")], type: .object(GetPost4.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getPost4: GetPost4? = nil) {
                self.init(snapshot: ["__typename": "Query", "getPost4": getPost4.flatMap { $0.snapshot }])
            }
            
            public var getPost4: GetPost4? {
                get {
                    return (snapshot["getPost4"] as? Snapshot).flatMap { GetPost4(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getPost4")
                }
            }
            
            public struct GetPost4: GraphQLSelectionSet {
                public static let possibleTypes = ["Post4"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post4", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment4Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment4Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment4"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment4", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class ListPost4sQuery: GraphQLQuery {
        public static let operationString =
        "query ListPost4s($filter: ModelPost4FilterInput, $limit: Int, $nextToken: String) {\n  listPost4s(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      title\n      comments {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelPost4FilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelPost4FilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listPost4s", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListPost4.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listPost4s: ListPost4? = nil) {
                self.init(snapshot: ["__typename": "Query", "listPost4s": listPost4s.flatMap { $0.snapshot }])
            }
            
            public var listPost4s: ListPost4? {
                get {
                    return (snapshot["listPost4s"] as? Snapshot).flatMap { ListPost4(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listPost4s")
                }
            }
            
            public struct ListPost4: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelPost4Connection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelPost4Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post4"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("comments", type: .object(Comment.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post4", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelComment4Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelComment4Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class GetComment4Query: GraphQLQuery {
        public static let operationString =
        "query GetComment4($id: ID!) {\n  getComment4(id: $id) {\n    __typename\n    id\n    postID\n    content\n    post {\n      __typename\n      id\n      title\n      comments {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getComment4", arguments: ["id": GraphQLVariable("id")], type: .object(GetComment4.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getComment4: GetComment4? = nil) {
                self.init(snapshot: ["__typename": "Query", "getComment4": getComment4.flatMap { $0.snapshot }])
            }
            
            public var getComment4: GetComment4? {
                get {
                    return (snapshot["getComment4"] as? Snapshot).flatMap { GetComment4(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getComment4")
                }
            }
            
            public struct GetComment4: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment4"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, content: String, post: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment4", "id": id, "postID": postId, "content": content, "post": post.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post4"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("comments", type: .object(Comment.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post4", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelComment4Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelComment4Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class ListComment4sQuery: GraphQLQuery {
        public static let operationString =
        "query ListComment4s($filter: ModelComment4FilterInput, $limit: Int, $nextToken: String) {\n  listComment4s(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      postID\n      content\n      post {\n        __typename\n        id\n        title\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelComment4FilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelComment4FilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listComment4s", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListComment4.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listComment4s: ListComment4? = nil) {
                self.init(snapshot: ["__typename": "Query", "listComment4s": listComment4s.flatMap { $0.snapshot }])
            }
            
            public var listComment4s: ListComment4? {
                get {
                    return (snapshot["listComment4s"] as? Snapshot).flatMap { ListComment4(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listComment4s")
                }
            }
            
            public struct ListComment4: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelComment4Connection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelComment4Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["Comment4"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("content", type: .nonNull(.scalar(String.self))),
                        GraphQLField("post", type: .object(Post.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, postId: GraphQLID, content: String, post: Post? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Comment4", "id": id, "postID": postId, "content": content, "post": post.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var postId: GraphQLID {
                        get {
                            return snapshot["postID"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "postID")
                        }
                    }
                    
                    public var content: String {
                        get {
                            return snapshot["content"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "content")
                        }
                    }
                    
                    public var post: Post? {
                        get {
                            return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "post")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["Post4"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("title", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, title: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Post4", "id": id, "title": title, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var title: String {
                            get {
                                return snapshot["title"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "title")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class GetPost5Query: GraphQLQuery {
        public static let operationString =
        "query GetPost5($id: ID!) {\n  getPost5(id: $id) {\n    __typename\n    id\n    title\n    editors {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        editorID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getPost5", arguments: ["id": GraphQLVariable("id")], type: .object(GetPost5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getPost5: GetPost5? = nil) {
                self.init(snapshot: ["__typename": "Query", "getPost5": getPost5.flatMap { $0.snapshot }])
            }
            
            public var getPost5: GetPost5? {
                get {
                    return (snapshot["getPost5"] as? Snapshot).flatMap { GetPost5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getPost5")
                }
            }
            
            public struct GetPost5: GraphQLSelectionSet {
                public static let possibleTypes = ["Post5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("editors", type: .object(Editor.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, editors: Editor? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post5", "id": id, "title": title, "editors": editors.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var editors: Editor? {
                    get {
                        return (snapshot["editors"] as? Snapshot).flatMap { Editor(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "editors")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Editor: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPostEditor5Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["PostEditor5"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var editorId: GraphQLID {
                            get {
                                return snapshot["editorID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "editorID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class ListPost5sQuery: GraphQLQuery {
        public static let operationString =
        "query ListPost5s($filter: ModelPost5FilterInput, $limit: Int, $nextToken: String) {\n  listPost5s(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      title\n      editors {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelPost5FilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelPost5FilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listPost5s", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListPost5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listPost5s: ListPost5? = nil) {
                self.init(snapshot: ["__typename": "Query", "listPost5s": listPost5s.flatMap { $0.snapshot }])
            }
            
            public var listPost5s: ListPost5? {
                get {
                    return (snapshot["listPost5s"] as? Snapshot).flatMap { ListPost5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listPost5s")
                }
            }
            
            public struct ListPost5: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelPost5Connection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelPost5Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post5"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("editors", type: .object(Editor.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, editors: Editor? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post5", "id": id, "title": title, "editors": editors.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var editors: Editor? {
                        get {
                            return (snapshot["editors"] as? Snapshot).flatMap { Editor(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "editors")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Editor: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPostEditor5Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class GetPostEditor5Query: GraphQLQuery {
        public static let operationString =
        "query GetPostEditor5($id: ID!) {\n  getPostEditor5(id: $id) {\n    __typename\n    id\n    postID\n    editorID\n    post {\n      __typename\n      id\n      title\n      editors {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    editor {\n      __typename\n      id\n      username\n      posts {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getPostEditor5", arguments: ["id": GraphQLVariable("id")], type: .object(GetPostEditor5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getPostEditor5: GetPostEditor5? = nil) {
                self.init(snapshot: ["__typename": "Query", "getPostEditor5": getPostEditor5.flatMap { $0.snapshot }])
            }
            
            public var getPostEditor5: GetPostEditor5? {
                get {
                    return (snapshot["getPostEditor5"] as? Snapshot).flatMap { GetPostEditor5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getPostEditor5")
                }
            }
            
            public struct GetPostEditor5: GraphQLSelectionSet {
                public static let possibleTypes = ["PostEditor5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("post", type: .nonNull(.object(Post.selections))),
                    GraphQLField("editor", type: .nonNull(.object(Editor.selections))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, post: Post, editor: Editor, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "post": post.snapshot, "editor": editor.snapshot, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var editorId: GraphQLID {
                    get {
                        return snapshot["editorID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "editorID")
                    }
                }
                
                public var post: Post {
                    get {
                        return Post(snapshot: snapshot["post"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "post")
                    }
                }
                
                public var editor: Editor {
                    get {
                        return Editor(snapshot: snapshot["editor"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "editor")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post5"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("editors", type: .object(Editor.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, editors: Editor? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post5", "id": id, "title": title, "editors": editors.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var editors: Editor? {
                        get {
                            return (snapshot["editors"] as? Snapshot).flatMap { Editor(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "editors")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Editor: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPostEditor5Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
                
                public struct Editor: GraphQLSelectionSet {
                    public static let possibleTypes = ["User5"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("username", type: .nonNull(.scalar(String.self))),
                        GraphQLField("posts", type: .object(Post.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, username: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "User5", "id": id, "username": username, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var username: String {
                        get {
                            return snapshot["username"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "username")
                        }
                    }
                    
                    public var posts: Post? {
                        get {
                            return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPostEditor5Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class ListPostEditor5sQuery: GraphQLQuery {
        public static let operationString =
        "query ListPostEditor5s($filter: ModelPostEditor5FilterInput, $limit: Int, $nextToken: String) {\n  listPostEditor5s(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      postID\n      editorID\n      post {\n        __typename\n        id\n        title\n        createdAt\n        updatedAt\n      }\n      editor {\n        __typename\n        id\n        username\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelPostEditor5FilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelPostEditor5FilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listPostEditor5s", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListPostEditor5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listPostEditor5s: ListPostEditor5? = nil) {
                self.init(snapshot: ["__typename": "Query", "listPostEditor5s": listPostEditor5s.flatMap { $0.snapshot }])
            }
            
            public var listPostEditor5s: ListPostEditor5? {
                get {
                    return (snapshot["listPostEditor5s"] as? Snapshot).flatMap { ListPostEditor5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listPostEditor5s")
                }
            }
            
            public struct ListPostEditor5: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelPostEditor5Connection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["PostEditor5"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("post", type: .nonNull(.object(Post.selections))),
                        GraphQLField("editor", type: .nonNull(.object(Editor.selections))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, post: Post, editor: Editor, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "post": post.snapshot, "editor": editor.snapshot, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var postId: GraphQLID {
                        get {
                            return snapshot["postID"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "postID")
                        }
                    }
                    
                    public var editorId: GraphQLID {
                        get {
                            return snapshot["editorID"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "editorID")
                        }
                    }
                    
                    public var post: Post {
                        get {
                            return Post(snapshot: snapshot["post"]! as! Snapshot)
                        }
                        set {
                            snapshot.updateValue(newValue.snapshot, forKey: "post")
                        }
                    }
                    
                    public var editor: Editor {
                        get {
                            return Editor(snapshot: snapshot["editor"]! as! Snapshot)
                        }
                        set {
                            snapshot.updateValue(newValue.snapshot, forKey: "editor")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["Post5"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("title", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, title: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Post5", "id": id, "title": title, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var title: String {
                            get {
                                return snapshot["title"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "title")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                    
                    public struct Editor: GraphQLSelectionSet {
                        public static let possibleTypes = ["User5"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("username", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, username: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "User5", "id": id, "username": username, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var username: String {
                            get {
                                return snapshot["username"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "username")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class GetUser5Query: GraphQLQuery {
        public static let operationString =
        "query GetUser5($id: ID!) {\n  getUser5(id: $id) {\n    __typename\n    id\n    username\n    posts {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        editorID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getUser5", arguments: ["id": GraphQLVariable("id")], type: .object(GetUser5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getUser5: GetUser5? = nil) {
                self.init(snapshot: ["__typename": "Query", "getUser5": getUser5.flatMap { $0.snapshot }])
            }
            
            public var getUser5: GetUser5? {
                get {
                    return (snapshot["getUser5"] as? Snapshot).flatMap { GetUser5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getUser5")
                }
            }
            
            public struct GetUser5: GraphQLSelectionSet {
                public static let possibleTypes = ["User5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("username", type: .nonNull(.scalar(String.self))),
                    GraphQLField("posts", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, username: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "User5", "id": id, "username": username, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var username: String {
                    get {
                        return snapshot["username"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "username")
                    }
                }
                
                public var posts: Post? {
                    get {
                        return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPostEditor5Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["PostEditor5"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var editorId: GraphQLID {
                            get {
                                return snapshot["editorID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "editorID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class ListUser5sQuery: GraphQLQuery {
        public static let operationString =
        "query ListUser5s($filter: ModelUser5FilterInput, $limit: Int, $nextToken: String) {\n  listUser5s(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      username\n      posts {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelUser5FilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelUser5FilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listUser5s", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListUser5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listUser5s: ListUser5? = nil) {
                self.init(snapshot: ["__typename": "Query", "listUser5s": listUser5s.flatMap { $0.snapshot }])
            }
            
            public var listUser5s: ListUser5? {
                get {
                    return (snapshot["listUser5s"] as? Snapshot).flatMap { ListUser5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listUser5s")
                }
            }
            
            public struct ListUser5: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelUser5Connection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelUser5Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["User5"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("username", type: .nonNull(.scalar(String.self))),
                        GraphQLField("posts", type: .object(Post.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, username: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "User5", "id": id, "username": username, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var username: String {
                        get {
                            return snapshot["username"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "username")
                        }
                    }
                    
                    public var posts: Post? {
                        get {
                            return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPostEditor5Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class GetBlog6Query: GraphQLQuery {
        public static let operationString =
        "query GetBlog6($id: ID!) {\n  getBlog6(id: $id) {\n    __typename\n    id\n    name\n    posts {\n      __typename\n      items {\n        __typename\n        id\n        title\n        blogID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getBlog6", arguments: ["id": GraphQLVariable("id")], type: .object(GetBlog6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getBlog6: GetBlog6? = nil) {
                self.init(snapshot: ["__typename": "Query", "getBlog6": getBlog6.flatMap { $0.snapshot }])
            }
            
            public var getBlog6: GetBlog6? {
                get {
                    return (snapshot["getBlog6"] as? Snapshot).flatMap { GetBlog6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getBlog6")
                }
            }
            
            public struct GetBlog6: GraphQLSelectionSet {
                public static let possibleTypes = ["Blog6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("posts", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var posts: Post? {
                    get {
                        return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPost6Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPost6Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Post6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("title", type: .nonNull(.scalar(String.self))),
                            GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, title: String, blogId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var title: String {
                            get {
                                return snapshot["title"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "title")
                            }
                        }
                        
                        public var blogId: GraphQLID {
                            get {
                                return snapshot["blogID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "blogID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class ListBlog6sQuery: GraphQLQuery {
        public static let operationString =
        "query ListBlog6s($filter: ModelBlog6FilterInput, $limit: Int, $nextToken: String) {\n  listBlog6s(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      posts {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelBlog6FilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelBlog6FilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listBlog6s", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListBlog6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listBlog6s: ListBlog6? = nil) {
                self.init(snapshot: ["__typename": "Query", "listBlog6s": listBlog6s.flatMap { $0.snapshot }])
            }
            
            public var listBlog6s: ListBlog6? {
                get {
                    return (snapshot["listBlog6s"] as? Snapshot).flatMap { ListBlog6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listBlog6s")
                }
            }
            
            public struct ListBlog6: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelBlog6Connection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelBlog6Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["Blog6"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("posts", type: .object(Post.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var posts: Post? {
                        get {
                            return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPost6Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPost6Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class GetPost6Query: GraphQLQuery {
        public static let operationString =
        "query GetPost6($id: ID!) {\n  getPost6(id: $id) {\n    __typename\n    id\n    title\n    blogID\n    blog {\n      __typename\n      id\n      name\n      posts {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getPost6", arguments: ["id": GraphQLVariable("id")], type: .object(GetPost6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getPost6: GetPost6? = nil) {
                self.init(snapshot: ["__typename": "Query", "getPost6": getPost6.flatMap { $0.snapshot }])
            }
            
            public var getPost6: GetPost6? {
                get {
                    return (snapshot["getPost6"] as? Snapshot).flatMap { GetPost6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getPost6")
                }
            }
            
            public struct GetPost6: GraphQLSelectionSet {
                public static let possibleTypes = ["Post6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("blog", type: .object(Blog.selections)),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, blogId: GraphQLID, blog: Blog? = nil, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "blog": blog.flatMap { $0.snapshot }, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var blogId: GraphQLID {
                    get {
                        return snapshot["blogID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "blogID")
                    }
                }
                
                public var blog: Blog? {
                    get {
                        return (snapshot["blog"] as? Snapshot).flatMap { Blog(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "blog")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Blog: GraphQLSelectionSet {
                    public static let possibleTypes = ["Blog6"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("posts", type: .object(Post.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var posts: Post? {
                        get {
                            return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPost6Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPost6Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment6Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment6Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment6", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class ListPost6sQuery: GraphQLQuery {
        public static let operationString =
        "query ListPost6s($filter: ModelPost6FilterInput, $limit: Int, $nextToken: String) {\n  listPost6s(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      title\n      blogID\n      blog {\n        __typename\n        id\n        name\n        createdAt\n        updatedAt\n      }\n      comments {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelPost6FilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelPost6FilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listPost6s", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListPost6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listPost6s: ListPost6? = nil) {
                self.init(snapshot: ["__typename": "Query", "listPost6s": listPost6s.flatMap { $0.snapshot }])
            }
            
            public var listPost6s: ListPost6? {
                get {
                    return (snapshot["listPost6s"] as? Snapshot).flatMap { ListPost6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listPost6s")
                }
            }
            
            public struct ListPost6: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelPost6Connection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelPost6Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post6"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("blog", type: .object(Blog.selections)),
                        GraphQLField("comments", type: .object(Comment.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, blogId: GraphQLID, blog: Blog? = nil, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "blog": blog.flatMap { $0.snapshot }, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var blogId: GraphQLID {
                        get {
                            return snapshot["blogID"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "blogID")
                        }
                    }
                    
                    public var blog: Blog? {
                        get {
                            return (snapshot["blog"] as? Snapshot).flatMap { Blog(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "blog")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Blog: GraphQLSelectionSet {
                        public static let possibleTypes = ["Blog6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var name: String {
                            get {
                                return snapshot["name"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "name")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelComment6Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelComment6Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class GetComment6Query: GraphQLQuery {
        public static let operationString =
        "query GetComment6($id: ID!) {\n  getComment6(id: $id) {\n    __typename\n    id\n    postID\n    post {\n      __typename\n      id\n      title\n      blogID\n      blog {\n        __typename\n        id\n        name\n        createdAt\n        updatedAt\n      }\n      comments {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    content\n    createdAt\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getComment6", arguments: ["id": GraphQLVariable("id")], type: .object(GetComment6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getComment6: GetComment6? = nil) {
                self.init(snapshot: ["__typename": "Query", "getComment6": getComment6.flatMap { $0.snapshot }])
            }
            
            public var getComment6: GetComment6? {
                get {
                    return (snapshot["getComment6"] as? Snapshot).flatMap { GetComment6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getComment6")
                }
            }
            
            public struct GetComment6: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, post: Post? = nil, content: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment6", "id": id, "postID": postId, "post": post.flatMap { $0.snapshot }, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post6"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("blog", type: .object(Blog.selections)),
                        GraphQLField("comments", type: .object(Comment.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, blogId: GraphQLID, blog: Blog? = nil, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "blog": blog.flatMap { $0.snapshot }, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var blogId: GraphQLID {
                        get {
                            return snapshot["blogID"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "blogID")
                        }
                    }
                    
                    public var blog: Blog? {
                        get {
                            return (snapshot["blog"] as? Snapshot).flatMap { Blog(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "blog")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Blog: GraphQLSelectionSet {
                        public static let possibleTypes = ["Blog6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var name: String {
                            get {
                                return snapshot["name"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "name")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelComment6Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelComment6Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class ListComment6sQuery: GraphQLQuery {
        public static let operationString =
        "query ListComment6s($filter: ModelComment6FilterInput, $limit: Int, $nextToken: String) {\n  listComment6s(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      postID\n      post {\n        __typename\n        id\n        title\n        blogID\n        createdAt\n        updatedAt\n      }\n      content\n      createdAt\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelComment6FilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelComment6FilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listComment6s", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListComment6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listComment6s: ListComment6? = nil) {
                self.init(snapshot: ["__typename": "Query", "listComment6s": listComment6s.flatMap { $0.snapshot }])
            }
            
            public var listComment6s: ListComment6? {
                get {
                    return (snapshot["listComment6s"] as? Snapshot).flatMap { ListComment6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listComment6s")
                }
            }
            
            public struct ListComment6: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelComment6Connection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelComment6Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["Comment6"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("post", type: .object(Post.selections)),
                        GraphQLField("content", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, postId: GraphQLID, post: Post? = nil, content: String, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Comment6", "id": id, "postID": postId, "post": post.flatMap { $0.snapshot }, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var postId: GraphQLID {
                        get {
                            return snapshot["postID"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "postID")
                        }
                    }
                    
                    public var post: Post? {
                        get {
                            return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "post")
                        }
                    }
                    
                    public var content: String {
                        get {
                            return snapshot["content"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "content")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["Post6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("title", type: .nonNull(.scalar(String.self))),
                            GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, title: String, blogId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var title: String {
                            get {
                                return snapshot["title"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "title")
                            }
                        }
                        
                        public var blogId: GraphQLID {
                            get {
                                return snapshot["blogID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "blogID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class GetScalarContainerQuery: GraphQLQuery {
        public static let operationString =
        "query GetScalarContainer($id: ID!) {\n  getScalarContainer(id: $id) {\n    __typename\n    id\n    myString\n    myInt\n    myDouble\n    myBool\n    myDate\n    myTime\n    myDateTime\n    myTimeStamp\n    myEmail\n    myJSON\n    myPhone\n    myURL\n    myIPAddress\n    createdAt\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getScalarContainer", arguments: ["id": GraphQLVariable("id")], type: .object(GetScalarContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getScalarContainer: GetScalarContainer? = nil) {
                self.init(snapshot: ["__typename": "Query", "getScalarContainer": getScalarContainer.flatMap { $0.snapshot }])
            }
            
            public var getScalarContainer: GetScalarContainer? {
                get {
                    return (snapshot["getScalarContainer"] as? Snapshot).flatMap { GetScalarContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getScalarContainer")
                }
            }
            
            public struct GetScalarContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ScalarContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("myString", type: .scalar(String.self)),
                    GraphQLField("myInt", type: .scalar(Int.self)),
                    GraphQLField("myDouble", type: .scalar(Double.self)),
                    GraphQLField("myBool", type: .scalar(Bool.self)),
                    GraphQLField("myDate", type: .scalar(String.self)),
                    GraphQLField("myTime", type: .scalar(String.self)),
                    GraphQLField("myDateTime", type: .scalar(String.self)),
                    GraphQLField("myTimeStamp", type: .scalar(Int.self)),
                    GraphQLField("myEmail", type: .scalar(String.self)),
                    GraphQLField("myJSON", type: .scalar(String.self)),
                    GraphQLField("myPhone", type: .scalar(String.self)),
                    GraphQLField("myURL", type: .scalar(String.self)),
                    GraphQLField("myIPAddress", type: .scalar(String.self)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, myString: String? = nil, myInt: Int? = nil, myDouble: Double? = nil, myBool: Bool? = nil, myDate: String? = nil, myTime: String? = nil, myDateTime: String? = nil, myTimeStamp: Int? = nil, myEmail: String? = nil, myJson: String? = nil, myPhone: String? = nil, myUrl: String? = nil, myIpAddress: String? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ScalarContainer", "id": id, "myString": myString, "myInt": myInt, "myDouble": myDouble, "myBool": myBool, "myDate": myDate, "myTime": myTime, "myDateTime": myDateTime, "myTimeStamp": myTimeStamp, "myEmail": myEmail, "myJSON": myJson, "myPhone": myPhone, "myURL": myUrl, "myIPAddress": myIpAddress, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var myString: String? {
                    get {
                        return snapshot["myString"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myString")
                    }
                }
                
                public var myInt: Int? {
                    get {
                        return snapshot["myInt"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myInt")
                    }
                }
                
                public var myDouble: Double? {
                    get {
                        return snapshot["myDouble"] as? Double
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDouble")
                    }
                }
                
                public var myBool: Bool? {
                    get {
                        return snapshot["myBool"] as? Bool
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myBool")
                    }
                }
                
                public var myDate: String? {
                    get {
                        return snapshot["myDate"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDate")
                    }
                }
                
                public var myTime: String? {
                    get {
                        return snapshot["myTime"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myTime")
                    }
                }
                
                public var myDateTime: String? {
                    get {
                        return snapshot["myDateTime"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDateTime")
                    }
                }
                
                public var myTimeStamp: Int? {
                    get {
                        return snapshot["myTimeStamp"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myTimeStamp")
                    }
                }
                
                public var myEmail: String? {
                    get {
                        return snapshot["myEmail"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myEmail")
                    }
                }
                
                public var myJson: String? {
                    get {
                        return snapshot["myJSON"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myJSON")
                    }
                }
                
                public var myPhone: String? {
                    get {
                        return snapshot["myPhone"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myPhone")
                    }
                }
                
                public var myUrl: String? {
                    get {
                        return snapshot["myURL"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myURL")
                    }
                }
                
                public var myIpAddress: String? {
                    get {
                        return snapshot["myIPAddress"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myIPAddress")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class ListScalarContainersQuery: GraphQLQuery {
        public static let operationString =
        "query ListScalarContainers($filter: ModelScalarContainerFilterInput, $limit: Int, $nextToken: String) {\n  listScalarContainers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      myString\n      myInt\n      myDouble\n      myBool\n      myDate\n      myTime\n      myDateTime\n      myTimeStamp\n      myEmail\n      myJSON\n      myPhone\n      myURL\n      myIPAddress\n      createdAt\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelScalarContainerFilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelScalarContainerFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listScalarContainers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListScalarContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listScalarContainers: ListScalarContainer? = nil) {
                self.init(snapshot: ["__typename": "Query", "listScalarContainers": listScalarContainers.flatMap { $0.snapshot }])
            }
            
            public var listScalarContainers: ListScalarContainer? {
                get {
                    return (snapshot["listScalarContainers"] as? Snapshot).flatMap { ListScalarContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listScalarContainers")
                }
            }
            
            public struct ListScalarContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelScalarContainerConnection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelScalarContainerConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["ScalarContainer"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("myString", type: .scalar(String.self)),
                        GraphQLField("myInt", type: .scalar(Int.self)),
                        GraphQLField("myDouble", type: .scalar(Double.self)),
                        GraphQLField("myBool", type: .scalar(Bool.self)),
                        GraphQLField("myDate", type: .scalar(String.self)),
                        GraphQLField("myTime", type: .scalar(String.self)),
                        GraphQLField("myDateTime", type: .scalar(String.self)),
                        GraphQLField("myTimeStamp", type: .scalar(Int.self)),
                        GraphQLField("myEmail", type: .scalar(String.self)),
                        GraphQLField("myJSON", type: .scalar(String.self)),
                        GraphQLField("myPhone", type: .scalar(String.self)),
                        GraphQLField("myURL", type: .scalar(String.self)),
                        GraphQLField("myIPAddress", type: .scalar(String.self)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, myString: String? = nil, myInt: Int? = nil, myDouble: Double? = nil, myBool: Bool? = nil, myDate: String? = nil, myTime: String? = nil, myDateTime: String? = nil, myTimeStamp: Int? = nil, myEmail: String? = nil, myJson: String? = nil, myPhone: String? = nil, myUrl: String? = nil, myIpAddress: String? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "ScalarContainer", "id": id, "myString": myString, "myInt": myInt, "myDouble": myDouble, "myBool": myBool, "myDate": myDate, "myTime": myTime, "myDateTime": myDateTime, "myTimeStamp": myTimeStamp, "myEmail": myEmail, "myJSON": myJson, "myPhone": myPhone, "myURL": myUrl, "myIPAddress": myIpAddress, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var myString: String? {
                        get {
                            return snapshot["myString"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "myString")
                        }
                    }
                    
                    public var myInt: Int? {
                        get {
                            return snapshot["myInt"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "myInt")
                        }
                    }
                    
                    public var myDouble: Double? {
                        get {
                            return snapshot["myDouble"] as? Double
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "myDouble")
                        }
                    }
                    
                    public var myBool: Bool? {
                        get {
                            return snapshot["myBool"] as? Bool
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "myBool")
                        }
                    }
                    
                    public var myDate: String? {
                        get {
                            return snapshot["myDate"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "myDate")
                        }
                    }
                    
                    public var myTime: String? {
                        get {
                            return snapshot["myTime"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "myTime")
                        }
                    }
                    
                    public var myDateTime: String? {
                        get {
                            return snapshot["myDateTime"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "myDateTime")
                        }
                    }
                    
                    public var myTimeStamp: Int? {
                        get {
                            return snapshot["myTimeStamp"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "myTimeStamp")
                        }
                    }
                    
                    public var myEmail: String? {
                        get {
                            return snapshot["myEmail"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "myEmail")
                        }
                    }
                    
                    public var myJson: String? {
                        get {
                            return snapshot["myJSON"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "myJSON")
                        }
                    }
                    
                    public var myPhone: String? {
                        get {
                            return snapshot["myPhone"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "myPhone")
                        }
                    }
                    
                    public var myUrl: String? {
                        get {
                            return snapshot["myURL"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "myURL")
                        }
                    }
                    
                    public var myIpAddress: String? {
                        get {
                            return snapshot["myIPAddress"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "myIPAddress")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class GetListIntContainerQuery: GraphQLQuery {
        public static let operationString =
        "query GetListIntContainer($id: ID!) {\n  getListIntContainer(id: $id) {\n    __typename\n    id\n    test\n    nullableInt\n    intList\n    intNullableList\n    nullableIntList\n    nullableIntNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getListIntContainer", arguments: ["id": GraphQLVariable("id")], type: .object(GetListIntContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getListIntContainer: GetListIntContainer? = nil) {
                self.init(snapshot: ["__typename": "Query", "getListIntContainer": getListIntContainer.flatMap { $0.snapshot }])
            }
            
            public var getListIntContainer: GetListIntContainer? {
                get {
                    return (snapshot["getListIntContainer"] as? Snapshot).flatMap { GetListIntContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getListIntContainer")
                }
            }
            
            public struct GetListIntContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ListIntContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("test", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("nullableInt", type: .scalar(Int.self)),
                    GraphQLField("intList", type: .nonNull(.list(.nonNull(.scalar(Int.self))))),
                    GraphQLField("intNullableList", type: .list(.nonNull(.scalar(Int.self)))),
                    GraphQLField("nullableIntList", type: .nonNull(.list(.scalar(Int.self)))),
                    GraphQLField("nullableIntNullableList", type: .list(.scalar(Int.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, test: Int, nullableInt: Int? = nil, intList: [Int], intNullableList: [Int]? = nil, nullableIntList: [Int?], nullableIntNullableList: [Int?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ListIntContainer", "id": id, "test": test, "nullableInt": nullableInt, "intList": intList, "intNullableList": intNullableList, "nullableIntList": nullableIntList, "nullableIntNullableList": nullableIntNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var test: Int {
                    get {
                        return snapshot["test"]! as! Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "test")
                    }
                }
                
                public var nullableInt: Int? {
                    get {
                        return snapshot["nullableInt"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableInt")
                    }
                }
                
                public var intList: [Int] {
                    get {
                        return snapshot["intList"]! as! [Int]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "intList")
                    }
                }
                
                public var intNullableList: [Int]? {
                    get {
                        return snapshot["intNullableList"] as? [Int]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "intNullableList")
                    }
                }
                
                public var nullableIntList: [Int?] {
                    get {
                        return snapshot["nullableIntList"]! as! [Int?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableIntList")
                    }
                }
                
                public var nullableIntNullableList: [Int?]? {
                    get {
                        return snapshot["nullableIntNullableList"] as? [Int?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableIntNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class ListListIntContainersQuery: GraphQLQuery {
        public static let operationString =
        "query ListListIntContainers($filter: ModelListIntContainerFilterInput, $limit: Int, $nextToken: String) {\n  listListIntContainers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      test\n      nullableInt\n      intList\n      intNullableList\n      nullableIntList\n      nullableIntNullableList\n      createdAt\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelListIntContainerFilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelListIntContainerFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listListIntContainers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListListIntContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listListIntContainers: ListListIntContainer? = nil) {
                self.init(snapshot: ["__typename": "Query", "listListIntContainers": listListIntContainers.flatMap { $0.snapshot }])
            }
            
            public var listListIntContainers: ListListIntContainer? {
                get {
                    return (snapshot["listListIntContainers"] as? Snapshot).flatMap { ListListIntContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listListIntContainers")
                }
            }
            
            public struct ListListIntContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelListIntContainerConnection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelListIntContainerConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["ListIntContainer"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("test", type: .nonNull(.scalar(Int.self))),
                        GraphQLField("nullableInt", type: .scalar(Int.self)),
                        GraphQLField("intList", type: .nonNull(.list(.nonNull(.scalar(Int.self))))),
                        GraphQLField("intNullableList", type: .list(.nonNull(.scalar(Int.self)))),
                        GraphQLField("nullableIntList", type: .nonNull(.list(.scalar(Int.self)))),
                        GraphQLField("nullableIntNullableList", type: .list(.scalar(Int.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, test: Int, nullableInt: Int? = nil, intList: [Int], intNullableList: [Int]? = nil, nullableIntList: [Int?], nullableIntNullableList: [Int?]? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "ListIntContainer", "id": id, "test": test, "nullableInt": nullableInt, "intList": intList, "intNullableList": intNullableList, "nullableIntList": nullableIntList, "nullableIntNullableList": nullableIntNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var test: Int {
                        get {
                            return snapshot["test"]! as! Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "test")
                        }
                    }
                    
                    public var nullableInt: Int? {
                        get {
                            return snapshot["nullableInt"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nullableInt")
                        }
                    }
                    
                    public var intList: [Int] {
                        get {
                            return snapshot["intList"]! as! [Int]
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "intList")
                        }
                    }
                    
                    public var intNullableList: [Int]? {
                        get {
                            return snapshot["intNullableList"] as? [Int]
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "intNullableList")
                        }
                    }
                    
                    public var nullableIntList: [Int?] {
                        get {
                            return snapshot["nullableIntList"]! as! [Int?]
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nullableIntList")
                        }
                    }
                    
                    public var nullableIntNullableList: [Int?]? {
                        get {
                            return snapshot["nullableIntNullableList"] as? [Int?]
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nullableIntNullableList")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class GetListStringContainerQuery: GraphQLQuery {
        public static let operationString =
        "query GetListStringContainer($id: ID!) {\n  getListStringContainer(id: $id) {\n    __typename\n    id\n    test\n    nullableString\n    stringList\n    stringNullableList\n    nullableStringList\n    nullableStringNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getListStringContainer", arguments: ["id": GraphQLVariable("id")], type: .object(GetListStringContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getListStringContainer: GetListStringContainer? = nil) {
                self.init(snapshot: ["__typename": "Query", "getListStringContainer": getListStringContainer.flatMap { $0.snapshot }])
            }
            
            public var getListStringContainer: GetListStringContainer? {
                get {
                    return (snapshot["getListStringContainer"] as? Snapshot).flatMap { GetListStringContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getListStringContainer")
                }
            }
            
            public struct GetListStringContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ListStringContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("test", type: .nonNull(.scalar(String.self))),
                    GraphQLField("nullableString", type: .scalar(String.self)),
                    GraphQLField("stringList", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
                    GraphQLField("stringNullableList", type: .list(.nonNull(.scalar(String.self)))),
                    GraphQLField("nullableStringList", type: .nonNull(.list(.scalar(String.self)))),
                    GraphQLField("nullableStringNullableList", type: .list(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, test: String, nullableString: String? = nil, stringList: [String], stringNullableList: [String]? = nil, nullableStringList: [String?], nullableStringNullableList: [String?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ListStringContainer", "id": id, "test": test, "nullableString": nullableString, "stringList": stringList, "stringNullableList": stringNullableList, "nullableStringList": nullableStringList, "nullableStringNullableList": nullableStringNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var test: String {
                    get {
                        return snapshot["test"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "test")
                    }
                }
                
                public var nullableString: String? {
                    get {
                        return snapshot["nullableString"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableString")
                    }
                }
                
                public var stringList: [String] {
                    get {
                        return snapshot["stringList"]! as! [String]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "stringList")
                    }
                }
                
                public var stringNullableList: [String]? {
                    get {
                        return snapshot["stringNullableList"] as? [String]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "stringNullableList")
                    }
                }
                
                public var nullableStringList: [String?] {
                    get {
                        return snapshot["nullableStringList"]! as! [String?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableStringList")
                    }
                }
                
                public var nullableStringNullableList: [String?]? {
                    get {
                        return snapshot["nullableStringNullableList"] as? [String?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableStringNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class ListListStringContainersQuery: GraphQLQuery {
        public static let operationString =
        "query ListListStringContainers($filter: ModelListStringContainerFilterInput, $limit: Int, $nextToken: String) {\n  listListStringContainers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      test\n      nullableString\n      stringList\n      stringNullableList\n      nullableStringList\n      nullableStringNullableList\n      createdAt\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelListStringContainerFilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelListStringContainerFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listListStringContainers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListListStringContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listListStringContainers: ListListStringContainer? = nil) {
                self.init(snapshot: ["__typename": "Query", "listListStringContainers": listListStringContainers.flatMap { $0.snapshot }])
            }
            
            public var listListStringContainers: ListListStringContainer? {
                get {
                    return (snapshot["listListStringContainers"] as? Snapshot).flatMap { ListListStringContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listListStringContainers")
                }
            }
            
            public struct ListListStringContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelListStringContainerConnection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelListStringContainerConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["ListStringContainer"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("test", type: .nonNull(.scalar(String.self))),
                        GraphQLField("nullableString", type: .scalar(String.self)),
                        GraphQLField("stringList", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
                        GraphQLField("stringNullableList", type: .list(.nonNull(.scalar(String.self)))),
                        GraphQLField("nullableStringList", type: .nonNull(.list(.scalar(String.self)))),
                        GraphQLField("nullableStringNullableList", type: .list(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, test: String, nullableString: String? = nil, stringList: [String], stringNullableList: [String]? = nil, nullableStringList: [String?], nullableStringNullableList: [String?]? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "ListStringContainer", "id": id, "test": test, "nullableString": nullableString, "stringList": stringList, "stringNullableList": stringNullableList, "nullableStringList": nullableStringList, "nullableStringNullableList": nullableStringNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var test: String {
                        get {
                            return snapshot["test"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "test")
                        }
                    }
                    
                    public var nullableString: String? {
                        get {
                            return snapshot["nullableString"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nullableString")
                        }
                    }
                    
                    public var stringList: [String] {
                        get {
                            return snapshot["stringList"]! as! [String]
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "stringList")
                        }
                    }
                    
                    public var stringNullableList: [String]? {
                        get {
                            return snapshot["stringNullableList"] as? [String]
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "stringNullableList")
                        }
                    }
                    
                    public var nullableStringList: [String?] {
                        get {
                            return snapshot["nullableStringList"]! as! [String?]
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nullableStringList")
                        }
                    }
                    
                    public var nullableStringNullableList: [String?]? {
                        get {
                            return snapshot["nullableStringNullableList"] as? [String?]
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nullableStringNullableList")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class GetEnumTestModelQuery: GraphQLQuery {
        public static let operationString =
        "query GetEnumTestModel($id: ID!) {\n  getEnumTestModel(id: $id) {\n    __typename\n    id\n    enumVal\n    nullableEnumVal\n    enumList\n    enumNullableList\n    nullableEnumList\n    nullableEnumNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getEnumTestModel", arguments: ["id": GraphQLVariable("id")], type: .object(GetEnumTestModel.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getEnumTestModel: GetEnumTestModel? = nil) {
                self.init(snapshot: ["__typename": "Query", "getEnumTestModel": getEnumTestModel.flatMap { $0.snapshot }])
            }
            
            public var getEnumTestModel: GetEnumTestModel? {
                get {
                    return (snapshot["getEnumTestModel"] as? Snapshot).flatMap { GetEnumTestModel(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getEnumTestModel")
                }
            }
            
            public struct GetEnumTestModel: GraphQLSelectionSet {
                public static let possibleTypes = ["EnumTestModel"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("enumVal", type: .nonNull(.scalar(TestEnum.self))),
                    GraphQLField("nullableEnumVal", type: .scalar(TestEnum.self)),
                    GraphQLField("enumList", type: .nonNull(.list(.nonNull(.scalar(TestEnum.self))))),
                    GraphQLField("enumNullableList", type: .list(.nonNull(.scalar(TestEnum.self)))),
                    GraphQLField("nullableEnumList", type: .nonNull(.list(.scalar(TestEnum.self)))),
                    GraphQLField("nullableEnumNullableList", type: .list(.scalar(TestEnum.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, enumVal: TestEnum, nullableEnumVal: TestEnum? = nil, enumList: [TestEnum], enumNullableList: [TestEnum]? = nil, nullableEnumList: [TestEnum?], nullableEnumNullableList: [TestEnum?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "EnumTestModel", "id": id, "enumVal": enumVal, "nullableEnumVal": nullableEnumVal, "enumList": enumList, "enumNullableList": enumNullableList, "nullableEnumList": nullableEnumList, "nullableEnumNullableList": nullableEnumNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var enumVal: TestEnum {
                    get {
                        return snapshot["enumVal"]! as! TestEnum
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumVal")
                    }
                }
                
                public var nullableEnumVal: TestEnum? {
                    get {
                        return snapshot["nullableEnumVal"] as? TestEnum
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumVal")
                    }
                }
                
                public var enumList: [TestEnum] {
                    get {
                        return snapshot["enumList"]! as! [TestEnum]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumList")
                    }
                }
                
                public var enumNullableList: [TestEnum]? {
                    get {
                        return snapshot["enumNullableList"] as? [TestEnum]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumNullableList")
                    }
                }
                
                public var nullableEnumList: [TestEnum?] {
                    get {
                        return snapshot["nullableEnumList"]! as! [TestEnum?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumList")
                    }
                }
                
                public var nullableEnumNullableList: [TestEnum?]? {
                    get {
                        return snapshot["nullableEnumNullableList"] as? [TestEnum?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class ListEnumTestModelsQuery: GraphQLQuery {
        public static let operationString =
        "query ListEnumTestModels($filter: ModelEnumTestModelFilterInput, $limit: Int, $nextToken: String) {\n  listEnumTestModels(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      enumVal\n      nullableEnumVal\n      enumList\n      enumNullableList\n      nullableEnumList\n      nullableEnumNullableList\n      createdAt\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelEnumTestModelFilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelEnumTestModelFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listEnumTestModels", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListEnumTestModel.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listEnumTestModels: ListEnumTestModel? = nil) {
                self.init(snapshot: ["__typename": "Query", "listEnumTestModels": listEnumTestModels.flatMap { $0.snapshot }])
            }
            
            public var listEnumTestModels: ListEnumTestModel? {
                get {
                    return (snapshot["listEnumTestModels"] as? Snapshot).flatMap { ListEnumTestModel(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listEnumTestModels")
                }
            }
            
            public struct ListEnumTestModel: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelEnumTestModelConnection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelEnumTestModelConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["EnumTestModel"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("enumVal", type: .nonNull(.scalar(TestEnum.self))),
                        GraphQLField("nullableEnumVal", type: .scalar(TestEnum.self)),
                        GraphQLField("enumList", type: .nonNull(.list(.nonNull(.scalar(TestEnum.self))))),
                        GraphQLField("enumNullableList", type: .list(.nonNull(.scalar(TestEnum.self)))),
                        GraphQLField("nullableEnumList", type: .nonNull(.list(.scalar(TestEnum.self)))),
                        GraphQLField("nullableEnumNullableList", type: .list(.scalar(TestEnum.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, enumVal: TestEnum, nullableEnumVal: TestEnum? = nil, enumList: [TestEnum], enumNullableList: [TestEnum]? = nil, nullableEnumList: [TestEnum?], nullableEnumNullableList: [TestEnum?]? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "EnumTestModel", "id": id, "enumVal": enumVal, "nullableEnumVal": nullableEnumVal, "enumList": enumList, "enumNullableList": enumNullableList, "nullableEnumList": nullableEnumList, "nullableEnumNullableList": nullableEnumNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var enumVal: TestEnum {
                        get {
                            return snapshot["enumVal"]! as! TestEnum
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "enumVal")
                        }
                    }
                    
                    public var nullableEnumVal: TestEnum? {
                        get {
                            return snapshot["nullableEnumVal"] as? TestEnum
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nullableEnumVal")
                        }
                    }
                    
                    public var enumList: [TestEnum] {
                        get {
                            return snapshot["enumList"]! as! [TestEnum]
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "enumList")
                        }
                    }
                    
                    public var enumNullableList: [TestEnum]? {
                        get {
                            return snapshot["enumNullableList"] as? [TestEnum]
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "enumNullableList")
                        }
                    }
                    
                    public var nullableEnumList: [TestEnum?] {
                        get {
                            return snapshot["nullableEnumList"]! as! [TestEnum?]
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nullableEnumList")
                        }
                    }
                    
                    public var nullableEnumNullableList: [TestEnum?]? {
                        get {
                            return snapshot["nullableEnumNullableList"] as? [TestEnum?]
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nullableEnumNullableList")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class GetNestedTypeTestModelQuery: GraphQLQuery {
        public static let operationString =
        "query GetNestedTypeTestModel($id: ID!) {\n  getNestedTypeTestModel(id: $id) {\n    __typename\n    id\n    nestedVal {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedVal {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nestedList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nestedNullableList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedNullableList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public var id: GraphQLID
        
        public init(id: GraphQLID) {
            self.id = id
        }
        
        public var variables: GraphQLMap? {
            return ["id": id]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("getNestedTypeTestModel", arguments: ["id": GraphQLVariable("id")], type: .object(GetNestedTypeTestModel.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(getNestedTypeTestModel: GetNestedTypeTestModel? = nil) {
                self.init(snapshot: ["__typename": "Query", "getNestedTypeTestModel": getNestedTypeTestModel.flatMap { $0.snapshot }])
            }
            
            public var getNestedTypeTestModel: GetNestedTypeTestModel? {
                get {
                    return (snapshot["getNestedTypeTestModel"] as? Snapshot).flatMap { GetNestedTypeTestModel(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "getNestedTypeTestModel")
                }
            }
            
            public struct GetNestedTypeTestModel: GraphQLSelectionSet {
                public static let possibleTypes = ["NestedTypeTestModel"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("nestedVal", type: .nonNull(.object(NestedVal.selections))),
                    GraphQLField("nullableNestedVal", type: .object(NullableNestedVal.selections)),
                    GraphQLField("nestedList", type: .nonNull(.list(.nonNull(.object(NestedList.selections))))),
                    GraphQLField("nestedNullableList", type: .list(.nonNull(.object(NestedNullableList.selections)))),
                    GraphQLField("nullableNestedList", type: .nonNull(.list(.object(NullableNestedList.selections)))),
                    GraphQLField("nullableNestedNullableList", type: .list(.object(NullableNestedNullableList.selections))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, nestedVal: NestedVal, nullableNestedVal: NullableNestedVal? = nil, nestedList: [NestedList], nestedNullableList: [NestedNullableList]? = nil, nullableNestedList: [NullableNestedList?], nullableNestedNullableList: [NullableNestedNullableList?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "NestedTypeTestModel", "id": id, "nestedVal": nestedVal.snapshot, "nullableNestedVal": nullableNestedVal.flatMap { $0.snapshot }, "nestedList": nestedList.map { $0.snapshot }, "nestedNullableList": nestedNullableList.flatMap { $0.map { $0.snapshot } }, "nullableNestedList": nullableNestedList.map { $0.flatMap { $0.snapshot } }, "nullableNestedNullableList": nullableNestedNullableList.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var nestedVal: NestedVal {
                    get {
                        return NestedVal(snapshot: snapshot["nestedVal"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "nestedVal")
                    }
                }
                
                public var nullableNestedVal: NullableNestedVal? {
                    get {
                        return (snapshot["nullableNestedVal"] as? Snapshot).flatMap { NullableNestedVal(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "nullableNestedVal")
                    }
                }
                
                public var nestedList: [NestedList] {
                    get {
                        return (snapshot["nestedList"] as! [Snapshot]).map { NestedList(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.snapshot }, forKey: "nestedList")
                    }
                }
                
                public var nestedNullableList: [NestedNullableList]? {
                    get {
                        return (snapshot["nestedNullableList"] as? [Snapshot]).flatMap { $0.map { NestedNullableList(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.flatMap { $0.map { $0.snapshot } }, forKey: "nestedNullableList")
                    }
                }
                
                public var nullableNestedList: [NullableNestedList?] {
                    get {
                        return (snapshot["nullableNestedList"] as! [Snapshot?]).map { $0.flatMap { NullableNestedList(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "nullableNestedList")
                    }
                }
                
                public var nullableNestedNullableList: [NullableNestedNullableList?]? {
                    get {
                        return (snapshot["nullableNestedNullableList"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { NullableNestedNullableList(snapshot: $0) } } }
                    }
                    set {
                        snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "nullableNestedNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct NestedVal: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedVal: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NestedList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NestedNullableList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedNullableList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
            }
        }
    }
    
    public final class ListNestedTypeTestModelsQuery: GraphQLQuery {
        public static let operationString =
        "query ListNestedTypeTestModels($filter: ModelNestedTypeTestModelFilterInput, $limit: Int, $nextToken: String) {\n  listNestedTypeTestModels(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      nestedVal {\n        __typename\n        valueOne\n        valueTwo\n      }\n      nullableNestedVal {\n        __typename\n        valueOne\n        valueTwo\n      }\n      nestedList {\n        __typename\n        valueOne\n        valueTwo\n      }\n      nestedNullableList {\n        __typename\n        valueOne\n        valueTwo\n      }\n      nullableNestedList {\n        __typename\n        valueOne\n        valueTwo\n      }\n      nullableNestedNullableList {\n        __typename\n        valueOne\n        valueTwo\n      }\n      createdAt\n      updatedAt\n    }\n    nextToken\n  }\n}"
        
        public var filter: ModelNestedTypeTestModelFilterInput?
        public var limit: Int?
        public var nextToken: String?
        
        public init(filter: ModelNestedTypeTestModelFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.limit = limit
            self.nextToken = nextToken
        }
        
        public var variables: GraphQLMap? {
            return ["filter": filter, "limit": limit, "nextToken": nextToken]
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Query"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("listNestedTypeTestModels", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListNestedTypeTestModel.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(listNestedTypeTestModels: ListNestedTypeTestModel? = nil) {
                self.init(snapshot: ["__typename": "Query", "listNestedTypeTestModels": listNestedTypeTestModels.flatMap { $0.snapshot }])
            }
            
            public var listNestedTypeTestModels: ListNestedTypeTestModel? {
                get {
                    return (snapshot["listNestedTypeTestModels"] as? Snapshot).flatMap { ListNestedTypeTestModel(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "listNestedTypeTestModels")
                }
            }
            
            public struct ListNestedTypeTestModel: GraphQLSelectionSet {
                public static let possibleTypes = ["ModelNestedTypeTestModelConnection"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                    GraphQLField("nextToken", type: .scalar(String.self)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(items: [Item?], nextToken: String? = nil) {
                    self.init(snapshot: ["__typename": "ModelNestedTypeTestModelConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var items: [Item?] {
                    get {
                        return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                    }
                }
                
                public var nextToken: String? {
                    get {
                        return snapshot["nextToken"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nextToken")
                    }
                }
                
                public struct Item: GraphQLSelectionSet {
                    public static let possibleTypes = ["NestedTypeTestModel"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("nestedVal", type: .nonNull(.object(NestedVal.selections))),
                        GraphQLField("nullableNestedVal", type: .object(NullableNestedVal.selections)),
                        GraphQLField("nestedList", type: .nonNull(.list(.nonNull(.object(NestedList.selections))))),
                        GraphQLField("nestedNullableList", type: .list(.nonNull(.object(NestedNullableList.selections)))),
                        GraphQLField("nullableNestedList", type: .nonNull(.list(.object(NullableNestedList.selections)))),
                        GraphQLField("nullableNestedNullableList", type: .list(.object(NullableNestedNullableList.selections))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, nestedVal: NestedVal, nullableNestedVal: NullableNestedVal? = nil, nestedList: [NestedList], nestedNullableList: [NestedNullableList]? = nil, nullableNestedList: [NullableNestedList?], nullableNestedNullableList: [NullableNestedNullableList?]? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "NestedTypeTestModel", "id": id, "nestedVal": nestedVal.snapshot, "nullableNestedVal": nullableNestedVal.flatMap { $0.snapshot }, "nestedList": nestedList.map { $0.snapshot }, "nestedNullableList": nestedNullableList.flatMap { $0.map { $0.snapshot } }, "nullableNestedList": nullableNestedList.map { $0.flatMap { $0.snapshot } }, "nullableNestedNullableList": nullableNestedNullableList.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var nestedVal: NestedVal {
                        get {
                            return NestedVal(snapshot: snapshot["nestedVal"]! as! Snapshot)
                        }
                        set {
                            snapshot.updateValue(newValue.snapshot, forKey: "nestedVal")
                        }
                    }
                    
                    public var nullableNestedVal: NullableNestedVal? {
                        get {
                            return (snapshot["nullableNestedVal"] as? Snapshot).flatMap { NullableNestedVal(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "nullableNestedVal")
                        }
                    }
                    
                    public var nestedList: [NestedList] {
                        get {
                            return (snapshot["nestedList"] as! [Snapshot]).map { NestedList(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.snapshot }, forKey: "nestedList")
                        }
                    }
                    
                    public var nestedNullableList: [NestedNullableList]? {
                        get {
                            return (snapshot["nestedNullableList"] as? [Snapshot]).flatMap { $0.map { NestedNullableList(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.flatMap { $0.map { $0.snapshot } }, forKey: "nestedNullableList")
                        }
                    }
                    
                    public var nullableNestedList: [NullableNestedList?] {
                        get {
                            return (snapshot["nullableNestedList"] as! [Snapshot?]).map { $0.flatMap { NullableNestedList(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "nullableNestedList")
                        }
                    }
                    
                    public var nullableNestedNullableList: [NullableNestedNullableList?]? {
                        get {
                            return (snapshot["nullableNestedNullableList"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { NullableNestedNullableList(snapshot: $0) } } }
                        }
                        set {
                            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "nullableNestedNullableList")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct NestedVal: GraphQLSelectionSet {
                        public static let possibleTypes = ["Nested"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("valueOne", type: .scalar(Int.self)),
                            GraphQLField("valueTwo", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                            self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var valueOne: Int? {
                            get {
                                return snapshot["valueOne"] as? Int
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "valueOne")
                            }
                        }
                        
                        public var valueTwo: String? {
                            get {
                                return snapshot["valueTwo"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "valueTwo")
                            }
                        }
                    }
                    
                    public struct NullableNestedVal: GraphQLSelectionSet {
                        public static let possibleTypes = ["Nested"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("valueOne", type: .scalar(Int.self)),
                            GraphQLField("valueTwo", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                            self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var valueOne: Int? {
                            get {
                                return snapshot["valueOne"] as? Int
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "valueOne")
                            }
                        }
                        
                        public var valueTwo: String? {
                            get {
                                return snapshot["valueTwo"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "valueTwo")
                            }
                        }
                    }
                    
                    public struct NestedList: GraphQLSelectionSet {
                        public static let possibleTypes = ["Nested"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("valueOne", type: .scalar(Int.self)),
                            GraphQLField("valueTwo", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                            self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var valueOne: Int? {
                            get {
                                return snapshot["valueOne"] as? Int
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "valueOne")
                            }
                        }
                        
                        public var valueTwo: String? {
                            get {
                                return snapshot["valueTwo"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "valueTwo")
                            }
                        }
                    }
                    
                    public struct NestedNullableList: GraphQLSelectionSet {
                        public static let possibleTypes = ["Nested"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("valueOne", type: .scalar(Int.self)),
                            GraphQLField("valueTwo", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                            self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var valueOne: Int? {
                            get {
                                return snapshot["valueOne"] as? Int
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "valueOne")
                            }
                        }
                        
                        public var valueTwo: String? {
                            get {
                                return snapshot["valueTwo"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "valueTwo")
                            }
                        }
                    }
                    
                    public struct NullableNestedList: GraphQLSelectionSet {
                        public static let possibleTypes = ["Nested"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("valueOne", type: .scalar(Int.self)),
                            GraphQLField("valueTwo", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                            self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var valueOne: Int? {
                            get {
                                return snapshot["valueOne"] as? Int
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "valueOne")
                            }
                        }
                        
                        public var valueTwo: String? {
                            get {
                                return snapshot["valueTwo"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "valueTwo")
                            }
                        }
                    }
                    
                    public struct NullableNestedNullableList: GraphQLSelectionSet {
                        public static let possibleTypes = ["Nested"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("valueOne", type: .scalar(Int.self)),
                            GraphQLField("valueTwo", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                            self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var valueOne: Int? {
                            get {
                                return snapshot["valueOne"] as? Int
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "valueOne")
                            }
                        }
                        
                        public var valueTwo: String? {
                            get {
                                return snapshot["valueTwo"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "valueTwo")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnCreatePostSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreatePost {\n  onCreatePost {\n    __typename\n    id\n    title\n    content\n    createdAt\n    updatedAt\n    draft\n    rating\n    status\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreatePost", type: .object(OnCreatePost.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreatePost: OnCreatePost? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreatePost": onCreatePost.flatMap { $0.snapshot }])
            }
            
            public var onCreatePost: OnCreatePost? {
                get {
                    return (snapshot["onCreatePost"] as? Snapshot).flatMap { OnCreatePost(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreatePost")
                }
            }
            
            public struct OnCreatePost: GraphQLSelectionSet {
                public static let possibleTypes = ["Post"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .scalar(String.self)),
                    GraphQLField("draft", type: .scalar(Bool.self)),
                    GraphQLField("rating", type: .scalar(Double.self)),
                    GraphQLField("status", type: .scalar(PostStatus.self)),
                    GraphQLField("comments", type: .object(Comment.selections)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, content: String, createdAt: String, updatedAt: String? = nil, draft: Bool? = nil, rating: Double? = nil, status: PostStatus? = nil, comments: Comment? = nil) {
                    self.init(snapshot: ["__typename": "Post", "id": id, "title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status, "comments": comments.flatMap { $0.snapshot }])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String? {
                    get {
                        return snapshot["updatedAt"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public var draft: Bool? {
                    get {
                        return snapshot["draft"] as? Bool
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "draft")
                    }
                }
                
                public var rating: Double? {
                    get {
                        return snapshot["rating"] as? Double
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "rating")
                    }
                }
                
                public var status: PostStatus? {
                    get {
                        return snapshot["status"] as? PostStatus
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "status")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelCommentConnection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelCommentConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment", "id": id, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnUpdatePostSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdatePost {\n  onUpdatePost {\n    __typename\n    id\n    title\n    content\n    createdAt\n    updatedAt\n    draft\n    rating\n    status\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdatePost", type: .object(OnUpdatePost.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdatePost: OnUpdatePost? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdatePost": onUpdatePost.flatMap { $0.snapshot }])
            }
            
            public var onUpdatePost: OnUpdatePost? {
                get {
                    return (snapshot["onUpdatePost"] as? Snapshot).flatMap { OnUpdatePost(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdatePost")
                }
            }
            
            public struct OnUpdatePost: GraphQLSelectionSet {
                public static let possibleTypes = ["Post"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .scalar(String.self)),
                    GraphQLField("draft", type: .scalar(Bool.self)),
                    GraphQLField("rating", type: .scalar(Double.self)),
                    GraphQLField("status", type: .scalar(PostStatus.self)),
                    GraphQLField("comments", type: .object(Comment.selections)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, content: String, createdAt: String, updatedAt: String? = nil, draft: Bool? = nil, rating: Double? = nil, status: PostStatus? = nil, comments: Comment? = nil) {
                    self.init(snapshot: ["__typename": "Post", "id": id, "title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status, "comments": comments.flatMap { $0.snapshot }])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String? {
                    get {
                        return snapshot["updatedAt"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public var draft: Bool? {
                    get {
                        return snapshot["draft"] as? Bool
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "draft")
                    }
                }
                
                public var rating: Double? {
                    get {
                        return snapshot["rating"] as? Double
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "rating")
                    }
                }
                
                public var status: PostStatus? {
                    get {
                        return snapshot["status"] as? PostStatus
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "status")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelCommentConnection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelCommentConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment", "id": id, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnDeletePostSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeletePost {\n  onDeletePost {\n    __typename\n    id\n    title\n    content\n    createdAt\n    updatedAt\n    draft\n    rating\n    status\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeletePost", type: .object(OnDeletePost.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeletePost: OnDeletePost? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeletePost": onDeletePost.flatMap { $0.snapshot }])
            }
            
            public var onDeletePost: OnDeletePost? {
                get {
                    return (snapshot["onDeletePost"] as? Snapshot).flatMap { OnDeletePost(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeletePost")
                }
            }
            
            public struct OnDeletePost: GraphQLSelectionSet {
                public static let possibleTypes = ["Post"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .scalar(String.self)),
                    GraphQLField("draft", type: .scalar(Bool.self)),
                    GraphQLField("rating", type: .scalar(Double.self)),
                    GraphQLField("status", type: .scalar(PostStatus.self)),
                    GraphQLField("comments", type: .object(Comment.selections)),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, content: String, createdAt: String, updatedAt: String? = nil, draft: Bool? = nil, rating: Double? = nil, status: PostStatus? = nil, comments: Comment? = nil) {
                    self.init(snapshot: ["__typename": "Post", "id": id, "title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status, "comments": comments.flatMap { $0.snapshot }])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String? {
                    get {
                        return snapshot["updatedAt"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public var draft: Bool? {
                    get {
                        return snapshot["draft"] as? Bool
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "draft")
                    }
                }
                
                public var rating: Double? {
                    get {
                        return snapshot["rating"] as? Double
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "rating")
                    }
                }
                
                public var status: PostStatus? {
                    get {
                        return snapshot["status"] as? PostStatus
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "status")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelCommentConnection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelCommentConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment", "id": id, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnCreateCommentSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreateComment {\n  onCreateComment {\n    __typename\n    id\n    content\n    createdAt\n    post {\n      __typename\n      id\n      title\n      content\n      createdAt\n      updatedAt\n      draft\n      rating\n      status\n      comments {\n        __typename\n        nextToken\n      }\n    }\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreateComment", type: .object(OnCreateComment.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreateComment: OnCreateComment? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreateComment": onCreateComment.flatMap { $0.snapshot }])
            }
            
            public var onCreateComment: OnCreateComment? {
                get {
                    return (snapshot["onCreateComment"] as? Snapshot).flatMap { OnCreateComment(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreateComment")
                }
            }
            
            public struct OnCreateComment: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, content: String, createdAt: String, post: Post? = nil, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment", "id": id, "content": content, "createdAt": createdAt, "post": post.flatMap { $0.snapshot }, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("content", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .scalar(String.self)),
                        GraphQLField("draft", type: .scalar(Bool.self)),
                        GraphQLField("rating", type: .scalar(Double.self)),
                        GraphQLField("status", type: .scalar(PostStatus.self)),
                        GraphQLField("comments", type: .object(Comment.selections)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, content: String, createdAt: String, updatedAt: String? = nil, draft: Bool? = nil, rating: Double? = nil, status: PostStatus? = nil, comments: Comment? = nil) {
                        self.init(snapshot: ["__typename": "Post", "id": id, "title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status, "comments": comments.flatMap { $0.snapshot }])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var content: String {
                        get {
                            return snapshot["content"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "content")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String? {
                        get {
                            return snapshot["updatedAt"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public var draft: Bool? {
                        get {
                            return snapshot["draft"] as? Bool
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "draft")
                        }
                    }
                    
                    public var rating: Double? {
                        get {
                            return snapshot["rating"] as? Double
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "rating")
                        }
                    }
                    
                    public var status: PostStatus? {
                        get {
                            return snapshot["status"] as? PostStatus
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "status")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelCommentConnection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelCommentConnection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnUpdateCommentSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdateComment {\n  onUpdateComment {\n    __typename\n    id\n    content\n    createdAt\n    post {\n      __typename\n      id\n      title\n      content\n      createdAt\n      updatedAt\n      draft\n      rating\n      status\n      comments {\n        __typename\n        nextToken\n      }\n    }\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdateComment", type: .object(OnUpdateComment.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdateComment: OnUpdateComment? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdateComment": onUpdateComment.flatMap { $0.snapshot }])
            }
            
            public var onUpdateComment: OnUpdateComment? {
                get {
                    return (snapshot["onUpdateComment"] as? Snapshot).flatMap { OnUpdateComment(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateComment")
                }
            }
            
            public struct OnUpdateComment: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, content: String, createdAt: String, post: Post? = nil, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment", "id": id, "content": content, "createdAt": createdAt, "post": post.flatMap { $0.snapshot }, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("content", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .scalar(String.self)),
                        GraphQLField("draft", type: .scalar(Bool.self)),
                        GraphQLField("rating", type: .scalar(Double.self)),
                        GraphQLField("status", type: .scalar(PostStatus.self)),
                        GraphQLField("comments", type: .object(Comment.selections)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, content: String, createdAt: String, updatedAt: String? = nil, draft: Bool? = nil, rating: Double? = nil, status: PostStatus? = nil, comments: Comment? = nil) {
                        self.init(snapshot: ["__typename": "Post", "id": id, "title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status, "comments": comments.flatMap { $0.snapshot }])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var content: String {
                        get {
                            return snapshot["content"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "content")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String? {
                        get {
                            return snapshot["updatedAt"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public var draft: Bool? {
                        get {
                            return snapshot["draft"] as? Bool
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "draft")
                        }
                    }
                    
                    public var rating: Double? {
                        get {
                            return snapshot["rating"] as? Double
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "rating")
                        }
                    }
                    
                    public var status: PostStatus? {
                        get {
                            return snapshot["status"] as? PostStatus
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "status")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelCommentConnection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelCommentConnection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnDeleteCommentSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeleteComment {\n  onDeleteComment {\n    __typename\n    id\n    content\n    createdAt\n    post {\n      __typename\n      id\n      title\n      content\n      createdAt\n      updatedAt\n      draft\n      rating\n      status\n      comments {\n        __typename\n        nextToken\n      }\n    }\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeleteComment", type: .object(OnDeleteComment.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeleteComment: OnDeleteComment? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeleteComment": onDeleteComment.flatMap { $0.snapshot }])
            }
            
            public var onDeleteComment: OnDeleteComment? {
                get {
                    return (snapshot["onDeleteComment"] as? Snapshot).flatMap { OnDeleteComment(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteComment")
                }
            }
            
            public struct OnDeleteComment: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, content: String, createdAt: String, post: Post? = nil, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment", "id": id, "content": content, "createdAt": createdAt, "post": post.flatMap { $0.snapshot }, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("content", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .scalar(String.self)),
                        GraphQLField("draft", type: .scalar(Bool.self)),
                        GraphQLField("rating", type: .scalar(Double.self)),
                        GraphQLField("status", type: .scalar(PostStatus.self)),
                        GraphQLField("comments", type: .object(Comment.selections)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, content: String, createdAt: String, updatedAt: String? = nil, draft: Bool? = nil, rating: Double? = nil, status: PostStatus? = nil, comments: Comment? = nil) {
                        self.init(snapshot: ["__typename": "Post", "id": id, "title": title, "content": content, "createdAt": createdAt, "updatedAt": updatedAt, "draft": draft, "rating": rating, "status": status, "comments": comments.flatMap { $0.snapshot }])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var content: String {
                        get {
                            return snapshot["content"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "content")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String? {
                        get {
                            return snapshot["updatedAt"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public var draft: Bool? {
                        get {
                            return snapshot["draft"] as? Bool
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "draft")
                        }
                    }
                    
                    public var rating: Double? {
                        get {
                            return snapshot["rating"] as? Double
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "rating")
                        }
                    }
                    
                    public var status: PostStatus? {
                        get {
                            return snapshot["status"] as? PostStatus
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "status")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelCommentConnection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelCommentConnection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnCreateProject1Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreateProject1 {\n  onCreateProject1 {\n    __typename\n    id\n    name\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreateProject1", type: .object(OnCreateProject1.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreateProject1: OnCreateProject1? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreateProject1": onCreateProject1.flatMap { $0.snapshot }])
            }
            
            public var onCreateProject1: OnCreateProject1? {
                get {
                    return (snapshot["onCreateProject1"] as? Snapshot).flatMap { OnCreateProject1(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreateProject1")
                }
            }
            
            public struct OnCreateProject1: GraphQLSelectionSet {
                public static let possibleTypes = ["Project1"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .scalar(String.self)),
                    GraphQLField("team", type: .object(Team.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String? = nil, team: Team? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Project1", "id": id, "name": name, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String? {
                    get {
                        return snapshot["name"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var team: Team? {
                    get {
                        return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "team")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Team: GraphQLSelectionSet {
                    public static let possibleTypes = ["Team1"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Team1", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class OnUpdateProject1Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdateProject1 {\n  onUpdateProject1 {\n    __typename\n    id\n    name\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdateProject1", type: .object(OnUpdateProject1.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdateProject1: OnUpdateProject1? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdateProject1": onUpdateProject1.flatMap { $0.snapshot }])
            }
            
            public var onUpdateProject1: OnUpdateProject1? {
                get {
                    return (snapshot["onUpdateProject1"] as? Snapshot).flatMap { OnUpdateProject1(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateProject1")
                }
            }
            
            public struct OnUpdateProject1: GraphQLSelectionSet {
                public static let possibleTypes = ["Project1"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .scalar(String.self)),
                    GraphQLField("team", type: .object(Team.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String? = nil, team: Team? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Project1", "id": id, "name": name, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String? {
                    get {
                        return snapshot["name"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var team: Team? {
                    get {
                        return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "team")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Team: GraphQLSelectionSet {
                    public static let possibleTypes = ["Team1"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Team1", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class OnDeleteProject1Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeleteProject1 {\n  onDeleteProject1 {\n    __typename\n    id\n    name\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeleteProject1", type: .object(OnDeleteProject1.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeleteProject1: OnDeleteProject1? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeleteProject1": onDeleteProject1.flatMap { $0.snapshot }])
            }
            
            public var onDeleteProject1: OnDeleteProject1? {
                get {
                    return (snapshot["onDeleteProject1"] as? Snapshot).flatMap { OnDeleteProject1(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteProject1")
                }
            }
            
            public struct OnDeleteProject1: GraphQLSelectionSet {
                public static let possibleTypes = ["Project1"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .scalar(String.self)),
                    GraphQLField("team", type: .object(Team.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String? = nil, team: Team? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Project1", "id": id, "name": name, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String? {
                    get {
                        return snapshot["name"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var team: Team? {
                    get {
                        return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "team")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Team: GraphQLSelectionSet {
                    public static let possibleTypes = ["Team1"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Team1", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class OnCreateTeam1Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreateTeam1 {\n  onCreateTeam1 {\n    __typename\n    id\n    name\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreateTeam1", type: .object(OnCreateTeam1.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreateTeam1: OnCreateTeam1? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreateTeam1": onCreateTeam1.flatMap { $0.snapshot }])
            }
            
            public var onCreateTeam1: OnCreateTeam1? {
                get {
                    return (snapshot["onCreateTeam1"] as? Snapshot).flatMap { OnCreateTeam1(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreateTeam1")
                }
            }
            
            public struct OnCreateTeam1: GraphQLSelectionSet {
                public static let possibleTypes = ["Team1"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Team1", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnUpdateTeam1Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdateTeam1 {\n  onUpdateTeam1 {\n    __typename\n    id\n    name\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdateTeam1", type: .object(OnUpdateTeam1.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdateTeam1: OnUpdateTeam1? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdateTeam1": onUpdateTeam1.flatMap { $0.snapshot }])
            }
            
            public var onUpdateTeam1: OnUpdateTeam1? {
                get {
                    return (snapshot["onUpdateTeam1"] as? Snapshot).flatMap { OnUpdateTeam1(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateTeam1")
                }
            }
            
            public struct OnUpdateTeam1: GraphQLSelectionSet {
                public static let possibleTypes = ["Team1"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Team1", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnDeleteTeam1Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeleteTeam1 {\n  onDeleteTeam1 {\n    __typename\n    id\n    name\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeleteTeam1", type: .object(OnDeleteTeam1.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeleteTeam1: OnDeleteTeam1? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeleteTeam1": onDeleteTeam1.flatMap { $0.snapshot }])
            }
            
            public var onDeleteTeam1: OnDeleteTeam1? {
                get {
                    return (snapshot["onDeleteTeam1"] as? Snapshot).flatMap { OnDeleteTeam1(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteTeam1")
                }
            }
            
            public struct OnDeleteTeam1: GraphQLSelectionSet {
                public static let possibleTypes = ["Team1"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Team1", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnCreateProject2Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreateProject2 {\n  onCreateProject2 {\n    __typename\n    id\n    name\n    teamID\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreateProject2", type: .object(OnCreateProject2.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreateProject2: OnCreateProject2? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreateProject2": onCreateProject2.flatMap { $0.snapshot }])
            }
            
            public var onCreateProject2: OnCreateProject2? {
                get {
                    return (snapshot["onCreateProject2"] as? Snapshot).flatMap { OnCreateProject2(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreateProject2")
                }
            }
            
            public struct OnCreateProject2: GraphQLSelectionSet {
                public static let possibleTypes = ["Project2"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .scalar(String.self)),
                    GraphQLField("teamID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("team", type: .object(Team.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String? = nil, teamId: GraphQLID, team: Team? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Project2", "id": id, "name": name, "teamID": teamId, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String? {
                    get {
                        return snapshot["name"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var teamId: GraphQLID {
                    get {
                        return snapshot["teamID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "teamID")
                    }
                }
                
                public var team: Team? {
                    get {
                        return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "team")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Team: GraphQLSelectionSet {
                    public static let possibleTypes = ["Team2"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Team2", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class OnUpdateProject2Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdateProject2 {\n  onUpdateProject2 {\n    __typename\n    id\n    name\n    teamID\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdateProject2", type: .object(OnUpdateProject2.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdateProject2: OnUpdateProject2? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdateProject2": onUpdateProject2.flatMap { $0.snapshot }])
            }
            
            public var onUpdateProject2: OnUpdateProject2? {
                get {
                    return (snapshot["onUpdateProject2"] as? Snapshot).flatMap { OnUpdateProject2(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateProject2")
                }
            }
            
            public struct OnUpdateProject2: GraphQLSelectionSet {
                public static let possibleTypes = ["Project2"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .scalar(String.self)),
                    GraphQLField("teamID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("team", type: .object(Team.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String? = nil, teamId: GraphQLID, team: Team? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Project2", "id": id, "name": name, "teamID": teamId, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String? {
                    get {
                        return snapshot["name"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var teamId: GraphQLID {
                    get {
                        return snapshot["teamID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "teamID")
                    }
                }
                
                public var team: Team? {
                    get {
                        return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "team")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Team: GraphQLSelectionSet {
                    public static let possibleTypes = ["Team2"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Team2", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class OnDeleteProject2Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeleteProject2 {\n  onDeleteProject2 {\n    __typename\n    id\n    name\n    teamID\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeleteProject2", type: .object(OnDeleteProject2.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeleteProject2: OnDeleteProject2? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeleteProject2": onDeleteProject2.flatMap { $0.snapshot }])
            }
            
            public var onDeleteProject2: OnDeleteProject2? {
                get {
                    return (snapshot["onDeleteProject2"] as? Snapshot).flatMap { OnDeleteProject2(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteProject2")
                }
            }
            
            public struct OnDeleteProject2: GraphQLSelectionSet {
                public static let possibleTypes = ["Project2"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .scalar(String.self)),
                    GraphQLField("teamID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("team", type: .object(Team.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String? = nil, teamId: GraphQLID, team: Team? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Project2", "id": id, "name": name, "teamID": teamId, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String? {
                    get {
                        return snapshot["name"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var teamId: GraphQLID {
                    get {
                        return snapshot["teamID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "teamID")
                    }
                }
                
                public var team: Team? {
                    get {
                        return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "team")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Team: GraphQLSelectionSet {
                    public static let possibleTypes = ["Team2"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Team2", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                }
            }
        }
    }
    
    public final class OnCreateTeam2Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreateTeam2 {\n  onCreateTeam2 {\n    __typename\n    id\n    name\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreateTeam2", type: .object(OnCreateTeam2.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreateTeam2: OnCreateTeam2? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreateTeam2": onCreateTeam2.flatMap { $0.snapshot }])
            }
            
            public var onCreateTeam2: OnCreateTeam2? {
                get {
                    return (snapshot["onCreateTeam2"] as? Snapshot).flatMap { OnCreateTeam2(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreateTeam2")
                }
            }
            
            public struct OnCreateTeam2: GraphQLSelectionSet {
                public static let possibleTypes = ["Team2"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Team2", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnUpdateTeam2Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdateTeam2 {\n  onUpdateTeam2 {\n    __typename\n    id\n    name\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdateTeam2", type: .object(OnUpdateTeam2.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdateTeam2: OnUpdateTeam2? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdateTeam2": onUpdateTeam2.flatMap { $0.snapshot }])
            }
            
            public var onUpdateTeam2: OnUpdateTeam2? {
                get {
                    return (snapshot["onUpdateTeam2"] as? Snapshot).flatMap { OnUpdateTeam2(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateTeam2")
                }
            }
            
            public struct OnUpdateTeam2: GraphQLSelectionSet {
                public static let possibleTypes = ["Team2"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Team2", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnDeleteTeam2Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeleteTeam2 {\n  onDeleteTeam2 {\n    __typename\n    id\n    name\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeleteTeam2", type: .object(OnDeleteTeam2.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeleteTeam2: OnDeleteTeam2? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeleteTeam2": onDeleteTeam2.flatMap { $0.snapshot }])
            }
            
            public var onDeleteTeam2: OnDeleteTeam2? {
                get {
                    return (snapshot["onDeleteTeam2"] as? Snapshot).flatMap { OnDeleteTeam2(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteTeam2")
                }
            }
            
            public struct OnDeleteTeam2: GraphQLSelectionSet {
                public static let possibleTypes = ["Team2"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Team2", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnCreatePost3Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreatePost3 {\n  onCreatePost3 {\n    __typename\n    id\n    title\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreatePost3", type: .object(OnCreatePost3.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreatePost3: OnCreatePost3? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreatePost3": onCreatePost3.flatMap { $0.snapshot }])
            }
            
            public var onCreatePost3: OnCreatePost3? {
                get {
                    return (snapshot["onCreatePost3"] as? Snapshot).flatMap { OnCreatePost3(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreatePost3")
                }
            }
            
            public struct OnCreatePost3: GraphQLSelectionSet {
                public static let possibleTypes = ["Post3"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post3", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment3Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment3Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment3"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment3", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnUpdatePost3Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdatePost3 {\n  onUpdatePost3 {\n    __typename\n    id\n    title\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdatePost3", type: .object(OnUpdatePost3.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdatePost3: OnUpdatePost3? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdatePost3": onUpdatePost3.flatMap { $0.snapshot }])
            }
            
            public var onUpdatePost3: OnUpdatePost3? {
                get {
                    return (snapshot["onUpdatePost3"] as? Snapshot).flatMap { OnUpdatePost3(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdatePost3")
                }
            }
            
            public struct OnUpdatePost3: GraphQLSelectionSet {
                public static let possibleTypes = ["Post3"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post3", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment3Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment3Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment3"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment3", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnDeletePost3Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeletePost3 {\n  onDeletePost3 {\n    __typename\n    id\n    title\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeletePost3", type: .object(OnDeletePost3.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeletePost3: OnDeletePost3? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeletePost3": onDeletePost3.flatMap { $0.snapshot }])
            }
            
            public var onDeletePost3: OnDeletePost3? {
                get {
                    return (snapshot["onDeletePost3"] as? Snapshot).flatMap { OnDeletePost3(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeletePost3")
                }
            }
            
            public struct OnDeletePost3: GraphQLSelectionSet {
                public static let possibleTypes = ["Post3"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post3", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment3Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment3Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment3"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment3", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnCreateComment3Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreateComment3 {\n  onCreateComment3 {\n    __typename\n    id\n    postID\n    content\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreateComment3", type: .object(OnCreateComment3.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreateComment3: OnCreateComment3? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreateComment3": onCreateComment3.flatMap { $0.snapshot }])
            }
            
            public var onCreateComment3: OnCreateComment3? {
                get {
                    return (snapshot["onCreateComment3"] as? Snapshot).flatMap { OnCreateComment3(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreateComment3")
                }
            }
            
            public struct OnCreateComment3: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment3"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment3", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnUpdateComment3Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdateComment3 {\n  onUpdateComment3 {\n    __typename\n    id\n    postID\n    content\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdateComment3", type: .object(OnUpdateComment3.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdateComment3: OnUpdateComment3? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdateComment3": onUpdateComment3.flatMap { $0.snapshot }])
            }
            
            public var onUpdateComment3: OnUpdateComment3? {
                get {
                    return (snapshot["onUpdateComment3"] as? Snapshot).flatMap { OnUpdateComment3(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateComment3")
                }
            }
            
            public struct OnUpdateComment3: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment3"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment3", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnDeleteComment3Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeleteComment3 {\n  onDeleteComment3 {\n    __typename\n    id\n    postID\n    content\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeleteComment3", type: .object(OnDeleteComment3.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeleteComment3: OnDeleteComment3? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeleteComment3": onDeleteComment3.flatMap { $0.snapshot }])
            }
            
            public var onDeleteComment3: OnDeleteComment3? {
                get {
                    return (snapshot["onDeleteComment3"] as? Snapshot).flatMap { OnDeleteComment3(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteComment3")
                }
            }
            
            public struct OnDeleteComment3: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment3"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment3", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnCreatePost4Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreatePost4 {\n  onCreatePost4 {\n    __typename\n    id\n    title\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreatePost4", type: .object(OnCreatePost4.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreatePost4: OnCreatePost4? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreatePost4": onCreatePost4.flatMap { $0.snapshot }])
            }
            
            public var onCreatePost4: OnCreatePost4? {
                get {
                    return (snapshot["onCreatePost4"] as? Snapshot).flatMap { OnCreatePost4(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreatePost4")
                }
            }
            
            public struct OnCreatePost4: GraphQLSelectionSet {
                public static let possibleTypes = ["Post4"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post4", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment4Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment4Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment4"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment4", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnUpdatePost4Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdatePost4 {\n  onUpdatePost4 {\n    __typename\n    id\n    title\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdatePost4", type: .object(OnUpdatePost4.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdatePost4: OnUpdatePost4? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdatePost4": onUpdatePost4.flatMap { $0.snapshot }])
            }
            
            public var onUpdatePost4: OnUpdatePost4? {
                get {
                    return (snapshot["onUpdatePost4"] as? Snapshot).flatMap { OnUpdatePost4(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdatePost4")
                }
            }
            
            public struct OnUpdatePost4: GraphQLSelectionSet {
                public static let possibleTypes = ["Post4"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post4", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment4Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment4Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment4"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment4", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnDeletePost4Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeletePost4 {\n  onDeletePost4 {\n    __typename\n    id\n    title\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeletePost4", type: .object(OnDeletePost4.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeletePost4: OnDeletePost4? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeletePost4": onDeletePost4.flatMap { $0.snapshot }])
            }
            
            public var onDeletePost4: OnDeletePost4? {
                get {
                    return (snapshot["onDeletePost4"] as? Snapshot).flatMap { OnDeletePost4(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeletePost4")
                }
            }
            
            public struct OnDeletePost4: GraphQLSelectionSet {
                public static let possibleTypes = ["Post4"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post4", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment4Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment4Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment4"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment4", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnCreateComment4Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreateComment4 {\n  onCreateComment4 {\n    __typename\n    id\n    postID\n    content\n    post {\n      __typename\n      id\n      title\n      comments {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreateComment4", type: .object(OnCreateComment4.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreateComment4: OnCreateComment4? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreateComment4": onCreateComment4.flatMap { $0.snapshot }])
            }
            
            public var onCreateComment4: OnCreateComment4? {
                get {
                    return (snapshot["onCreateComment4"] as? Snapshot).flatMap { OnCreateComment4(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreateComment4")
                }
            }
            
            public struct OnCreateComment4: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment4"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, content: String, post: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment4", "id": id, "postID": postId, "content": content, "post": post.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post4"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("comments", type: .object(Comment.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post4", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelComment4Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelComment4Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnUpdateComment4Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdateComment4 {\n  onUpdateComment4 {\n    __typename\n    id\n    postID\n    content\n    post {\n      __typename\n      id\n      title\n      comments {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdateComment4", type: .object(OnUpdateComment4.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdateComment4: OnUpdateComment4? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdateComment4": onUpdateComment4.flatMap { $0.snapshot }])
            }
            
            public var onUpdateComment4: OnUpdateComment4? {
                get {
                    return (snapshot["onUpdateComment4"] as? Snapshot).flatMap { OnUpdateComment4(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateComment4")
                }
            }
            
            public struct OnUpdateComment4: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment4"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, content: String, post: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment4", "id": id, "postID": postId, "content": content, "post": post.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post4"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("comments", type: .object(Comment.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post4", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelComment4Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelComment4Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnDeleteComment4Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeleteComment4 {\n  onDeleteComment4 {\n    __typename\n    id\n    postID\n    content\n    post {\n      __typename\n      id\n      title\n      comments {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeleteComment4", type: .object(OnDeleteComment4.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeleteComment4: OnDeleteComment4? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeleteComment4": onDeleteComment4.flatMap { $0.snapshot }])
            }
            
            public var onDeleteComment4: OnDeleteComment4? {
                get {
                    return (snapshot["onDeleteComment4"] as? Snapshot).flatMap { OnDeleteComment4(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteComment4")
                }
            }
            
            public struct OnDeleteComment4: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment4"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, content: String, post: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment4", "id": id, "postID": postId, "content": content, "post": post.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post4"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("comments", type: .object(Comment.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post4", "id": id, "title": title, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelComment4Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelComment4Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnCreatePost5Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreatePost5 {\n  onCreatePost5 {\n    __typename\n    id\n    title\n    editors {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        editorID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreatePost5", type: .object(OnCreatePost5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreatePost5: OnCreatePost5? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreatePost5": onCreatePost5.flatMap { $0.snapshot }])
            }
            
            public var onCreatePost5: OnCreatePost5? {
                get {
                    return (snapshot["onCreatePost5"] as? Snapshot).flatMap { OnCreatePost5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreatePost5")
                }
            }
            
            public struct OnCreatePost5: GraphQLSelectionSet {
                public static let possibleTypes = ["Post5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("editors", type: .object(Editor.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, editors: Editor? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post5", "id": id, "title": title, "editors": editors.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var editors: Editor? {
                    get {
                        return (snapshot["editors"] as? Snapshot).flatMap { Editor(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "editors")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Editor: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPostEditor5Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["PostEditor5"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var editorId: GraphQLID {
                            get {
                                return snapshot["editorID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "editorID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnUpdatePost5Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdatePost5 {\n  onUpdatePost5 {\n    __typename\n    id\n    title\n    editors {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        editorID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdatePost5", type: .object(OnUpdatePost5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdatePost5: OnUpdatePost5? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdatePost5": onUpdatePost5.flatMap { $0.snapshot }])
            }
            
            public var onUpdatePost5: OnUpdatePost5? {
                get {
                    return (snapshot["onUpdatePost5"] as? Snapshot).flatMap { OnUpdatePost5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdatePost5")
                }
            }
            
            public struct OnUpdatePost5: GraphQLSelectionSet {
                public static let possibleTypes = ["Post5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("editors", type: .object(Editor.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, editors: Editor? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post5", "id": id, "title": title, "editors": editors.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var editors: Editor? {
                    get {
                        return (snapshot["editors"] as? Snapshot).flatMap { Editor(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "editors")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Editor: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPostEditor5Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["PostEditor5"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var editorId: GraphQLID {
                            get {
                                return snapshot["editorID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "editorID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnDeletePost5Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeletePost5 {\n  onDeletePost5 {\n    __typename\n    id\n    title\n    editors {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        editorID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeletePost5", type: .object(OnDeletePost5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeletePost5: OnDeletePost5? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeletePost5": onDeletePost5.flatMap { $0.snapshot }])
            }
            
            public var onDeletePost5: OnDeletePost5? {
                get {
                    return (snapshot["onDeletePost5"] as? Snapshot).flatMap { OnDeletePost5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeletePost5")
                }
            }
            
            public struct OnDeletePost5: GraphQLSelectionSet {
                public static let possibleTypes = ["Post5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("editors", type: .object(Editor.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, editors: Editor? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post5", "id": id, "title": title, "editors": editors.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var editors: Editor? {
                    get {
                        return (snapshot["editors"] as? Snapshot).flatMap { Editor(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "editors")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Editor: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPostEditor5Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["PostEditor5"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var editorId: GraphQLID {
                            get {
                                return snapshot["editorID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "editorID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnCreatePostEditor5Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreatePostEditor5 {\n  onCreatePostEditor5 {\n    __typename\n    id\n    postID\n    editorID\n    post {\n      __typename\n      id\n      title\n      editors {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    editor {\n      __typename\n      id\n      username\n      posts {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreatePostEditor5", type: .object(OnCreatePostEditor5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreatePostEditor5: OnCreatePostEditor5? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreatePostEditor5": onCreatePostEditor5.flatMap { $0.snapshot }])
            }
            
            public var onCreatePostEditor5: OnCreatePostEditor5? {
                get {
                    return (snapshot["onCreatePostEditor5"] as? Snapshot).flatMap { OnCreatePostEditor5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreatePostEditor5")
                }
            }
            
            public struct OnCreatePostEditor5: GraphQLSelectionSet {
                public static let possibleTypes = ["PostEditor5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("post", type: .nonNull(.object(Post.selections))),
                    GraphQLField("editor", type: .nonNull(.object(Editor.selections))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, post: Post, editor: Editor, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "post": post.snapshot, "editor": editor.snapshot, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var editorId: GraphQLID {
                    get {
                        return snapshot["editorID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "editorID")
                    }
                }
                
                public var post: Post {
                    get {
                        return Post(snapshot: snapshot["post"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "post")
                    }
                }
                
                public var editor: Editor {
                    get {
                        return Editor(snapshot: snapshot["editor"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "editor")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post5"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("editors", type: .object(Editor.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, editors: Editor? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post5", "id": id, "title": title, "editors": editors.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var editors: Editor? {
                        get {
                            return (snapshot["editors"] as? Snapshot).flatMap { Editor(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "editors")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Editor: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPostEditor5Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
                
                public struct Editor: GraphQLSelectionSet {
                    public static let possibleTypes = ["User5"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("username", type: .nonNull(.scalar(String.self))),
                        GraphQLField("posts", type: .object(Post.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, username: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "User5", "id": id, "username": username, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var username: String {
                        get {
                            return snapshot["username"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "username")
                        }
                    }
                    
                    public var posts: Post? {
                        get {
                            return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPostEditor5Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnUpdatePostEditor5Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdatePostEditor5 {\n  onUpdatePostEditor5 {\n    __typename\n    id\n    postID\n    editorID\n    post {\n      __typename\n      id\n      title\n      editors {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    editor {\n      __typename\n      id\n      username\n      posts {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdatePostEditor5", type: .object(OnUpdatePostEditor5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdatePostEditor5: OnUpdatePostEditor5? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdatePostEditor5": onUpdatePostEditor5.flatMap { $0.snapshot }])
            }
            
            public var onUpdatePostEditor5: OnUpdatePostEditor5? {
                get {
                    return (snapshot["onUpdatePostEditor5"] as? Snapshot).flatMap { OnUpdatePostEditor5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdatePostEditor5")
                }
            }
            
            public struct OnUpdatePostEditor5: GraphQLSelectionSet {
                public static let possibleTypes = ["PostEditor5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("post", type: .nonNull(.object(Post.selections))),
                    GraphQLField("editor", type: .nonNull(.object(Editor.selections))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, post: Post, editor: Editor, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "post": post.snapshot, "editor": editor.snapshot, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var editorId: GraphQLID {
                    get {
                        return snapshot["editorID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "editorID")
                    }
                }
                
                public var post: Post {
                    get {
                        return Post(snapshot: snapshot["post"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "post")
                    }
                }
                
                public var editor: Editor {
                    get {
                        return Editor(snapshot: snapshot["editor"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "editor")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post5"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("editors", type: .object(Editor.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, editors: Editor? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post5", "id": id, "title": title, "editors": editors.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var editors: Editor? {
                        get {
                            return (snapshot["editors"] as? Snapshot).flatMap { Editor(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "editors")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Editor: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPostEditor5Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
                
                public struct Editor: GraphQLSelectionSet {
                    public static let possibleTypes = ["User5"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("username", type: .nonNull(.scalar(String.self))),
                        GraphQLField("posts", type: .object(Post.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, username: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "User5", "id": id, "username": username, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var username: String {
                        get {
                            return snapshot["username"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "username")
                        }
                    }
                    
                    public var posts: Post? {
                        get {
                            return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPostEditor5Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnDeletePostEditor5Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeletePostEditor5 {\n  onDeletePostEditor5 {\n    __typename\n    id\n    postID\n    editorID\n    post {\n      __typename\n      id\n      title\n      editors {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    editor {\n      __typename\n      id\n      username\n      posts {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeletePostEditor5", type: .object(OnDeletePostEditor5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeletePostEditor5: OnDeletePostEditor5? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeletePostEditor5": onDeletePostEditor5.flatMap { $0.snapshot }])
            }
            
            public var onDeletePostEditor5: OnDeletePostEditor5? {
                get {
                    return (snapshot["onDeletePostEditor5"] as? Snapshot).flatMap { OnDeletePostEditor5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeletePostEditor5")
                }
            }
            
            public struct OnDeletePostEditor5: GraphQLSelectionSet {
                public static let possibleTypes = ["PostEditor5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("post", type: .nonNull(.object(Post.selections))),
                    GraphQLField("editor", type: .nonNull(.object(Editor.selections))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, post: Post, editor: Editor, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "post": post.snapshot, "editor": editor.snapshot, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var editorId: GraphQLID {
                    get {
                        return snapshot["editorID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "editorID")
                    }
                }
                
                public var post: Post {
                    get {
                        return Post(snapshot: snapshot["post"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "post")
                    }
                }
                
                public var editor: Editor {
                    get {
                        return Editor(snapshot: snapshot["editor"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "editor")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post5"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("editors", type: .object(Editor.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, editors: Editor? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post5", "id": id, "title": title, "editors": editors.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var editors: Editor? {
                        get {
                            return (snapshot["editors"] as? Snapshot).flatMap { Editor(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "editors")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Editor: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPostEditor5Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
                
                public struct Editor: GraphQLSelectionSet {
                    public static let possibleTypes = ["User5"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("username", type: .nonNull(.scalar(String.self))),
                        GraphQLField("posts", type: .object(Post.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, username: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "User5", "id": id, "username": username, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var username: String {
                        get {
                            return snapshot["username"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "username")
                        }
                    }
                    
                    public var posts: Post? {
                        get {
                            return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPostEditor5Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnCreateUser5Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreateUser5 {\n  onCreateUser5 {\n    __typename\n    id\n    username\n    posts {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        editorID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreateUser5", type: .object(OnCreateUser5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreateUser5: OnCreateUser5? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreateUser5": onCreateUser5.flatMap { $0.snapshot }])
            }
            
            public var onCreateUser5: OnCreateUser5? {
                get {
                    return (snapshot["onCreateUser5"] as? Snapshot).flatMap { OnCreateUser5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreateUser5")
                }
            }
            
            public struct OnCreateUser5: GraphQLSelectionSet {
                public static let possibleTypes = ["User5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("username", type: .nonNull(.scalar(String.self))),
                    GraphQLField("posts", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, username: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "User5", "id": id, "username": username, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var username: String {
                    get {
                        return snapshot["username"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "username")
                    }
                }
                
                public var posts: Post? {
                    get {
                        return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPostEditor5Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["PostEditor5"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var editorId: GraphQLID {
                            get {
                                return snapshot["editorID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "editorID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnUpdateUser5Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdateUser5 {\n  onUpdateUser5 {\n    __typename\n    id\n    username\n    posts {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        editorID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdateUser5", type: .object(OnUpdateUser5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdateUser5: OnUpdateUser5? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdateUser5": onUpdateUser5.flatMap { $0.snapshot }])
            }
            
            public var onUpdateUser5: OnUpdateUser5? {
                get {
                    return (snapshot["onUpdateUser5"] as? Snapshot).flatMap { OnUpdateUser5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateUser5")
                }
            }
            
            public struct OnUpdateUser5: GraphQLSelectionSet {
                public static let possibleTypes = ["User5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("username", type: .nonNull(.scalar(String.self))),
                    GraphQLField("posts", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, username: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "User5", "id": id, "username": username, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var username: String {
                    get {
                        return snapshot["username"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "username")
                    }
                }
                
                public var posts: Post? {
                    get {
                        return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPostEditor5Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["PostEditor5"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var editorId: GraphQLID {
                            get {
                                return snapshot["editorID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "editorID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnDeleteUser5Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeleteUser5 {\n  onDeleteUser5 {\n    __typename\n    id\n    username\n    posts {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        editorID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeleteUser5", type: .object(OnDeleteUser5.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeleteUser5: OnDeleteUser5? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeleteUser5": onDeleteUser5.flatMap { $0.snapshot }])
            }
            
            public var onDeleteUser5: OnDeleteUser5? {
                get {
                    return (snapshot["onDeleteUser5"] as? Snapshot).flatMap { OnDeleteUser5(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteUser5")
                }
            }
            
            public struct OnDeleteUser5: GraphQLSelectionSet {
                public static let possibleTypes = ["User5"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("username", type: .nonNull(.scalar(String.self))),
                    GraphQLField("posts", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, username: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "User5", "id": id, "username": username, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var username: String {
                    get {
                        return snapshot["username"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "username")
                    }
                }
                
                public var posts: Post? {
                    get {
                        return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPostEditor5Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPostEditor5Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["PostEditor5"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("editorID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, editorId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "PostEditor5", "id": id, "postID": postId, "editorID": editorId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var editorId: GraphQLID {
                            get {
                                return snapshot["editorID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "editorID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnCreateBlog6Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreateBlog6 {\n  onCreateBlog6 {\n    __typename\n    id\n    name\n    posts {\n      __typename\n      items {\n        __typename\n        id\n        title\n        blogID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreateBlog6", type: .object(OnCreateBlog6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreateBlog6: OnCreateBlog6? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreateBlog6": onCreateBlog6.flatMap { $0.snapshot }])
            }
            
            public var onCreateBlog6: OnCreateBlog6? {
                get {
                    return (snapshot["onCreateBlog6"] as? Snapshot).flatMap { OnCreateBlog6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreateBlog6")
                }
            }
            
            public struct OnCreateBlog6: GraphQLSelectionSet {
                public static let possibleTypes = ["Blog6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("posts", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var posts: Post? {
                    get {
                        return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPost6Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPost6Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Post6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("title", type: .nonNull(.scalar(String.self))),
                            GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, title: String, blogId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var title: String {
                            get {
                                return snapshot["title"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "title")
                            }
                        }
                        
                        public var blogId: GraphQLID {
                            get {
                                return snapshot["blogID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "blogID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnUpdateBlog6Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdateBlog6 {\n  onUpdateBlog6 {\n    __typename\n    id\n    name\n    posts {\n      __typename\n      items {\n        __typename\n        id\n        title\n        blogID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdateBlog6", type: .object(OnUpdateBlog6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdateBlog6: OnUpdateBlog6? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdateBlog6": onUpdateBlog6.flatMap { $0.snapshot }])
            }
            
            public var onUpdateBlog6: OnUpdateBlog6? {
                get {
                    return (snapshot["onUpdateBlog6"] as? Snapshot).flatMap { OnUpdateBlog6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateBlog6")
                }
            }
            
            public struct OnUpdateBlog6: GraphQLSelectionSet {
                public static let possibleTypes = ["Blog6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("posts", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var posts: Post? {
                    get {
                        return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPost6Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPost6Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Post6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("title", type: .nonNull(.scalar(String.self))),
                            GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, title: String, blogId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var title: String {
                            get {
                                return snapshot["title"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "title")
                            }
                        }
                        
                        public var blogId: GraphQLID {
                            get {
                                return snapshot["blogID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "blogID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnDeleteBlog6Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeleteBlog6 {\n  onDeleteBlog6 {\n    __typename\n    id\n    name\n    posts {\n      __typename\n      items {\n        __typename\n        id\n        title\n        blogID\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeleteBlog6", type: .object(OnDeleteBlog6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeleteBlog6: OnDeleteBlog6? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeleteBlog6": onDeleteBlog6.flatMap { $0.snapshot }])
            }
            
            public var onDeleteBlog6: OnDeleteBlog6? {
                get {
                    return (snapshot["onDeleteBlog6"] as? Snapshot).flatMap { OnDeleteBlog6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteBlog6")
                }
            }
            
            public struct OnDeleteBlog6: GraphQLSelectionSet {
                public static let possibleTypes = ["Blog6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("name", type: .nonNull(.scalar(String.self))),
                    GraphQLField("posts", type: .object(Post.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, name: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var name: String {
                    get {
                        return snapshot["name"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "name")
                    }
                }
                
                public var posts: Post? {
                    get {
                        return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelPost6Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelPost6Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Post6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("title", type: .nonNull(.scalar(String.self))),
                            GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, title: String, blogId: GraphQLID, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var title: String {
                            get {
                                return snapshot["title"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "title")
                            }
                        }
                        
                        public var blogId: GraphQLID {
                            get {
                                return snapshot["blogID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "blogID")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnCreatePost6Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreatePost6 {\n  onCreatePost6 {\n    __typename\n    id\n    title\n    blogID\n    blog {\n      __typename\n      id\n      name\n      posts {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreatePost6", type: .object(OnCreatePost6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreatePost6: OnCreatePost6? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreatePost6": onCreatePost6.flatMap { $0.snapshot }])
            }
            
            public var onCreatePost6: OnCreatePost6? {
                get {
                    return (snapshot["onCreatePost6"] as? Snapshot).flatMap { OnCreatePost6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreatePost6")
                }
            }
            
            public struct OnCreatePost6: GraphQLSelectionSet {
                public static let possibleTypes = ["Post6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("blog", type: .object(Blog.selections)),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, blogId: GraphQLID, blog: Blog? = nil, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "blog": blog.flatMap { $0.snapshot }, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var blogId: GraphQLID {
                    get {
                        return snapshot["blogID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "blogID")
                    }
                }
                
                public var blog: Blog? {
                    get {
                        return (snapshot["blog"] as? Snapshot).flatMap { Blog(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "blog")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Blog: GraphQLSelectionSet {
                    public static let possibleTypes = ["Blog6"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("posts", type: .object(Post.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var posts: Post? {
                        get {
                            return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPost6Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPost6Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment6Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment6Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment6", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnUpdatePost6Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdatePost6 {\n  onUpdatePost6 {\n    __typename\n    id\n    title\n    blogID\n    blog {\n      __typename\n      id\n      name\n      posts {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdatePost6", type: .object(OnUpdatePost6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdatePost6: OnUpdatePost6? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdatePost6": onUpdatePost6.flatMap { $0.snapshot }])
            }
            
            public var onUpdatePost6: OnUpdatePost6? {
                get {
                    return (snapshot["onUpdatePost6"] as? Snapshot).flatMap { OnUpdatePost6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdatePost6")
                }
            }
            
            public struct OnUpdatePost6: GraphQLSelectionSet {
                public static let possibleTypes = ["Post6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("blog", type: .object(Blog.selections)),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, blogId: GraphQLID, blog: Blog? = nil, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "blog": blog.flatMap { $0.snapshot }, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var blogId: GraphQLID {
                    get {
                        return snapshot["blogID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "blogID")
                    }
                }
                
                public var blog: Blog? {
                    get {
                        return (snapshot["blog"] as? Snapshot).flatMap { Blog(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "blog")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Blog: GraphQLSelectionSet {
                    public static let possibleTypes = ["Blog6"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("posts", type: .object(Post.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var posts: Post? {
                        get {
                            return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPost6Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPost6Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment6Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment6Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment6", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnDeletePost6Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeletePost6 {\n  onDeletePost6 {\n    __typename\n    id\n    title\n    blogID\n    blog {\n      __typename\n      id\n      name\n      posts {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    comments {\n      __typename\n      items {\n        __typename\n        id\n        postID\n        content\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeletePost6", type: .object(OnDeletePost6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeletePost6: OnDeletePost6? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeletePost6": onDeletePost6.flatMap { $0.snapshot }])
            }
            
            public var onDeletePost6: OnDeletePost6? {
                get {
                    return (snapshot["onDeletePost6"] as? Snapshot).flatMap { OnDeletePost6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeletePost6")
                }
            }
            
            public struct OnDeletePost6: GraphQLSelectionSet {
                public static let possibleTypes = ["Post6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("title", type: .nonNull(.scalar(String.self))),
                    GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("blog", type: .object(Blog.selections)),
                    GraphQLField("comments", type: .object(Comment.selections)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, title: String, blogId: GraphQLID, blog: Blog? = nil, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "blog": blog.flatMap { $0.snapshot }, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var title: String {
                    get {
                        return snapshot["title"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "title")
                    }
                }
                
                public var blogId: GraphQLID {
                    get {
                        return snapshot["blogID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "blogID")
                    }
                }
                
                public var blog: Blog? {
                    get {
                        return (snapshot["blog"] as? Snapshot).flatMap { Blog(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "blog")
                    }
                }
                
                public var comments: Comment? {
                    get {
                        return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Blog: GraphQLSelectionSet {
                    public static let possibleTypes = ["Blog6"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("name", type: .nonNull(.scalar(String.self))),
                        GraphQLField("posts", type: .object(Post.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, name: String, posts: Post? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "posts": posts.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var name: String {
                        get {
                            return snapshot["name"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "name")
                        }
                    }
                    
                    public var posts: Post? {
                        get {
                            return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "posts")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Post: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelPost6Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelPost6Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
                
                public struct Comment: GraphQLSelectionSet {
                    public static let possibleTypes = ["ModelComment6Connection"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
                        GraphQLField("nextToken", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(items: [Item?], nextToken: String? = nil) {
                        self.init(snapshot: ["__typename": "ModelComment6Connection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var items: [Item?] {
                        get {
                            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
                        }
                        set {
                            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
                        }
                    }
                    
                    public var nextToken: String? {
                        get {
                            return snapshot["nextToken"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "nextToken")
                        }
                    }
                    
                    public struct Item: GraphQLSelectionSet {
                        public static let possibleTypes = ["Comment6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("content", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, postId: GraphQLID, content: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Comment6", "id": id, "postID": postId, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var postId: GraphQLID {
                            get {
                                return snapshot["postID"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "postID")
                            }
                        }
                        
                        public var content: String {
                            get {
                                return snapshot["content"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "content")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnCreateComment6Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreateComment6 {\n  onCreateComment6 {\n    __typename\n    id\n    postID\n    post {\n      __typename\n      id\n      title\n      blogID\n      blog {\n        __typename\n        id\n        name\n        createdAt\n        updatedAt\n      }\n      comments {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    content\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreateComment6", type: .object(OnCreateComment6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreateComment6: OnCreateComment6? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreateComment6": onCreateComment6.flatMap { $0.snapshot }])
            }
            
            public var onCreateComment6: OnCreateComment6? {
                get {
                    return (snapshot["onCreateComment6"] as? Snapshot).flatMap { OnCreateComment6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreateComment6")
                }
            }
            
            public struct OnCreateComment6: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, post: Post? = nil, content: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment6", "id": id, "postID": postId, "post": post.flatMap { $0.snapshot }, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post6"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("blog", type: .object(Blog.selections)),
                        GraphQLField("comments", type: .object(Comment.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, blogId: GraphQLID, blog: Blog? = nil, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "blog": blog.flatMap { $0.snapshot }, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var blogId: GraphQLID {
                        get {
                            return snapshot["blogID"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "blogID")
                        }
                    }
                    
                    public var blog: Blog? {
                        get {
                            return (snapshot["blog"] as? Snapshot).flatMap { Blog(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "blog")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Blog: GraphQLSelectionSet {
                        public static let possibleTypes = ["Blog6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var name: String {
                            get {
                                return snapshot["name"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "name")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelComment6Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelComment6Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnUpdateComment6Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdateComment6 {\n  onUpdateComment6 {\n    __typename\n    id\n    postID\n    post {\n      __typename\n      id\n      title\n      blogID\n      blog {\n        __typename\n        id\n        name\n        createdAt\n        updatedAt\n      }\n      comments {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    content\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdateComment6", type: .object(OnUpdateComment6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdateComment6: OnUpdateComment6? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdateComment6": onUpdateComment6.flatMap { $0.snapshot }])
            }
            
            public var onUpdateComment6: OnUpdateComment6? {
                get {
                    return (snapshot["onUpdateComment6"] as? Snapshot).flatMap { OnUpdateComment6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateComment6")
                }
            }
            
            public struct OnUpdateComment6: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, post: Post? = nil, content: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment6", "id": id, "postID": postId, "post": post.flatMap { $0.snapshot }, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post6"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("blog", type: .object(Blog.selections)),
                        GraphQLField("comments", type: .object(Comment.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, blogId: GraphQLID, blog: Blog? = nil, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "blog": blog.flatMap { $0.snapshot }, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var blogId: GraphQLID {
                        get {
                            return snapshot["blogID"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "blogID")
                        }
                    }
                    
                    public var blog: Blog? {
                        get {
                            return (snapshot["blog"] as? Snapshot).flatMap { Blog(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "blog")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Blog: GraphQLSelectionSet {
                        public static let possibleTypes = ["Blog6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var name: String {
                            get {
                                return snapshot["name"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "name")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelComment6Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelComment6Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnDeleteComment6Subscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeleteComment6 {\n  onDeleteComment6 {\n    __typename\n    id\n    postID\n    post {\n      __typename\n      id\n      title\n      blogID\n      blog {\n        __typename\n        id\n        name\n        createdAt\n        updatedAt\n      }\n      comments {\n        __typename\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n    content\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeleteComment6", type: .object(OnDeleteComment6.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeleteComment6: OnDeleteComment6? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeleteComment6": onDeleteComment6.flatMap { $0.snapshot }])
            }
            
            public var onDeleteComment6: OnDeleteComment6? {
                get {
                    return (snapshot["onDeleteComment6"] as? Snapshot).flatMap { OnDeleteComment6(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteComment6")
                }
            }
            
            public struct OnDeleteComment6: GraphQLSelectionSet {
                public static let possibleTypes = ["Comment6"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("post", type: .object(Post.selections)),
                    GraphQLField("content", type: .nonNull(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, postId: GraphQLID, post: Post? = nil, content: String, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "Comment6", "id": id, "postID": postId, "post": post.flatMap { $0.snapshot }, "content": content, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var postId: GraphQLID {
                    get {
                        return snapshot["postID"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "postID")
                    }
                }
                
                public var post: Post? {
                    get {
                        return (snapshot["post"] as? Snapshot).flatMap { Post(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "post")
                    }
                }
                
                public var content: String {
                    get {
                        return snapshot["content"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "content")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct Post: GraphQLSelectionSet {
                    public static let possibleTypes = ["Post6"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("title", type: .nonNull(.scalar(String.self))),
                        GraphQLField("blogID", type: .nonNull(.scalar(GraphQLID.self))),
                        GraphQLField("blog", type: .object(Blog.selections)),
                        GraphQLField("comments", type: .object(Comment.selections)),
                        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(id: GraphQLID, title: String, blogId: GraphQLID, blog: Blog? = nil, comments: Comment? = nil, createdAt: String, updatedAt: String) {
                        self.init(snapshot: ["__typename": "Post6", "id": id, "title": title, "blogID": blogId, "blog": blog.flatMap { $0.snapshot }, "comments": comments.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var id: GraphQLID {
                        get {
                            return snapshot["id"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "id")
                        }
                    }
                    
                    public var title: String {
                        get {
                            return snapshot["title"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "title")
                        }
                    }
                    
                    public var blogId: GraphQLID {
                        get {
                            return snapshot["blogID"]! as! GraphQLID
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "blogID")
                        }
                    }
                    
                    public var blog: Blog? {
                        get {
                            return (snapshot["blog"] as? Snapshot).flatMap { Blog(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "blog")
                        }
                    }
                    
                    public var comments: Comment? {
                        get {
                            return (snapshot["comments"] as? Snapshot).flatMap { Comment(snapshot: $0) }
                        }
                        set {
                            snapshot.updateValue(newValue?.snapshot, forKey: "comments")
                        }
                    }
                    
                    public var createdAt: String {
                        get {
                            return snapshot["createdAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "createdAt")
                        }
                    }
                    
                    public var updatedAt: String {
                        get {
                            return snapshot["updatedAt"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "updatedAt")
                        }
                    }
                    
                    public struct Blog: GraphQLSelectionSet {
                        public static let possibleTypes = ["Blog6"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                            GraphQLField("name", type: .nonNull(.scalar(String.self))),
                            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String) {
                            self.init(snapshot: ["__typename": "Blog6", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var id: GraphQLID {
                            get {
                                return snapshot["id"]! as! GraphQLID
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "id")
                            }
                        }
                        
                        public var name: String {
                            get {
                                return snapshot["name"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "name")
                            }
                        }
                        
                        public var createdAt: String {
                            get {
                                return snapshot["createdAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "createdAt")
                            }
                        }
                        
                        public var updatedAt: String {
                            get {
                                return snapshot["updatedAt"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "updatedAt")
                            }
                        }
                    }
                    
                    public struct Comment: GraphQLSelectionSet {
                        public static let possibleTypes = ["ModelComment6Connection"]
                        
                        public static let selections: [GraphQLSelection] = [
                            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                            GraphQLField("nextToken", type: .scalar(String.self)),
                        ]
                        
                        public var snapshot: Snapshot
                        
                        public init(snapshot: Snapshot) {
                            self.snapshot = snapshot
                        }
                        
                        public init(nextToken: String? = nil) {
                            self.init(snapshot: ["__typename": "ModelComment6Connection", "nextToken": nextToken])
                        }
                        
                        public var __typename: String {
                            get {
                                return snapshot["__typename"]! as! String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "__typename")
                            }
                        }
                        
                        public var nextToken: String? {
                            get {
                                return snapshot["nextToken"] as? String
                            }
                            set {
                                snapshot.updateValue(newValue, forKey: "nextToken")
                            }
                        }
                    }
                }
            }
        }
    }
    
    public final class OnCreateScalarContainerSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreateScalarContainer {\n  onCreateScalarContainer {\n    __typename\n    id\n    myString\n    myInt\n    myDouble\n    myBool\n    myDate\n    myTime\n    myDateTime\n    myTimeStamp\n    myEmail\n    myJSON\n    myPhone\n    myURL\n    myIPAddress\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreateScalarContainer", type: .object(OnCreateScalarContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreateScalarContainer: OnCreateScalarContainer? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreateScalarContainer": onCreateScalarContainer.flatMap { $0.snapshot }])
            }
            
            public var onCreateScalarContainer: OnCreateScalarContainer? {
                get {
                    return (snapshot["onCreateScalarContainer"] as? Snapshot).flatMap { OnCreateScalarContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreateScalarContainer")
                }
            }
            
            public struct OnCreateScalarContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ScalarContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("myString", type: .scalar(String.self)),
                    GraphQLField("myInt", type: .scalar(Int.self)),
                    GraphQLField("myDouble", type: .scalar(Double.self)),
                    GraphQLField("myBool", type: .scalar(Bool.self)),
                    GraphQLField("myDate", type: .scalar(String.self)),
                    GraphQLField("myTime", type: .scalar(String.self)),
                    GraphQLField("myDateTime", type: .scalar(String.self)),
                    GraphQLField("myTimeStamp", type: .scalar(Int.self)),
                    GraphQLField("myEmail", type: .scalar(String.self)),
                    GraphQLField("myJSON", type: .scalar(String.self)),
                    GraphQLField("myPhone", type: .scalar(String.self)),
                    GraphQLField("myURL", type: .scalar(String.self)),
                    GraphQLField("myIPAddress", type: .scalar(String.self)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, myString: String? = nil, myInt: Int? = nil, myDouble: Double? = nil, myBool: Bool? = nil, myDate: String? = nil, myTime: String? = nil, myDateTime: String? = nil, myTimeStamp: Int? = nil, myEmail: String? = nil, myJson: String? = nil, myPhone: String? = nil, myUrl: String? = nil, myIpAddress: String? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ScalarContainer", "id": id, "myString": myString, "myInt": myInt, "myDouble": myDouble, "myBool": myBool, "myDate": myDate, "myTime": myTime, "myDateTime": myDateTime, "myTimeStamp": myTimeStamp, "myEmail": myEmail, "myJSON": myJson, "myPhone": myPhone, "myURL": myUrl, "myIPAddress": myIpAddress, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var myString: String? {
                    get {
                        return snapshot["myString"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myString")
                    }
                }
                
                public var myInt: Int? {
                    get {
                        return snapshot["myInt"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myInt")
                    }
                }
                
                public var myDouble: Double? {
                    get {
                        return snapshot["myDouble"] as? Double
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDouble")
                    }
                }
                
                public var myBool: Bool? {
                    get {
                        return snapshot["myBool"] as? Bool
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myBool")
                    }
                }
                
                public var myDate: String? {
                    get {
                        return snapshot["myDate"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDate")
                    }
                }
                
                public var myTime: String? {
                    get {
                        return snapshot["myTime"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myTime")
                    }
                }
                
                public var myDateTime: String? {
                    get {
                        return snapshot["myDateTime"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDateTime")
                    }
                }
                
                public var myTimeStamp: Int? {
                    get {
                        return snapshot["myTimeStamp"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myTimeStamp")
                    }
                }
                
                public var myEmail: String? {
                    get {
                        return snapshot["myEmail"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myEmail")
                    }
                }
                
                public var myJson: String? {
                    get {
                        return snapshot["myJSON"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myJSON")
                    }
                }
                
                public var myPhone: String? {
                    get {
                        return snapshot["myPhone"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myPhone")
                    }
                }
                
                public var myUrl: String? {
                    get {
                        return snapshot["myURL"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myURL")
                    }
                }
                
                public var myIpAddress: String? {
                    get {
                        return snapshot["myIPAddress"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myIPAddress")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnUpdateScalarContainerSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdateScalarContainer {\n  onUpdateScalarContainer {\n    __typename\n    id\n    myString\n    myInt\n    myDouble\n    myBool\n    myDate\n    myTime\n    myDateTime\n    myTimeStamp\n    myEmail\n    myJSON\n    myPhone\n    myURL\n    myIPAddress\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdateScalarContainer", type: .object(OnUpdateScalarContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdateScalarContainer: OnUpdateScalarContainer? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdateScalarContainer": onUpdateScalarContainer.flatMap { $0.snapshot }])
            }
            
            public var onUpdateScalarContainer: OnUpdateScalarContainer? {
                get {
                    return (snapshot["onUpdateScalarContainer"] as? Snapshot).flatMap { OnUpdateScalarContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateScalarContainer")
                }
            }
            
            public struct OnUpdateScalarContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ScalarContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("myString", type: .scalar(String.self)),
                    GraphQLField("myInt", type: .scalar(Int.self)),
                    GraphQLField("myDouble", type: .scalar(Double.self)),
                    GraphQLField("myBool", type: .scalar(Bool.self)),
                    GraphQLField("myDate", type: .scalar(String.self)),
                    GraphQLField("myTime", type: .scalar(String.self)),
                    GraphQLField("myDateTime", type: .scalar(String.self)),
                    GraphQLField("myTimeStamp", type: .scalar(Int.self)),
                    GraphQLField("myEmail", type: .scalar(String.self)),
                    GraphQLField("myJSON", type: .scalar(String.self)),
                    GraphQLField("myPhone", type: .scalar(String.self)),
                    GraphQLField("myURL", type: .scalar(String.self)),
                    GraphQLField("myIPAddress", type: .scalar(String.self)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, myString: String? = nil, myInt: Int? = nil, myDouble: Double? = nil, myBool: Bool? = nil, myDate: String? = nil, myTime: String? = nil, myDateTime: String? = nil, myTimeStamp: Int? = nil, myEmail: String? = nil, myJson: String? = nil, myPhone: String? = nil, myUrl: String? = nil, myIpAddress: String? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ScalarContainer", "id": id, "myString": myString, "myInt": myInt, "myDouble": myDouble, "myBool": myBool, "myDate": myDate, "myTime": myTime, "myDateTime": myDateTime, "myTimeStamp": myTimeStamp, "myEmail": myEmail, "myJSON": myJson, "myPhone": myPhone, "myURL": myUrl, "myIPAddress": myIpAddress, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var myString: String? {
                    get {
                        return snapshot["myString"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myString")
                    }
                }
                
                public var myInt: Int? {
                    get {
                        return snapshot["myInt"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myInt")
                    }
                }
                
                public var myDouble: Double? {
                    get {
                        return snapshot["myDouble"] as? Double
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDouble")
                    }
                }
                
                public var myBool: Bool? {
                    get {
                        return snapshot["myBool"] as? Bool
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myBool")
                    }
                }
                
                public var myDate: String? {
                    get {
                        return snapshot["myDate"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDate")
                    }
                }
                
                public var myTime: String? {
                    get {
                        return snapshot["myTime"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myTime")
                    }
                }
                
                public var myDateTime: String? {
                    get {
                        return snapshot["myDateTime"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDateTime")
                    }
                }
                
                public var myTimeStamp: Int? {
                    get {
                        return snapshot["myTimeStamp"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myTimeStamp")
                    }
                }
                
                public var myEmail: String? {
                    get {
                        return snapshot["myEmail"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myEmail")
                    }
                }
                
                public var myJson: String? {
                    get {
                        return snapshot["myJSON"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myJSON")
                    }
                }
                
                public var myPhone: String? {
                    get {
                        return snapshot["myPhone"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myPhone")
                    }
                }
                
                public var myUrl: String? {
                    get {
                        return snapshot["myURL"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myURL")
                    }
                }
                
                public var myIpAddress: String? {
                    get {
                        return snapshot["myIPAddress"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myIPAddress")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnDeleteScalarContainerSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeleteScalarContainer {\n  onDeleteScalarContainer {\n    __typename\n    id\n    myString\n    myInt\n    myDouble\n    myBool\n    myDate\n    myTime\n    myDateTime\n    myTimeStamp\n    myEmail\n    myJSON\n    myPhone\n    myURL\n    myIPAddress\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeleteScalarContainer", type: .object(OnDeleteScalarContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeleteScalarContainer: OnDeleteScalarContainer? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeleteScalarContainer": onDeleteScalarContainer.flatMap { $0.snapshot }])
            }
            
            public var onDeleteScalarContainer: OnDeleteScalarContainer? {
                get {
                    return (snapshot["onDeleteScalarContainer"] as? Snapshot).flatMap { OnDeleteScalarContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteScalarContainer")
                }
            }
            
            public struct OnDeleteScalarContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ScalarContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("myString", type: .scalar(String.self)),
                    GraphQLField("myInt", type: .scalar(Int.self)),
                    GraphQLField("myDouble", type: .scalar(Double.self)),
                    GraphQLField("myBool", type: .scalar(Bool.self)),
                    GraphQLField("myDate", type: .scalar(String.self)),
                    GraphQLField("myTime", type: .scalar(String.self)),
                    GraphQLField("myDateTime", type: .scalar(String.self)),
                    GraphQLField("myTimeStamp", type: .scalar(Int.self)),
                    GraphQLField("myEmail", type: .scalar(String.self)),
                    GraphQLField("myJSON", type: .scalar(String.self)),
                    GraphQLField("myPhone", type: .scalar(String.self)),
                    GraphQLField("myURL", type: .scalar(String.self)),
                    GraphQLField("myIPAddress", type: .scalar(String.self)),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, myString: String? = nil, myInt: Int? = nil, myDouble: Double? = nil, myBool: Bool? = nil, myDate: String? = nil, myTime: String? = nil, myDateTime: String? = nil, myTimeStamp: Int? = nil, myEmail: String? = nil, myJson: String? = nil, myPhone: String? = nil, myUrl: String? = nil, myIpAddress: String? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ScalarContainer", "id": id, "myString": myString, "myInt": myInt, "myDouble": myDouble, "myBool": myBool, "myDate": myDate, "myTime": myTime, "myDateTime": myDateTime, "myTimeStamp": myTimeStamp, "myEmail": myEmail, "myJSON": myJson, "myPhone": myPhone, "myURL": myUrl, "myIPAddress": myIpAddress, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var myString: String? {
                    get {
                        return snapshot["myString"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myString")
                    }
                }
                
                public var myInt: Int? {
                    get {
                        return snapshot["myInt"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myInt")
                    }
                }
                
                public var myDouble: Double? {
                    get {
                        return snapshot["myDouble"] as? Double
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDouble")
                    }
                }
                
                public var myBool: Bool? {
                    get {
                        return snapshot["myBool"] as? Bool
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myBool")
                    }
                }
                
                public var myDate: String? {
                    get {
                        return snapshot["myDate"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDate")
                    }
                }
                
                public var myTime: String? {
                    get {
                        return snapshot["myTime"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myTime")
                    }
                }
                
                public var myDateTime: String? {
                    get {
                        return snapshot["myDateTime"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myDateTime")
                    }
                }
                
                public var myTimeStamp: Int? {
                    get {
                        return snapshot["myTimeStamp"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myTimeStamp")
                    }
                }
                
                public var myEmail: String? {
                    get {
                        return snapshot["myEmail"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myEmail")
                    }
                }
                
                public var myJson: String? {
                    get {
                        return snapshot["myJSON"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myJSON")
                    }
                }
                
                public var myPhone: String? {
                    get {
                        return snapshot["myPhone"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myPhone")
                    }
                }
                
                public var myUrl: String? {
                    get {
                        return snapshot["myURL"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myURL")
                    }
                }
                
                public var myIpAddress: String? {
                    get {
                        return snapshot["myIPAddress"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "myIPAddress")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnCreateListIntContainerSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreateListIntContainer {\n  onCreateListIntContainer {\n    __typename\n    id\n    test\n    nullableInt\n    intList\n    intNullableList\n    nullableIntList\n    nullableIntNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreateListIntContainer", type: .object(OnCreateListIntContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreateListIntContainer: OnCreateListIntContainer? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreateListIntContainer": onCreateListIntContainer.flatMap { $0.snapshot }])
            }
            
            public var onCreateListIntContainer: OnCreateListIntContainer? {
                get {
                    return (snapshot["onCreateListIntContainer"] as? Snapshot).flatMap { OnCreateListIntContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreateListIntContainer")
                }
            }
            
            public struct OnCreateListIntContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ListIntContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("test", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("nullableInt", type: .scalar(Int.self)),
                    GraphQLField("intList", type: .nonNull(.list(.nonNull(.scalar(Int.self))))),
                    GraphQLField("intNullableList", type: .list(.nonNull(.scalar(Int.self)))),
                    GraphQLField("nullableIntList", type: .nonNull(.list(.scalar(Int.self)))),
                    GraphQLField("nullableIntNullableList", type: .list(.scalar(Int.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, test: Int, nullableInt: Int? = nil, intList: [Int], intNullableList: [Int]? = nil, nullableIntList: [Int?], nullableIntNullableList: [Int?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ListIntContainer", "id": id, "test": test, "nullableInt": nullableInt, "intList": intList, "intNullableList": intNullableList, "nullableIntList": nullableIntList, "nullableIntNullableList": nullableIntNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var test: Int {
                    get {
                        return snapshot["test"]! as! Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "test")
                    }
                }
                
                public var nullableInt: Int? {
                    get {
                        return snapshot["nullableInt"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableInt")
                    }
                }
                
                public var intList: [Int] {
                    get {
                        return snapshot["intList"]! as! [Int]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "intList")
                    }
                }
                
                public var intNullableList: [Int]? {
                    get {
                        return snapshot["intNullableList"] as? [Int]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "intNullableList")
                    }
                }
                
                public var nullableIntList: [Int?] {
                    get {
                        return snapshot["nullableIntList"]! as! [Int?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableIntList")
                    }
                }
                
                public var nullableIntNullableList: [Int?]? {
                    get {
                        return snapshot["nullableIntNullableList"] as? [Int?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableIntNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnUpdateListIntContainerSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdateListIntContainer {\n  onUpdateListIntContainer {\n    __typename\n    id\n    test\n    nullableInt\n    intList\n    intNullableList\n    nullableIntList\n    nullableIntNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdateListIntContainer", type: .object(OnUpdateListIntContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdateListIntContainer: OnUpdateListIntContainer? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdateListIntContainer": onUpdateListIntContainer.flatMap { $0.snapshot }])
            }
            
            public var onUpdateListIntContainer: OnUpdateListIntContainer? {
                get {
                    return (snapshot["onUpdateListIntContainer"] as? Snapshot).flatMap { OnUpdateListIntContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateListIntContainer")
                }
            }
            
            public struct OnUpdateListIntContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ListIntContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("test", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("nullableInt", type: .scalar(Int.self)),
                    GraphQLField("intList", type: .nonNull(.list(.nonNull(.scalar(Int.self))))),
                    GraphQLField("intNullableList", type: .list(.nonNull(.scalar(Int.self)))),
                    GraphQLField("nullableIntList", type: .nonNull(.list(.scalar(Int.self)))),
                    GraphQLField("nullableIntNullableList", type: .list(.scalar(Int.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, test: Int, nullableInt: Int? = nil, intList: [Int], intNullableList: [Int]? = nil, nullableIntList: [Int?], nullableIntNullableList: [Int?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ListIntContainer", "id": id, "test": test, "nullableInt": nullableInt, "intList": intList, "intNullableList": intNullableList, "nullableIntList": nullableIntList, "nullableIntNullableList": nullableIntNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var test: Int {
                    get {
                        return snapshot["test"]! as! Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "test")
                    }
                }
                
                public var nullableInt: Int? {
                    get {
                        return snapshot["nullableInt"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableInt")
                    }
                }
                
                public var intList: [Int] {
                    get {
                        return snapshot["intList"]! as! [Int]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "intList")
                    }
                }
                
                public var intNullableList: [Int]? {
                    get {
                        return snapshot["intNullableList"] as? [Int]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "intNullableList")
                    }
                }
                
                public var nullableIntList: [Int?] {
                    get {
                        return snapshot["nullableIntList"]! as! [Int?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableIntList")
                    }
                }
                
                public var nullableIntNullableList: [Int?]? {
                    get {
                        return snapshot["nullableIntNullableList"] as? [Int?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableIntNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnDeleteListIntContainerSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeleteListIntContainer {\n  onDeleteListIntContainer {\n    __typename\n    id\n    test\n    nullableInt\n    intList\n    intNullableList\n    nullableIntList\n    nullableIntNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeleteListIntContainer", type: .object(OnDeleteListIntContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeleteListIntContainer: OnDeleteListIntContainer? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeleteListIntContainer": onDeleteListIntContainer.flatMap { $0.snapshot }])
            }
            
            public var onDeleteListIntContainer: OnDeleteListIntContainer? {
                get {
                    return (snapshot["onDeleteListIntContainer"] as? Snapshot).flatMap { OnDeleteListIntContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteListIntContainer")
                }
            }
            
            public struct OnDeleteListIntContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ListIntContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("test", type: .nonNull(.scalar(Int.self))),
                    GraphQLField("nullableInt", type: .scalar(Int.self)),
                    GraphQLField("intList", type: .nonNull(.list(.nonNull(.scalar(Int.self))))),
                    GraphQLField("intNullableList", type: .list(.nonNull(.scalar(Int.self)))),
                    GraphQLField("nullableIntList", type: .nonNull(.list(.scalar(Int.self)))),
                    GraphQLField("nullableIntNullableList", type: .list(.scalar(Int.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, test: Int, nullableInt: Int? = nil, intList: [Int], intNullableList: [Int]? = nil, nullableIntList: [Int?], nullableIntNullableList: [Int?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ListIntContainer", "id": id, "test": test, "nullableInt": nullableInt, "intList": intList, "intNullableList": intNullableList, "nullableIntList": nullableIntList, "nullableIntNullableList": nullableIntNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var test: Int {
                    get {
                        return snapshot["test"]! as! Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "test")
                    }
                }
                
                public var nullableInt: Int? {
                    get {
                        return snapshot["nullableInt"] as? Int
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableInt")
                    }
                }
                
                public var intList: [Int] {
                    get {
                        return snapshot["intList"]! as! [Int]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "intList")
                    }
                }
                
                public var intNullableList: [Int]? {
                    get {
                        return snapshot["intNullableList"] as? [Int]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "intNullableList")
                    }
                }
                
                public var nullableIntList: [Int?] {
                    get {
                        return snapshot["nullableIntList"]! as! [Int?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableIntList")
                    }
                }
                
                public var nullableIntNullableList: [Int?]? {
                    get {
                        return snapshot["nullableIntNullableList"] as? [Int?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableIntNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnCreateListStringContainerSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreateListStringContainer {\n  onCreateListStringContainer {\n    __typename\n    id\n    test\n    nullableString\n    stringList\n    stringNullableList\n    nullableStringList\n    nullableStringNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreateListStringContainer", type: .object(OnCreateListStringContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreateListStringContainer: OnCreateListStringContainer? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreateListStringContainer": onCreateListStringContainer.flatMap { $0.snapshot }])
            }
            
            public var onCreateListStringContainer: OnCreateListStringContainer? {
                get {
                    return (snapshot["onCreateListStringContainer"] as? Snapshot).flatMap { OnCreateListStringContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreateListStringContainer")
                }
            }
            
            public struct OnCreateListStringContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ListStringContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("test", type: .nonNull(.scalar(String.self))),
                    GraphQLField("nullableString", type: .scalar(String.self)),
                    GraphQLField("stringList", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
                    GraphQLField("stringNullableList", type: .list(.nonNull(.scalar(String.self)))),
                    GraphQLField("nullableStringList", type: .nonNull(.list(.scalar(String.self)))),
                    GraphQLField("nullableStringNullableList", type: .list(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, test: String, nullableString: String? = nil, stringList: [String], stringNullableList: [String]? = nil, nullableStringList: [String?], nullableStringNullableList: [String?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ListStringContainer", "id": id, "test": test, "nullableString": nullableString, "stringList": stringList, "stringNullableList": stringNullableList, "nullableStringList": nullableStringList, "nullableStringNullableList": nullableStringNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var test: String {
                    get {
                        return snapshot["test"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "test")
                    }
                }
                
                public var nullableString: String? {
                    get {
                        return snapshot["nullableString"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableString")
                    }
                }
                
                public var stringList: [String] {
                    get {
                        return snapshot["stringList"]! as! [String]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "stringList")
                    }
                }
                
                public var stringNullableList: [String]? {
                    get {
                        return snapshot["stringNullableList"] as? [String]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "stringNullableList")
                    }
                }
                
                public var nullableStringList: [String?] {
                    get {
                        return snapshot["nullableStringList"]! as! [String?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableStringList")
                    }
                }
                
                public var nullableStringNullableList: [String?]? {
                    get {
                        return snapshot["nullableStringNullableList"] as? [String?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableStringNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnUpdateListStringContainerSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdateListStringContainer {\n  onUpdateListStringContainer {\n    __typename\n    id\n    test\n    nullableString\n    stringList\n    stringNullableList\n    nullableStringList\n    nullableStringNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdateListStringContainer", type: .object(OnUpdateListStringContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdateListStringContainer: OnUpdateListStringContainer? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdateListStringContainer": onUpdateListStringContainer.flatMap { $0.snapshot }])
            }
            
            public var onUpdateListStringContainer: OnUpdateListStringContainer? {
                get {
                    return (snapshot["onUpdateListStringContainer"] as? Snapshot).flatMap { OnUpdateListStringContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateListStringContainer")
                }
            }
            
            public struct OnUpdateListStringContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ListStringContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("test", type: .nonNull(.scalar(String.self))),
                    GraphQLField("nullableString", type: .scalar(String.self)),
                    GraphQLField("stringList", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
                    GraphQLField("stringNullableList", type: .list(.nonNull(.scalar(String.self)))),
                    GraphQLField("nullableStringList", type: .nonNull(.list(.scalar(String.self)))),
                    GraphQLField("nullableStringNullableList", type: .list(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, test: String, nullableString: String? = nil, stringList: [String], stringNullableList: [String]? = nil, nullableStringList: [String?], nullableStringNullableList: [String?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ListStringContainer", "id": id, "test": test, "nullableString": nullableString, "stringList": stringList, "stringNullableList": stringNullableList, "nullableStringList": nullableStringList, "nullableStringNullableList": nullableStringNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var test: String {
                    get {
                        return snapshot["test"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "test")
                    }
                }
                
                public var nullableString: String? {
                    get {
                        return snapshot["nullableString"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableString")
                    }
                }
                
                public var stringList: [String] {
                    get {
                        return snapshot["stringList"]! as! [String]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "stringList")
                    }
                }
                
                public var stringNullableList: [String]? {
                    get {
                        return snapshot["stringNullableList"] as? [String]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "stringNullableList")
                    }
                }
                
                public var nullableStringList: [String?] {
                    get {
                        return snapshot["nullableStringList"]! as! [String?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableStringList")
                    }
                }
                
                public var nullableStringNullableList: [String?]? {
                    get {
                        return snapshot["nullableStringNullableList"] as? [String?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableStringNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnDeleteListStringContainerSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeleteListStringContainer {\n  onDeleteListStringContainer {\n    __typename\n    id\n    test\n    nullableString\n    stringList\n    stringNullableList\n    nullableStringList\n    nullableStringNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeleteListStringContainer", type: .object(OnDeleteListStringContainer.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeleteListStringContainer: OnDeleteListStringContainer? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeleteListStringContainer": onDeleteListStringContainer.flatMap { $0.snapshot }])
            }
            
            public var onDeleteListStringContainer: OnDeleteListStringContainer? {
                get {
                    return (snapshot["onDeleteListStringContainer"] as? Snapshot).flatMap { OnDeleteListStringContainer(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteListStringContainer")
                }
            }
            
            public struct OnDeleteListStringContainer: GraphQLSelectionSet {
                public static let possibleTypes = ["ListStringContainer"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("test", type: .nonNull(.scalar(String.self))),
                    GraphQLField("nullableString", type: .scalar(String.self)),
                    GraphQLField("stringList", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
                    GraphQLField("stringNullableList", type: .list(.nonNull(.scalar(String.self)))),
                    GraphQLField("nullableStringList", type: .nonNull(.list(.scalar(String.self)))),
                    GraphQLField("nullableStringNullableList", type: .list(.scalar(String.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, test: String, nullableString: String? = nil, stringList: [String], stringNullableList: [String]? = nil, nullableStringList: [String?], nullableStringNullableList: [String?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "ListStringContainer", "id": id, "test": test, "nullableString": nullableString, "stringList": stringList, "stringNullableList": stringNullableList, "nullableStringList": nullableStringList, "nullableStringNullableList": nullableStringNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var test: String {
                    get {
                        return snapshot["test"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "test")
                    }
                }
                
                public var nullableString: String? {
                    get {
                        return snapshot["nullableString"] as? String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableString")
                    }
                }
                
                public var stringList: [String] {
                    get {
                        return snapshot["stringList"]! as! [String]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "stringList")
                    }
                }
                
                public var stringNullableList: [String]? {
                    get {
                        return snapshot["stringNullableList"] as? [String]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "stringNullableList")
                    }
                }
                
                public var nullableStringList: [String?] {
                    get {
                        return snapshot["nullableStringList"]! as! [String?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableStringList")
                    }
                }
                
                public var nullableStringNullableList: [String?]? {
                    get {
                        return snapshot["nullableStringNullableList"] as? [String?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableStringNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnCreateEnumTestModelSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreateEnumTestModel {\n  onCreateEnumTestModel {\n    __typename\n    id\n    enumVal\n    nullableEnumVal\n    enumList\n    enumNullableList\n    nullableEnumList\n    nullableEnumNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreateEnumTestModel", type: .object(OnCreateEnumTestModel.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreateEnumTestModel: OnCreateEnumTestModel? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreateEnumTestModel": onCreateEnumTestModel.flatMap { $0.snapshot }])
            }
            
            public var onCreateEnumTestModel: OnCreateEnumTestModel? {
                get {
                    return (snapshot["onCreateEnumTestModel"] as? Snapshot).flatMap { OnCreateEnumTestModel(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreateEnumTestModel")
                }
            }
            
            public struct OnCreateEnumTestModel: GraphQLSelectionSet {
                public static let possibleTypes = ["EnumTestModel"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("enumVal", type: .nonNull(.scalar(TestEnum.self))),
                    GraphQLField("nullableEnumVal", type: .scalar(TestEnum.self)),
                    GraphQLField("enumList", type: .nonNull(.list(.nonNull(.scalar(TestEnum.self))))),
                    GraphQLField("enumNullableList", type: .list(.nonNull(.scalar(TestEnum.self)))),
                    GraphQLField("nullableEnumList", type: .nonNull(.list(.scalar(TestEnum.self)))),
                    GraphQLField("nullableEnumNullableList", type: .list(.scalar(TestEnum.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, enumVal: TestEnum, nullableEnumVal: TestEnum? = nil, enumList: [TestEnum], enumNullableList: [TestEnum]? = nil, nullableEnumList: [TestEnum?], nullableEnumNullableList: [TestEnum?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "EnumTestModel", "id": id, "enumVal": enumVal, "nullableEnumVal": nullableEnumVal, "enumList": enumList, "enumNullableList": enumNullableList, "nullableEnumList": nullableEnumList, "nullableEnumNullableList": nullableEnumNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var enumVal: TestEnum {
                    get {
                        return snapshot["enumVal"]! as! TestEnum
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumVal")
                    }
                }
                
                public var nullableEnumVal: TestEnum? {
                    get {
                        return snapshot["nullableEnumVal"] as? TestEnum
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumVal")
                    }
                }
                
                public var enumList: [TestEnum] {
                    get {
                        return snapshot["enumList"]! as! [TestEnum]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumList")
                    }
                }
                
                public var enumNullableList: [TestEnum]? {
                    get {
                        return snapshot["enumNullableList"] as? [TestEnum]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumNullableList")
                    }
                }
                
                public var nullableEnumList: [TestEnum?] {
                    get {
                        return snapshot["nullableEnumList"]! as! [TestEnum?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumList")
                    }
                }
                
                public var nullableEnumNullableList: [TestEnum?]? {
                    get {
                        return snapshot["nullableEnumNullableList"] as? [TestEnum?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnUpdateEnumTestModelSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdateEnumTestModel {\n  onUpdateEnumTestModel {\n    __typename\n    id\n    enumVal\n    nullableEnumVal\n    enumList\n    enumNullableList\n    nullableEnumList\n    nullableEnumNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdateEnumTestModel", type: .object(OnUpdateEnumTestModel.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdateEnumTestModel: OnUpdateEnumTestModel? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdateEnumTestModel": onUpdateEnumTestModel.flatMap { $0.snapshot }])
            }
            
            public var onUpdateEnumTestModel: OnUpdateEnumTestModel? {
                get {
                    return (snapshot["onUpdateEnumTestModel"] as? Snapshot).flatMap { OnUpdateEnumTestModel(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateEnumTestModel")
                }
            }
            
            public struct OnUpdateEnumTestModel: GraphQLSelectionSet {
                public static let possibleTypes = ["EnumTestModel"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("enumVal", type: .nonNull(.scalar(TestEnum.self))),
                    GraphQLField("nullableEnumVal", type: .scalar(TestEnum.self)),
                    GraphQLField("enumList", type: .nonNull(.list(.nonNull(.scalar(TestEnum.self))))),
                    GraphQLField("enumNullableList", type: .list(.nonNull(.scalar(TestEnum.self)))),
                    GraphQLField("nullableEnumList", type: .nonNull(.list(.scalar(TestEnum.self)))),
                    GraphQLField("nullableEnumNullableList", type: .list(.scalar(TestEnum.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, enumVal: TestEnum, nullableEnumVal: TestEnum? = nil, enumList: [TestEnum], enumNullableList: [TestEnum]? = nil, nullableEnumList: [TestEnum?], nullableEnumNullableList: [TestEnum?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "EnumTestModel", "id": id, "enumVal": enumVal, "nullableEnumVal": nullableEnumVal, "enumList": enumList, "enumNullableList": enumNullableList, "nullableEnumList": nullableEnumList, "nullableEnumNullableList": nullableEnumNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var enumVal: TestEnum {
                    get {
                        return snapshot["enumVal"]! as! TestEnum
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumVal")
                    }
                }
                
                public var nullableEnumVal: TestEnum? {
                    get {
                        return snapshot["nullableEnumVal"] as? TestEnum
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumVal")
                    }
                }
                
                public var enumList: [TestEnum] {
                    get {
                        return snapshot["enumList"]! as! [TestEnum]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumList")
                    }
                }
                
                public var enumNullableList: [TestEnum]? {
                    get {
                        return snapshot["enumNullableList"] as? [TestEnum]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumNullableList")
                    }
                }
                
                public var nullableEnumList: [TestEnum?] {
                    get {
                        return snapshot["nullableEnumList"]! as! [TestEnum?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumList")
                    }
                }
                
                public var nullableEnumNullableList: [TestEnum?]? {
                    get {
                        return snapshot["nullableEnumNullableList"] as? [TestEnum?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnDeleteEnumTestModelSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeleteEnumTestModel {\n  onDeleteEnumTestModel {\n    __typename\n    id\n    enumVal\n    nullableEnumVal\n    enumList\n    enumNullableList\n    nullableEnumList\n    nullableEnumNullableList\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeleteEnumTestModel", type: .object(OnDeleteEnumTestModel.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeleteEnumTestModel: OnDeleteEnumTestModel? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeleteEnumTestModel": onDeleteEnumTestModel.flatMap { $0.snapshot }])
            }
            
            public var onDeleteEnumTestModel: OnDeleteEnumTestModel? {
                get {
                    return (snapshot["onDeleteEnumTestModel"] as? Snapshot).flatMap { OnDeleteEnumTestModel(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteEnumTestModel")
                }
            }
            
            public struct OnDeleteEnumTestModel: GraphQLSelectionSet {
                public static let possibleTypes = ["EnumTestModel"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("enumVal", type: .nonNull(.scalar(TestEnum.self))),
                    GraphQLField("nullableEnumVal", type: .scalar(TestEnum.self)),
                    GraphQLField("enumList", type: .nonNull(.list(.nonNull(.scalar(TestEnum.self))))),
                    GraphQLField("enumNullableList", type: .list(.nonNull(.scalar(TestEnum.self)))),
                    GraphQLField("nullableEnumList", type: .nonNull(.list(.scalar(TestEnum.self)))),
                    GraphQLField("nullableEnumNullableList", type: .list(.scalar(TestEnum.self))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, enumVal: TestEnum, nullableEnumVal: TestEnum? = nil, enumList: [TestEnum], enumNullableList: [TestEnum]? = nil, nullableEnumList: [TestEnum?], nullableEnumNullableList: [TestEnum?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "EnumTestModel", "id": id, "enumVal": enumVal, "nullableEnumVal": nullableEnumVal, "enumList": enumList, "enumNullableList": enumNullableList, "nullableEnumList": nullableEnumList, "nullableEnumNullableList": nullableEnumNullableList, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var enumVal: TestEnum {
                    get {
                        return snapshot["enumVal"]! as! TestEnum
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumVal")
                    }
                }
                
                public var nullableEnumVal: TestEnum? {
                    get {
                        return snapshot["nullableEnumVal"] as? TestEnum
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumVal")
                    }
                }
                
                public var enumList: [TestEnum] {
                    get {
                        return snapshot["enumList"]! as! [TestEnum]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumList")
                    }
                }
                
                public var enumNullableList: [TestEnum]? {
                    get {
                        return snapshot["enumNullableList"] as? [TestEnum]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "enumNullableList")
                    }
                }
                
                public var nullableEnumList: [TestEnum?] {
                    get {
                        return snapshot["nullableEnumList"]! as! [TestEnum?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumList")
                    }
                }
                
                public var nullableEnumNullableList: [TestEnum?]? {
                    get {
                        return snapshot["nullableEnumNullableList"] as? [TestEnum?]
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "nullableEnumNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
            }
        }
    }
    
    public final class OnCreateNestedTypeTestModelSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnCreateNestedTypeTestModel {\n  onCreateNestedTypeTestModel {\n    __typename\n    id\n    nestedVal {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedVal {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nestedList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nestedNullableList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedNullableList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onCreateNestedTypeTestModel", type: .object(OnCreateNestedTypeTestModel.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onCreateNestedTypeTestModel: OnCreateNestedTypeTestModel? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onCreateNestedTypeTestModel": onCreateNestedTypeTestModel.flatMap { $0.snapshot }])
            }
            
            public var onCreateNestedTypeTestModel: OnCreateNestedTypeTestModel? {
                get {
                    return (snapshot["onCreateNestedTypeTestModel"] as? Snapshot).flatMap { OnCreateNestedTypeTestModel(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onCreateNestedTypeTestModel")
                }
            }
            
            public struct OnCreateNestedTypeTestModel: GraphQLSelectionSet {
                public static let possibleTypes = ["NestedTypeTestModel"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("nestedVal", type: .nonNull(.object(NestedVal.selections))),
                    GraphQLField("nullableNestedVal", type: .object(NullableNestedVal.selections)),
                    GraphQLField("nestedList", type: .nonNull(.list(.nonNull(.object(NestedList.selections))))),
                    GraphQLField("nestedNullableList", type: .list(.nonNull(.object(NestedNullableList.selections)))),
                    GraphQLField("nullableNestedList", type: .nonNull(.list(.object(NullableNestedList.selections)))),
                    GraphQLField("nullableNestedNullableList", type: .list(.object(NullableNestedNullableList.selections))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, nestedVal: NestedVal, nullableNestedVal: NullableNestedVal? = nil, nestedList: [NestedList], nestedNullableList: [NestedNullableList]? = nil, nullableNestedList: [NullableNestedList?], nullableNestedNullableList: [NullableNestedNullableList?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "NestedTypeTestModel", "id": id, "nestedVal": nestedVal.snapshot, "nullableNestedVal": nullableNestedVal.flatMap { $0.snapshot }, "nestedList": nestedList.map { $0.snapshot }, "nestedNullableList": nestedNullableList.flatMap { $0.map { $0.snapshot } }, "nullableNestedList": nullableNestedList.map { $0.flatMap { $0.snapshot } }, "nullableNestedNullableList": nullableNestedNullableList.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var nestedVal: NestedVal {
                    get {
                        return NestedVal(snapshot: snapshot["nestedVal"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "nestedVal")
                    }
                }
                
                public var nullableNestedVal: NullableNestedVal? {
                    get {
                        return (snapshot["nullableNestedVal"] as? Snapshot).flatMap { NullableNestedVal(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "nullableNestedVal")
                    }
                }
                
                public var nestedList: [NestedList] {
                    get {
                        return (snapshot["nestedList"] as! [Snapshot]).map { NestedList(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.snapshot }, forKey: "nestedList")
                    }
                }
                
                public var nestedNullableList: [NestedNullableList]? {
                    get {
                        return (snapshot["nestedNullableList"] as? [Snapshot]).flatMap { $0.map { NestedNullableList(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.flatMap { $0.map { $0.snapshot } }, forKey: "nestedNullableList")
                    }
                }
                
                public var nullableNestedList: [NullableNestedList?] {
                    get {
                        return (snapshot["nullableNestedList"] as! [Snapshot?]).map { $0.flatMap { NullableNestedList(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "nullableNestedList")
                    }
                }
                
                public var nullableNestedNullableList: [NullableNestedNullableList?]? {
                    get {
                        return (snapshot["nullableNestedNullableList"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { NullableNestedNullableList(snapshot: $0) } } }
                    }
                    set {
                        snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "nullableNestedNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct NestedVal: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedVal: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NestedList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NestedNullableList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedNullableList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
            }
        }
    }
    
    public final class OnUpdateNestedTypeTestModelSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnUpdateNestedTypeTestModel {\n  onUpdateNestedTypeTestModel {\n    __typename\n    id\n    nestedVal {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedVal {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nestedList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nestedNullableList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedNullableList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onUpdateNestedTypeTestModel", type: .object(OnUpdateNestedTypeTestModel.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onUpdateNestedTypeTestModel: OnUpdateNestedTypeTestModel? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onUpdateNestedTypeTestModel": onUpdateNestedTypeTestModel.flatMap { $0.snapshot }])
            }
            
            public var onUpdateNestedTypeTestModel: OnUpdateNestedTypeTestModel? {
                get {
                    return (snapshot["onUpdateNestedTypeTestModel"] as? Snapshot).flatMap { OnUpdateNestedTypeTestModel(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateNestedTypeTestModel")
                }
            }
            
            public struct OnUpdateNestedTypeTestModel: GraphQLSelectionSet {
                public static let possibleTypes = ["NestedTypeTestModel"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("nestedVal", type: .nonNull(.object(NestedVal.selections))),
                    GraphQLField("nullableNestedVal", type: .object(NullableNestedVal.selections)),
                    GraphQLField("nestedList", type: .nonNull(.list(.nonNull(.object(NestedList.selections))))),
                    GraphQLField("nestedNullableList", type: .list(.nonNull(.object(NestedNullableList.selections)))),
                    GraphQLField("nullableNestedList", type: .nonNull(.list(.object(NullableNestedList.selections)))),
                    GraphQLField("nullableNestedNullableList", type: .list(.object(NullableNestedNullableList.selections))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, nestedVal: NestedVal, nullableNestedVal: NullableNestedVal? = nil, nestedList: [NestedList], nestedNullableList: [NestedNullableList]? = nil, nullableNestedList: [NullableNestedList?], nullableNestedNullableList: [NullableNestedNullableList?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "NestedTypeTestModel", "id": id, "nestedVal": nestedVal.snapshot, "nullableNestedVal": nullableNestedVal.flatMap { $0.snapshot }, "nestedList": nestedList.map { $0.snapshot }, "nestedNullableList": nestedNullableList.flatMap { $0.map { $0.snapshot } }, "nullableNestedList": nullableNestedList.map { $0.flatMap { $0.snapshot } }, "nullableNestedNullableList": nullableNestedNullableList.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var nestedVal: NestedVal {
                    get {
                        return NestedVal(snapshot: snapshot["nestedVal"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "nestedVal")
                    }
                }
                
                public var nullableNestedVal: NullableNestedVal? {
                    get {
                        return (snapshot["nullableNestedVal"] as? Snapshot).flatMap { NullableNestedVal(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "nullableNestedVal")
                    }
                }
                
                public var nestedList: [NestedList] {
                    get {
                        return (snapshot["nestedList"] as! [Snapshot]).map { NestedList(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.snapshot }, forKey: "nestedList")
                    }
                }
                
                public var nestedNullableList: [NestedNullableList]? {
                    get {
                        return (snapshot["nestedNullableList"] as? [Snapshot]).flatMap { $0.map { NestedNullableList(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.flatMap { $0.map { $0.snapshot } }, forKey: "nestedNullableList")
                    }
                }
                
                public var nullableNestedList: [NullableNestedList?] {
                    get {
                        return (snapshot["nullableNestedList"] as! [Snapshot?]).map { $0.flatMap { NullableNestedList(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "nullableNestedList")
                    }
                }
                
                public var nullableNestedNullableList: [NullableNestedNullableList?]? {
                    get {
                        return (snapshot["nullableNestedNullableList"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { NullableNestedNullableList(snapshot: $0) } } }
                    }
                    set {
                        snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "nullableNestedNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct NestedVal: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedVal: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NestedList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NestedNullableList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedNullableList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
            }
        }
    }
    
    public final class OnDeleteNestedTypeTestModelSubscription: GraphQLSubscription {
        public static let operationString =
        "subscription OnDeleteNestedTypeTestModel {\n  onDeleteNestedTypeTestModel {\n    __typename\n    id\n    nestedVal {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedVal {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nestedList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nestedNullableList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    nullableNestedNullableList {\n      __typename\n      valueOne\n      valueTwo\n    }\n    createdAt\n    updatedAt\n  }\n}"
        
        public init() {
        }
        
        public struct Data: GraphQLSelectionSet {
            public static let possibleTypes = ["Subscription"]
            
            public static let selections: [GraphQLSelection] = [
                GraphQLField("onDeleteNestedTypeTestModel", type: .object(OnDeleteNestedTypeTestModel.selections)),
            ]
            
            public var snapshot: Snapshot
            
            public init(snapshot: Snapshot) {
                self.snapshot = snapshot
            }
            
            public init(onDeleteNestedTypeTestModel: OnDeleteNestedTypeTestModel? = nil) {
                self.init(snapshot: ["__typename": "Subscription", "onDeleteNestedTypeTestModel": onDeleteNestedTypeTestModel.flatMap { $0.snapshot }])
            }
            
            public var onDeleteNestedTypeTestModel: OnDeleteNestedTypeTestModel? {
                get {
                    return (snapshot["onDeleteNestedTypeTestModel"] as? Snapshot).flatMap { OnDeleteNestedTypeTestModel(snapshot: $0) }
                }
                set {
                    snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteNestedTypeTestModel")
                }
            }
            
            public struct OnDeleteNestedTypeTestModel: GraphQLSelectionSet {
                public static let possibleTypes = ["NestedTypeTestModel"]
                
                public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("nestedVal", type: .nonNull(.object(NestedVal.selections))),
                    GraphQLField("nullableNestedVal", type: .object(NullableNestedVal.selections)),
                    GraphQLField("nestedList", type: .nonNull(.list(.nonNull(.object(NestedList.selections))))),
                    GraphQLField("nestedNullableList", type: .list(.nonNull(.object(NestedNullableList.selections)))),
                    GraphQLField("nullableNestedList", type: .nonNull(.list(.object(NullableNestedList.selections)))),
                    GraphQLField("nullableNestedNullableList", type: .list(.object(NullableNestedNullableList.selections))),
                    GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
                    GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
                ]
                
                public var snapshot: Snapshot
                
                public init(snapshot: Snapshot) {
                    self.snapshot = snapshot
                }
                
                public init(id: GraphQLID, nestedVal: NestedVal, nullableNestedVal: NullableNestedVal? = nil, nestedList: [NestedList], nestedNullableList: [NestedNullableList]? = nil, nullableNestedList: [NullableNestedList?], nullableNestedNullableList: [NullableNestedNullableList?]? = nil, createdAt: String, updatedAt: String) {
                    self.init(snapshot: ["__typename": "NestedTypeTestModel", "id": id, "nestedVal": nestedVal.snapshot, "nullableNestedVal": nullableNestedVal.flatMap { $0.snapshot }, "nestedList": nestedList.map { $0.snapshot }, "nestedNullableList": nestedNullableList.flatMap { $0.map { $0.snapshot } }, "nullableNestedList": nullableNestedList.map { $0.flatMap { $0.snapshot } }, "nullableNestedNullableList": nullableNestedNullableList.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "createdAt": createdAt, "updatedAt": updatedAt])
                }
                
                public var __typename: String {
                    get {
                        return snapshot["__typename"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "__typename")
                    }
                }
                
                public var id: GraphQLID {
                    get {
                        return snapshot["id"]! as! GraphQLID
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "id")
                    }
                }
                
                public var nestedVal: NestedVal {
                    get {
                        return NestedVal(snapshot: snapshot["nestedVal"]! as! Snapshot)
                    }
                    set {
                        snapshot.updateValue(newValue.snapshot, forKey: "nestedVal")
                    }
                }
                
                public var nullableNestedVal: NullableNestedVal? {
                    get {
                        return (snapshot["nullableNestedVal"] as? Snapshot).flatMap { NullableNestedVal(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue?.snapshot, forKey: "nullableNestedVal")
                    }
                }
                
                public var nestedList: [NestedList] {
                    get {
                        return (snapshot["nestedList"] as! [Snapshot]).map { NestedList(snapshot: $0) }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.snapshot }, forKey: "nestedList")
                    }
                }
                
                public var nestedNullableList: [NestedNullableList]? {
                    get {
                        return (snapshot["nestedNullableList"] as? [Snapshot]).flatMap { $0.map { NestedNullableList(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.flatMap { $0.map { $0.snapshot } }, forKey: "nestedNullableList")
                    }
                }
                
                public var nullableNestedList: [NullableNestedList?] {
                    get {
                        return (snapshot["nullableNestedList"] as! [Snapshot?]).map { $0.flatMap { NullableNestedList(snapshot: $0) } }
                    }
                    set {
                        snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "nullableNestedList")
                    }
                }
                
                public var nullableNestedNullableList: [NullableNestedNullableList?]? {
                    get {
                        return (snapshot["nullableNestedNullableList"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { NullableNestedNullableList(snapshot: $0) } } }
                    }
                    set {
                        snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "nullableNestedNullableList")
                    }
                }
                
                public var createdAt: String {
                    get {
                        return snapshot["createdAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "createdAt")
                    }
                }
                
                public var updatedAt: String {
                    get {
                        return snapshot["updatedAt"]! as! String
                    }
                    set {
                        snapshot.updateValue(newValue, forKey: "updatedAt")
                    }
                }
                
                public struct NestedVal: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedVal: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NestedList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NestedNullableList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
                
                public struct NullableNestedNullableList: GraphQLSelectionSet {
                    public static let possibleTypes = ["Nested"]
                    
                    public static let selections: [GraphQLSelection] = [
                        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                        GraphQLField("valueOne", type: .scalar(Int.self)),
                        GraphQLField("valueTwo", type: .scalar(String.self)),
                    ]
                    
                    public var snapshot: Snapshot
                    
                    public init(snapshot: Snapshot) {
                        self.snapshot = snapshot
                    }
                    
                    public init(valueOne: Int? = nil, valueTwo: String? = nil) {
                        self.init(snapshot: ["__typename": "Nested", "valueOne": valueOne, "valueTwo": valueTwo])
                    }
                    
                    public var __typename: String {
                        get {
                            return snapshot["__typename"]! as! String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "__typename")
                        }
                    }
                    
                    public var valueOne: Int? {
                        get {
                            return snapshot["valueOne"] as? Int
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueOne")
                        }
                    }
                    
                    public var valueTwo: String? {
                        get {
                            return snapshot["valueTwo"] as? String
                        }
                        set {
                            snapshot.updateValue(newValue, forKey: "valueTwo")
                        }
                    }
                }
            }
        }
    }
}
